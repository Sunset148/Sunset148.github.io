<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>图片等比裁剪</title>
    <url>/2023/06/29/ImageCropping/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>在深度学习预处理图片数据中，往往我们的数据集并不算富裕，我们将一张大图以此裁剪为modle输入的图片大小。而一张大图往往不能恰好分为所需的小图，所以我们在边缘进行了处理，在不满足其裁切小图的大小时往中间进行填充，以达到输入图片的要求。</p>
<h2 id="代码实现">代码实现</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Path: 处理图片路径   SavePath: 保存图片路径 CropSize:裁剪大小 filename:保存图片名字前缀</span></span><br><span class="line">def Crop(Path, SavePath, CropSize, RepetitionRate,filename):</span><br><span class="line">    dataset_img = Image.open(Path)</span><br><span class="line">    width = dataset_img.size[0]</span><br><span class="line">    height = dataset_img.size[1]</span><br><span class="line">    img = np.asarray(dataset_img)  <span class="comment"># 获取数据</span></span><br><span class="line">    filename = filename[0:-4]</span><br><span class="line">    <span class="comment">#  获取当前文件夹的文件个数len,并以len+1命名即将裁剪得到的图像</span></span><br><span class="line">    new_name =  1</span><br><span class="line">    <span class="comment">#  裁剪图片,重复率为RepetitionRate</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int((height - CropSize * RepetitionRate) / (CropSize * (1 - RepetitionRate)))):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(int((width - CropSize * RepetitionRate) / (CropSize * (1 - RepetitionRate)))):</span><br><span class="line">            <span class="comment">#  如果图像是单波段</span></span><br><span class="line">            <span class="keyword">if</span> (len(img.shape) == 2):</span><br><span class="line">                cropped = img[</span><br><span class="line">                          int(i * CropSize * (1 - RepetitionRate)): int(i * CropSize * (1 - RepetitionRate)) + CropSize,</span><br><span class="line">                          int(j * CropSize * (1 - RepetitionRate)): int(j * CropSize * (1 - RepetitionRate)) + CropSize]</span><br><span class="line">            <span class="comment">#  如果图像是多波段</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cropped = img[</span><br><span class="line">                          int(i * CropSize * (1 - RepetitionRate)): int(i * CropSize * (1 - RepetitionRate)) + CropSize,</span><br><span class="line">                          int(j * CropSize * (1 - RepetitionRate)): int(j * CropSize * (1 - RepetitionRate)) + CropSize,:]</span><br><span class="line">            <span class="comment">#  写图像</span></span><br><span class="line">            cropped = Image.fromarray(cropped)</span><br><span class="line">            cropped.save(SavePath + filename+<span class="string">&quot;_%d.png&quot;</span> % new_name)</span><br><span class="line">            <span class="comment">#  文件名 + 1</span></span><br><span class="line">            new_name = new_name + 1</span><br><span class="line">    <span class="comment">#  向前裁剪最后一列</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int((height - CropSize * RepetitionRate) / (CropSize * (1 - RepetitionRate)))):</span><br><span class="line">        <span class="keyword">if</span> (len(img.shape) == 2):</span><br><span class="line">            cropped = img[int(i * CropSize * (1 - RepetitionRate)): int(i * CropSize * (1 - RepetitionRate)) + CropSize,</span><br><span class="line">                      (width - CropSize): width]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cropped = img[</span><br><span class="line">                      int(i * CropSize * (1 - RepetitionRate)): int(i * CropSize * (1 - RepetitionRate)) + CropSize,</span><br><span class="line">                      (width - CropSize): width,:]</span><br><span class="line">        <span class="comment">#  写图像</span></span><br><span class="line">        cropped = Image.fromarray(cropped)</span><br><span class="line">        cropped.save(SavePath + <span class="string">&quot;/%d.png&quot;</span> % new_name)</span><br><span class="line">        new_name = new_name + 1</span><br><span class="line">    <span class="comment">#  向前裁剪最后一行</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(int((width - CropSize * RepetitionRate) / (CropSize * (1 - RepetitionRate)))):</span><br><span class="line">        <span class="keyword">if</span> (len(img.shape) == 2):</span><br><span class="line">            cropped = img[(height - CropSize): height,</span><br><span class="line">                      int(j * CropSize * (1 - RepetitionRate)): int(j * CropSize * (1 - RepetitionRate)) + CropSize]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cropped = img[</span><br><span class="line">                      (height - CropSize): height,</span><br><span class="line">                      int(j * CropSize * (1 - RepetitionRate)): int(j * CropSize * (1 - RepetitionRate)) + CropSize,:]</span><br><span class="line">        cropped = Image.fromarray(cropped)</span><br><span class="line">        cropped.save(SavePath + <span class="string">&quot;/%d.png&quot;</span> % new_name)</span><br><span class="line">        <span class="comment">#  文件名 + 1</span></span><br><span class="line">        new_name = new_name + 1</span><br><span class="line">    <span class="comment">#  裁剪右下角</span></span><br><span class="line">    <span class="keyword">if</span> (len(img.shape) == 2):</span><br><span class="line">        cropped = img[(height - CropSize): height,</span><br><span class="line">                  (width - CropSize): width]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cropped = img[</span><br><span class="line">                  (height - CropSize): height,</span><br><span class="line">                  (width - CropSize): width,:]</span><br><span class="line">    cropped = Image.fromarray(cropped)</span><br><span class="line">    cropped.save(SavePath + <span class="string">&quot;/%d.png&quot;</span> % new_name)</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">dirname</span>, _, filenames <span class="keyword">in</span> os.walk(<span class="string">&#x27;./inciseImg/&#x27;</span>):</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">        img_path = os.path.join(<span class="string">&quot;./img/&quot;</span>, filename)</span><br><span class="line">        lable_path = os.path.join(<span class="string">&quot;../dataset/sealand/label/&quot;</span>,filename)</span><br><span class="line">        Crop(img_path,<span class="string">&quot;./inciseImg/&quot;</span>,256,0.1,filename)</span><br><span class="line">        Crop(lable_path,<span class="string">&quot;./inciseLable/&quot;</span>,256,0.1,filename)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>pytorch</category>
      </categories>
      <tags>
        <tag>数据预处理</tag>
      </tags>
  </entry>
  <entry>
    <title>IdentifyApplets</title>
    <url>/2023/09/27/IdentifyApplets/</url>
    <content><![CDATA[<h2 id="微信手写识别银行卡卡号识别身份证识别">微信手写识别/银行卡卡号识别/身份证识别</h2>
<h3 id="项目介绍">项目介绍</h3>
此项目仅提供个人使用未上线未开源，开发平台为微信开发者工具，使用了云函数，百度云API调用接口实现识别，在识别后显示到屏幕中可修改，最后可导出为excel表格。
<div data-align="center">
<pre><code>&lt;img src=&quot;IdentifyApplets/1.jpg&quot; width=&#39;200&#39; height=&#39;400&#39;&gt;
&lt;p&gt;作品展示&lt;/p&gt;</code></pre>
</div>
<h3 id="项目开发">项目开发</h3>
<h4 id="入手微信开发者工具">入手微信开发者工具</h4>
<ol type="1">
<li><p>注册微信小程序 如果你还没有微信公众平台的账号，请先进入<a class="link" href="https://mp.weixin.qq.com/wxamp/home/guide?lang=zh_CN&amp;token=831047294">微信公众平台首页<i class="fas fa-external-link-alt"></i></a>，点击 <code>立即注册</code> 按钮进行注册。注册的账号类型可以是订阅号、服务号、小程序以及企业微信，我们选择 <code>小程序</code> 即可。 接着填写账号信息，需要注意的是，填写的邮箱必须是未被微信公众平台注册、未被个人微信号绑定的邮箱，而且每个邮箱仅能申请一个小程序。 激活邮箱之后，选择主体类型为 <code>个人类型</code>，并按要求登记主体信息。主体信息提交后不可修改，该主体将成为你使用微信公众平台各项服务和功能的唯一法律主体与缔约主体，在后续开通其他业务功能时不得变更或修改。</p></li>
<li><p>下载微信开发者工具 下载<a class="link" href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=19010912">微信web开发者工具<i class="fas fa-external-link-alt"></i></a>，根据自己的操作系统下载对应的安装包进行安装即可。 通过查看<a class="link" href="https://developers.weixin.qq.com/miniprogram/dev/framework/">官网文档<i class="fas fa-external-link-alt"></i></a>可以更快了解到小程序的开发逻辑 打开开发者工具，用微信扫码登录开发者工具，准备开发你的第一个小程序吧！</p></li>
<li>创建项目 <b>新建项目</b> 打开<code>开发者工具</code>，选择 <code>小程序项目</code>，点击右下角的 <code>+</code> 新建项目。 选择一个空的文件夹作为项目目录，填入刚刚的 AppID，再填写一个项目名称，比如我这里叫做 ID。点击 <code>确定</code> 进入工具主界面 <b>项目结构</b> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── app.js     <span class="comment"># 小程序的逻辑文件</span></span><br><span class="line">├── app.json   <span class="comment"># 小程序的配置文件</span></span><br><span class="line">├── app.wxss   <span class="comment"># 全局公共样式文件</span></span><br><span class="line">├── pages      <span class="comment"># 存放小程序的各个页面</span></span><br><span class="line">│   ├── index  <span class="comment"># index页面</span></span><br><span class="line">│   │   ├── index.js     <span class="comment"># 页面逻辑</span></span><br><span class="line">│   │   ├── index.wxml   <span class="comment"># 页面结构</span></span><br><span class="line">│   │   └── index.wxss   <span class="comment"># 页面样式表</span></span><br><span class="line">│   └── logs   <span class="comment"># logs页面</span></span><br><span class="line">│       ├── logs.js      <span class="comment"># 页面逻辑</span></span><br><span class="line">│       ├── logs.json    <span class="comment"># 页面配置</span></span><br><span class="line">│       ├── logs.wxml    <span class="comment"># 页面结构</span></span><br><span class="line">│       └── logs.wxss    <span class="comment"># 页面样式表</span></span><br><span class="line">├── project.config.json</span><br><span class="line">└── utils</span><br><span class="line">    └── util.js</span><br></pre></td></tr></table></figure> 根目录下有3个文件：app.js、app.json、app.wxss，小程序必须有这3个描述 APP 的文件，并放在根目录下。这3个是应用程序级别的文件，与之平行的还有一个 pages 文件夹，用来存放小程序的各个页面。 我们可以和 web 前端开发技术做个类比：</li>
</ol>
<ul>
<li>wxml 类似于 HTML 文件，用来编写页面的标签和骨架，但里面只能用小程序自己封装的组件；</li>
<li>wxss 类似于 CSS 文件，用来编写页面样式，只是把 css 文件换成了 wxss 文件；</li>
<li>js 文件类似于前端编程中的 JavaScript 文件，用来编写小程序的页面逻辑；</li>
<li>json 文件用来配置页面的样式和行为。</li>
</ul>
<h4 id="微信云开发">微信云开发</h4>
<p>微信云开发是微信团队联合腾讯云推出的专业的小程序开发服务。 开发者可以使用云开发快速开发小程序、小游戏、公众号网页等，并且原生打通微信开放能力。 开发者无需搭建服务器，可免鉴权直接使用平台提供的 API 进行业务开发。</p>
<h5 id="快速开始">快速开始</h5>
<ol type="1">
<li><p>准备工作 下载并安装<a class="link" href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">微信开发者工具<i class="fas fa-external-link-alt"></i></a>； <a class="link" href="https://mp.weixin.qq.com/">注册微信小程序<i class="fas fa-external-link-alt"></i></a>，获取小程序的 AppID（开发管理-开发设置）</p></li>
<li>创建项目 打开并登录微信开发者工具，新建小程序项目，填入 AppID，后端服务选择<code>微信云开发</code>并勾选同意<code>云开发服务条款</code>：
<div data-align="center">
<p><img src="/2023/09/27/IdentifyApplets/2.png" width="600" height="400"></p>
</div>
点击创建后，即可得到一个展示云开发基础能力的示例小程序：
<div data-align="center">
<p><img src="/2023/09/27/IdentifyApplets/3.png" width="600" height="400"></p>
</div></li>
<li>开通云开发，创建环境 在使用云开发能力之前，需要先开通云开发。 在开发者工具的工具栏左侧，点击 <code>云开发</code> 按钮即可打开云控制台，根据提示开通云开发，并且创建一个新的云开发环境。
<div data-align="center">
<p><img src="/2023/09/27/IdentifyApplets/4.png" width="600" height="100"></p>
</div></li>
</ol>
<ul>
<li>每个环境相互隔离，拥有唯一的环境<code>ID</code>，包含独立的数据库实例、存储空间、云函数配置等资源；</li>
<li>初始创建的环境自动成为默认环境；</li>
<li>默认配额下可以创建两个环境；</li>
<li>腾讯云控制台创建的云开发环境也可在微信云开发中使用。登录微信云开发控制台-设置-环境设置，点击环境名称，选择<code>管理我的环境</code>，点击<code>使用已有腾讯云环境</code>按钮，选择所需腾讯云环境，即可在微信云开发控制台使用该环境。</li>
</ul>
<h4 id="使用百度云接口实现识别">使用百度云接口实现识别</h4>
<h5 id="前言">前言</h5>
如今人们对于信息的获取需求越来越高，而图像识别技术的发展为我们带来了更加便捷高效的信息获取方式。微信小程序作为一种新型的应用形态，越来越受到用户的青睐。而本文将为大家介绍微信小程序基于百度云的图文识别技术。让我们一起来看看微信小程序基于百度云实现图文识别的奇妙之处吧！ ##### 准备工作 1. 首先我们需要注册一个百度云账号<a class="link" href="https://cloud.baidu.com/?from=console">百度云<i class="fas fa-external-link-alt"></i></a>
<div data-align="center">
<pre><code>&lt;img src=&quot;IdentifyApplets/5.jpg&quot; width=&#39;600&#39; height=&#39;400&#39;&gt;</code></pre>
</div>
<ol start="2" type="1">
<li>注册完毕后搜索文字识别
<div data-align="center">
<p><img src="/2023/09/27/IdentifyApplets/6.jpg" width="600" height="400"></p>
</div></li>
<li>点击创建应用，然后根据需求开通需要的功能
<div data-align="center">
<p><img src="/2023/09/27/IdentifyApplets/7.jpg" width="600" height="400"></p>
</div></li>
<li>领取免费测试资源 登录进入<a href="登录进入%20文字识别控制台，在【概览】页找到「领取免费资源」按钮。">文字识别控制台</a>，在<code>概览</code>页找到<code>领取免费资源</code>按钮。
<div data-align="center">
<p><img src="/2023/09/27/IdentifyApplets/11.png" width="600" height="400"> <img src="/2023/09/27/IdentifyApplets/12.png" width="600" height="400"></p>
</div></li>
<li>复制已经创建应用的<code>AppID</code>、<code>API Key</code>、<code>Secret Key</code>的值，代码中会用到
<div data-align="center">
<p><img src="/2023/09/27/IdentifyApplets/8.jpg" width="600" height="400"></p>
</div></li>
<li>上面一系列操作完成后，打开微信小程序社区平台配置服务器域名<a class="link" href="https://mp.weixin.qq.com/wxamp/home/guide?lang=zh_CN&amp;token=1574361629">微信小程序社区平台<i class="fas fa-external-link-alt"></i></a>
<div data-align="center">
<p><img src="/2023/09/27/IdentifyApplets/9.jpg" width="600" height="400"></p>
</div></li>
<li>回到微信开发者工具刷新 点击<code>详情</code> -&gt;<code>项目配置</code> -&gt;<code>刷新图表</code>
<div data-align="center">
<p><img src="/2023/09/27/IdentifyApplets/10.jpg" width="600" height="400"></p>
</div></li>
<li>项目中使用 在主页面<code>index.wxml</code>中添加按钮和布置页面 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;view class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">  &lt;!-- 前三个按钮样式 --&gt;</span><br><span class="line">    &lt;button bindtap=<span class="string">&#x27;idRecognition&#x27;</span> class=<span class="string">&quot;button primary-button&quot;</span>&gt;身份证正/反识别&lt;/button&gt;</span><br><span class="line">    &lt;button bindtap=<span class="string">&quot;digitalRecognition&quot;</span> class=<span class="string">&quot;button primary-button&quot;</span>&gt;图文识字&lt;/button&gt;</span><br><span class="line">    &lt;button bindtap=<span class="string">&quot;bankIdentification&quot;</span> class=<span class="string">&quot;button primary-button&quot;</span>&gt;银行卡号识别&lt;/button&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;table&quot;</span>&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;姓名:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;name&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onNameChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;性别:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;gender&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onGenderChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;民族:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;nationality&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onNationalityChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;生日:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;birth&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onBirthChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;地址:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;address&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onAddressChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;身份证号:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;id&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onIdChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;签发机关:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;authority&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onAuthorityChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;签发日期:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;issueDate&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onIssueDateChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;失效日期:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;expirationDate&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onExpirationDateChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;银行卡号:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;bankCardNumber&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onBankCardNumberChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;手机号:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;phoneNumber&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onPhoneNumberChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">  &lt;!-- 提交和清空按钮 --&gt;</span><br><span class="line">    &lt;button bindtap=<span class="string">&quot;saveDataToCloud&quot;</span> class=<span class="string">&quot;button secondary-button&quot;</span>&gt;确定&lt;/button&gt;</span><br><span class="line">    &lt;button bindtap=<span class="string">&quot;exportToExcel&quot;</span> class=<span class="string">&quot;button secondary-button&quot;</span>&gt;导出&lt;/button&gt;</span><br><span class="line">    &lt;button bindtap=<span class="string">&quot;clear&quot;</span> class=<span class="string">&quot;button secondary-button&quot;</span>&gt;清空数据&lt;/button&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure> ----------------------------- 在主页面<code>index.wxss</code>中添加样式 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">.button-group &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">&#125;</span><br><span class="line">.button &#123;</span><br><span class="line">  padding: 10px 20px;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  flex-grow: 1;</span><br><span class="line">  text-align: center;</span><br><span class="line">  margin: 5px;</span><br><span class="line">&#125;</span><br><span class="line">.primary-button &#123;</span><br><span class="line">  background-color: <span class="comment">#007bff;</span></span><br><span class="line">  color: <span class="comment">#fff;</span></span><br><span class="line">  border: none;</span><br><span class="line">&#125;</span><br><span class="line">.secondary-button &#123;</span><br><span class="line">  background-color: <span class="comment">#ff5722;</span></span><br><span class="line">  color: <span class="comment">#fff;</span></span><br><span class="line">  border: none;</span><br><span class="line">&#125;</span><br><span class="line">.table &#123;</span><br><span class="line">  border: 1px solid <span class="comment">#ddd;</span></span><br><span class="line">  padding: 10px;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  text-align: left;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">&#125;</span><br><span class="line">.row &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  margin-bottom: 10px;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">.label &#123;</span><br><span class="line">  width: 80px;</span><br><span class="line">  text-align: right;</span><br><span class="line">  margin-right: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.value &#123;</span><br><span class="line">  flex-grow: 1;</span><br><span class="line">&#125;</span><br><span class="line">.button:hover &#123;</span><br><span class="line">  opacity: 0.8;</span><br><span class="line">&#125;</span><br><span class="line">.table-container &#123;</span><br><span class="line">  margin: 20px;</span><br><span class="line">  border: 1px solid <span class="comment">#ddd;</span></span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.table &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  background-color: <span class="comment">#fff;</span></span><br><span class="line">  border-collapse: collapse;</span><br><span class="line">&#125;</span><br><span class="line">.table-header &#123;</span><br><span class="line">  background-color: <span class="comment">#007bff;</span></span><br><span class="line">  color: <span class="comment">#fff;</span></span><br><span class="line">  display: flex;</span><br><span class="line">  border-bottom: 1px solid <span class="comment">#ddd;</span></span><br><span class="line">&#125;</span><br><span class="line">.header-cell &#123;</span><br><span class="line">  flex-grow: 1;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.table-row &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  border-bottom: 1px solid <span class="comment">#ddd;</span></span><br><span class="line">&#125;</span><br><span class="line">.table-cell &#123;</span><br><span class="line">  flex-grow: 1;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">/* 悬浮效果 */</span><br><span class="line">.table-row:hover &#123;</span><br><span class="line">  background-color: <span class="comment">#f5f5f5;</span></span><br><span class="line">&#125;</span><br><span class="line">/* 奇偶行背景色 */</span><br><span class="line">.table-row:nth-child(odd) &#123;</span><br><span class="line">  background-color: <span class="comment">#f9f9f9;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 则展示如下
<div data-align="center">
<p><img src="/2023/09/27/IdentifyApplets/1.jpg" width="200" height="400"></p>
</div></li>
</ol>
<hr>
<p>在<code>idnex.js</code>中 我们首先要获取<code>百度access_token</code> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 获取百度access_token  </span><br><span class="line">  getBaiduToken: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    var apiKey = <span class="string">&#x27;yoursapiKey&#x27;</span> //百度云上的apiKey</span><br><span class="line">    var secKey = <span class="string">&#x27;yoursSECkey&#x27;</span> //百度云上的secKey</span><br><span class="line">    var tokenUrl = `https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=<span class="variable">$&#123;apiKey&#125;</span>&amp;client_secret=<span class="variable">$&#123;secKey&#125;</span>`; //调用百度云api接口</span><br><span class="line">    var that = this; //防止this指向问题</span><br><span class="line">    // 发送请求</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: tokenUrl,</span><br><span class="line">      method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      dataType: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">      header: &#123;</span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json; charset-UTF-8&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      // 返回数据</span><br><span class="line">      success: <span class="keyword">function</span> (res) &#123;</span><br><span class="line">        // console.log(<span class="string">&quot;baiduToken:&quot;</span>,res);</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          baiduToken: res.data.access_token</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 错误信息</span><br><span class="line">      fail: <span class="keyword">function</span> (res) &#123;</span><br><span class="line">        console.log(<span class="string">&quot;[BaiduToken获取失败]&quot;</span>, res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure> 然后调用接口实现功能 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 手写数字识别 百度ORC接口调用  </span><br><span class="line">  scanImageInfo: <span class="keyword">function</span> (imageData) &#123; // 将图片转换成<span class="built_in">base64</span>格式</span><br><span class="line">   var that = this; //防止this指向问题</span><br><span class="line">   const detectUrl = `https://aip.baidubce.com/rest/2.0/ocr/v1/accurate_basic?access_token=<span class="variable">$&#123;that.data.baiduToken&#125;</span>` // 调用百度云api接口并传递baiduToken</span><br><span class="line">   <span class="built_in">return</span> new Promise(<span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">     // 发送请求</span><br><span class="line">     wx.request(&#123;</span><br><span class="line">       url: detectUrl,</span><br><span class="line">       data: &#123;</span><br><span class="line">         image: imageData</span><br><span class="line">       &#125;,</span><br><span class="line">       method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">       dataType: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">       header: &#123;</span><br><span class="line">         <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">       &#125;,</span><br><span class="line">       // 返回数据</span><br><span class="line">       success: <span class="keyword">function</span> (res, resolve) &#123;</span><br><span class="line">         var dataList = res.data.words_result[0].words</span><br><span class="line">         console.log(res.data.words_result[0].words, <span class="string">&quot;识别内容&quot;</span>);</span><br><span class="line">         // 赋值给data中定义的变量</span><br><span class="line">         that.setData(&#123;</span><br><span class="line">           phoneNumber: dataList</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;,</span><br><span class="line">       // 错误信息</span><br><span class="line">       fail: <span class="keyword">function</span> (res, reject) &#123;</span><br><span class="line">         console.log(<span class="string">&#x27;get dataList fail：&#x27;</span>, res.data);</span><br><span class="line">       &#125;,</span><br><span class="line"></span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure> 然后按钮点击接入接口 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">digitalRecognition: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">   var that = this</span><br><span class="line">   that.getBaiduToken() // 提前获取access_Token</span><br><span class="line">   // 选择图片，拍照或从相册中获取</span><br><span class="line">   wx.chooseImage(&#123;</span><br><span class="line">     count: 1,</span><br><span class="line">     sizeType: [<span class="string">&#x27;compressed&#x27;</span>],</span><br><span class="line">     sourceType: [<span class="string">&#x27;album&#x27;</span>, <span class="string">&#x27;camera&#x27;</span>],</span><br><span class="line">     success: <span class="keyword">function</span> (res) &#123;</span><br><span class="line">       wx.showLoading(&#123;</span><br><span class="line">         title: <span class="string">&#x27;上传中&#x27;</span>,</span><br><span class="line">       &#125;)</span><br><span class="line">       const filePath = res.tempFilePaths[0]</span><br><span class="line">       // 上传图片        </span><br><span class="line">       wx.getFileSystemManager().readFile(&#123;</span><br><span class="line">         filePath: filePath,</span><br><span class="line">         encoding: <span class="string">&#x27;base64&#x27;</span>,</span><br><span class="line">         // 返回数据</span><br><span class="line">         success: <span class="keyword">function</span> (res) &#123;</span><br><span class="line">           // console.log(<span class="string">&quot;图片数据&quot;</span>, res);</span><br><span class="line">           // 识别的图片复赋值</span><br><span class="line">           that.setData(&#123;</span><br><span class="line">             imageUrl: res.data</span><br><span class="line">           &#125;)</span><br><span class="line">           that.scanImageInfo(res.data); // 调用百度API解析图片获取文字      </span><br><span class="line">         &#125;,</span><br><span class="line">         // 错误信息</span><br><span class="line">         fail: <span class="keyword">function</span> (res) &#123;</span><br><span class="line">           console.log(<span class="string">&quot;[读取图片数据fail]&quot;</span>, res)</span><br><span class="line">         &#125;,</span><br><span class="line">         complete: <span class="keyword">function</span> (res) &#123;</span><br><span class="line">           wx.hideLoading()</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure> 以上实现了手写识别功能。 如果要实现其他功能请查看<a class="link" href="https://cloud.baidu.com/doc/OCR/s/dk3iqnq51">百度智慧云官网文档<i class="fas fa-external-link-alt"></i></a>进行查看，其中的方法是类似的。</p>
<h4 id="小程序导出数据到excel表借助云开发后台实现excel数据的保存">小程序导出数据到excel表，借助云开发后台实现excel数据的保存</h4>
<h5 id="前言-1">前言</h5>
<p>我们在做小程序开发的过程中，可能会有这样的需求，就是把我们云数据库里的数据批量导出到excel表里。如果直接在小程序里写是实现不了的，所以我们要借助小程序的云开发功能了。这里需要用到云函数，云存储和云数据库。可以说通过这一个例子，把我们微信小程序云开发相关的知识都用到了。</p>
<h5 id="项目开发-1">项目开发</h5>
<ul>
<li>1，创建云函数</li>
<li>2，在云函数里读取云数据库里的数据</li>
<li>3，安装node-xlsx类库（node类库）</li>
<li>4，把云数据库里读取到的数据存到excel里</li>
<li>5，把excel存到云存储里并返回对应的云文件地址</li>
<li>6，通过云文件地址下载excel文件</li>
</ul>
<h6 id="一创建excel云函数">一，创建excel云函数</h6>
<p><b>创建云函数时有两点需要注意的，给大家说下</b> 1. 一定要把app.js里的环境id换成你自己的 2. 你的云函数目录要选择你对应的云开发环境（通常这里默认选中的）不过你这里的云开发环境要和你app.js里的保持一致</p>
<h6 id="二读取云数据库里的数据">二，读取云数据库里的数据</h6>
我们第一步创建好云函数以后，可以先在云函数里读取我们的云数据库里的数据。 1. 先看看我们云数据库里面的数据 进去<code>微信开发者工具</code>-&gt;<code>云开发</code>-&gt;<code>数据库</code>
<div data-align="center">
<pre><code>&lt;img src=&quot;IdentifyApplets/13.jpg&quot; width=&#39;800&#39; height=&#39;400&#39;&gt;</code></pre>
</div>
<ol start="2" type="1">
<li>编写云函数，读取云数据库里的数据（一定要记得部署云函数） 右击后点击<code>新建Node.js云函数</code>
<div data-align="center">
<p><img src="/2023/09/27/IdentifyApplets/14.jpg" width="800" height="400"></p>
</div>
然后在云函数文件下的<code>index.js</code>,用于获取集合为<code>idCardData</code>下面的所有数据。（集合名填入自己集合的名字） <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 云函数入口文件</span><br><span class="line">const cloud = require(<span class="string">&#x27;wx-server-sdk&#x27;</span>);</span><br><span class="line">cloud.init(&#123; <span class="built_in">env</span>: cloud.DYNAMIC_CURRENT_ENV &#125;) // 使用当前云环境</span><br><span class="line">// 云函数入口函数</span><br><span class="line">exports.main = async(event, context) =&gt; &#123;</span><br><span class="line">  <span class="built_in">return</span> await cloud.database().collection(<span class="string">&#x27;idCardData&#x27;</span>).get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 部署同样右击云函数文件夹点击部署即可</li>
</ol>
<h6 id="三-安装生成excel文件的类库-node-xlsx">三、 安装生成excel文件的类库 node-xlsx</h6>
<p>通过上面第二步可以看到我们已经成功的拿到需要保存到excel的源数据，我们接下来要做的就是把数据保存到excel</p>
1，安装node-xlsx类库 同样按照第二步新建一个excel的云函数，然后右击excel文件夹选择<code>在终端中打开</code> 这一步需要我们事先安装node,因为我们要用到npm命令，通过命令行 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install node-xlsx</span><br></pre></td></tr></table></figure> 可以看出我们安装完成以后，多了一个package-lock.json的文件
<div data-align="center">
<pre><code>&lt;img src=&quot;IdentifyApplets/15.jpg&quot; width=&#39;200&#39; height=&#39;400&#39;&gt;</code></pre>
</div>
<h6 id="四-编写把数据保存到excel的代码">四、 编写把数据保存到excel的代码，</h6>
<p>在excel的云函数的<code>index.js</code>中填入 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 云函数入口文件</span><br><span class="line">const cloud = require(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cloud.init(&#123; <span class="built_in">env</span>: cloud.DYNAMIC_CURRENT_ENV &#125;) // 使用当前云环境</span><br><span class="line">const xlsx = require(<span class="string">&#x27;node-xlsx&#x27;</span>);</span><br><span class="line"></span><br><span class="line">// 云函数入口函数</span><br><span class="line">// 云函数入口函数</span><br><span class="line">exports.main = async(event, context) =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    <span class="built_in">let</span> &#123;IDdata&#125; = event</span><br><span class="line">    </span><br><span class="line">    //1,定义excel表格名</span><br><span class="line">    <span class="built_in">let</span> dataCVS = <span class="string">&#x27;test.xlsx&#x27;</span></span><br><span class="line">    //2，定义存储数据的</span><br><span class="line">    <span class="built_in">let</span> alldata = [];</span><br><span class="line">    <span class="built_in">let</span> row = [<span class="string">&#x27;姓名&#x27;</span>, <span class="string">&#x27;性别&#x27;</span>, <span class="string">&#x27;民族&#x27;</span>, <span class="string">&#x27;出生&#x27;</span>, <span class="string">&#x27;地址&#x27;</span>, <span class="string">&#x27;ID&#x27;</span>, <span class="string">&#x27;签发机关&#x27;</span>,<span class="string">&#x27;签发日期&#x27;</span>,<span class="string">&#x27;失效日期&#x27;</span>,<span class="string">&#x27;银行卡号&#x27;</span>,<span class="string">&#x27;手机号&#x27;</span>]; //表属性</span><br><span class="line">    alldata.push(row);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">let</span> key <span class="keyword">in</span> IDdata) &#123;</span><br><span class="line">      <span class="built_in">let</span> arr = [];</span><br><span class="line">      arr.push(IDdata[key].name);</span><br><span class="line">      arr.push(IDdata[key].gender);</span><br><span class="line">      arr.push(IDdata[key].nationality);</span><br><span class="line">      arr.push(IDdata[key].birth);</span><br><span class="line">      arr.push(IDdata[key].address);</span><br><span class="line">      arr.push(IDdata[key].<span class="built_in">id</span>);</span><br><span class="line">      arr.push(IDdata[key].authority);</span><br><span class="line">      arr.push(IDdata[key].issueDate);      </span><br><span class="line">      arr.push(IDdata[key].expirationDate);</span><br><span class="line">      arr.push(IDdata[key].bankCardNumber);</span><br><span class="line">      arr.push(IDdata[key].phoneNumber);</span><br><span class="line">      alldata.push(arr)</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(<span class="string">&quot;alldata:&quot;</span>,alldata)</span><br><span class="line">    //3，把数据保存到excel里</span><br><span class="line">    var buffer = await xlsx.build([&#123;</span><br><span class="line">      name: <span class="string">&quot;mySheetName&quot;</span>,</span><br><span class="line">      data: alldata</span><br><span class="line">    &#125;]);</span><br><span class="line">    //4，把excel文件保存到云存储里</span><br><span class="line">    <span class="built_in">return</span> await cloud.uploadFile(&#123;</span><br><span class="line">      cloudPath: dataCVS,</span><br><span class="line">      fileContent: buffer, //excel二进制文件</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.error(e)</span><br><span class="line">    <span class="built_in">return</span> e</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h6 id="五把excel存到云存储里并返回对应的云文件地址">五，把excel存到云存储里并返回对应的云文件地址</h6>
我们上面已经成功的把数据存到excel里，并把excel文件存到云存储里。可以看下效果。
<div data-align="center">
<pre><code>&lt;img src=&quot;IdentifyApplets/16.jpg&quot; width=&#39;700&#39; height=&#39;400&#39;&gt;</code></pre>
</div>
<p>我们这个时候，就可以通过上图的下载地址下载excel文件了。 其实到这里就差不多实现了基本的把数据保存到excel里的功能了，但是我们要下载excel，总不能每次都去云开发后台吧。所以我们接下来要动态的获取这个下载地址。</p>
<h6 id="六获取云文件地址下载excel文件">六，获取云文件地址下载excel文件</h6>
进如<code>index</code>文件下的<code>index.js</code>将下载地址给用户 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//把数据保存到excel里，并把excel保存到云存储</span><br><span class="line"> savaExcel(IDdata) &#123;</span><br><span class="line">   <span class="built_in">let</span> that = this</span><br><span class="line">   wx.cloud.callFunction(&#123;</span><br><span class="line">     name: <span class="string">&quot;excle&quot;</span>,</span><br><span class="line">     data: &#123;</span><br><span class="line">       IDdata: IDdata</span><br><span class="line">     &#125;,</span><br><span class="line">     success(res) &#123;</span><br><span class="line">       console.log(<span class="string">&quot;保存成功&quot;</span>, res)</span><br><span class="line">       that.getFileUrl(res.result.fileID)</span><br><span class="line">     &#125;,</span><br><span class="line">     fail(res) &#123;</span><br><span class="line">       console.log(<span class="string">&quot;保存失败&quot;</span>, res)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br><span class="line"> //获取云存储文件下载地址，这个地址有效期一天</span><br><span class="line"> getFileUrl(fileID) &#123;</span><br><span class="line">   <span class="built_in">let</span> that = this;</span><br><span class="line">   wx.cloud.getTempFileURL(&#123;</span><br><span class="line">     fileList: [fileID],</span><br><span class="line">     success: res =&gt; &#123;</span><br><span class="line">       // get temp file URL</span><br><span class="line">       console.log(<span class="string">&quot;文件下载链接&quot;</span>, res.fileList[0].tempFileURL)</span><br><span class="line">       that.setData(&#123;</span><br><span class="line">         fileUrl: res.fileList[0].tempFileURL</span><br><span class="line">       &#125;)</span><br><span class="line">       // 弹出提示框</span><br><span class="line">       wx.showModal(&#123;</span><br><span class="line">         title: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">         content: <span class="string">&#x27;要复制下载表格吗？&#x27;</span>,</span><br><span class="line">         confirmText: <span class="string">&#x27;复制&#x27;</span>,</span><br><span class="line">         cancelText: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">         success(res) &#123;</span><br><span class="line">           <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">             // 用户点击了确认按钮</span><br><span class="line">             // 执行复制网址的逻辑</span><br><span class="line">             const urlToCopy = that.data.fileUrl; // 替换为要复制的网址</span><br><span class="line">             wx.setClipboardData(&#123;</span><br><span class="line">               data: urlToCopy,</span><br><span class="line">               <span class="function"><span class="title">success</span></span>() &#123;</span><br><span class="line">                 wx.showToast(&#123;</span><br><span class="line">                   title: <span class="string">&#x27;复制成功&#x27;</span>,</span><br><span class="line">                   icon: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">                   duration: 2000</span><br><span class="line">                 &#125;);</span><br><span class="line">               &#125;</span><br><span class="line">             &#125;);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.cancel) &#123;</span><br><span class="line">             // 用户点击了取消按钮</span><br><span class="line">             // 执行取消操作</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;,</span><br><span class="line">     fail: err =&gt; &#123;</span><br><span class="line">       // handle error</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br><span class="line"> //复制excel文件下载链接</span><br><span class="line"> <span class="function"><span class="title">copyFileUrl</span></span>() &#123;</span><br><span class="line">   <span class="built_in">let</span> that=this</span><br><span class="line">   wx.setClipboardData(&#123;</span><br><span class="line">     data: that.data.fileUrl,</span><br><span class="line">     success(res) &#123;</span><br><span class="line">       wx.getClipboardData(&#123;</span><br><span class="line">         success(res) &#123;</span><br><span class="line">           console.log(<span class="string">&quot;复制成功&quot;</span>,res.data) // data</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="function"><span class="title">exportToExcel</span></span>() &#123;</span><br><span class="line">   <span class="built_in">let</span> that = this;</span><br><span class="line">   //读取ID表数据</span><br><span class="line">   wx.cloud.callFunction(&#123;</span><br><span class="line">     name: <span class="string">&quot;getID&quot;</span>,</span><br><span class="line">     success(res) &#123;</span><br><span class="line">       console.log(<span class="string">&quot;读取成功&quot;</span>, res.result.data)</span><br><span class="line">       that.savaExcel(res.result.data)</span><br><span class="line">     &#125;,</span><br><span class="line">     fail(res) &#123;</span><br><span class="line">       console.log(<span class="string">&quot;读取失败&quot;</span>, res)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>
<div data-align="center">
<pre><code>&lt;img src=&quot;IdentifyApplets/17.jpg&quot; width=&#39;200&#39; height=&#39;400&#39;&gt;</code></pre>
</div>
<p>给大家说下上面代码的步骤。</p>
<ul>
<li>1，下通过getUsers云函数去云数据库获取数据</li>
<li>2，把获取到的数据通过excel云函数把数据保存到excel，然后把excel保存的云存储。</li>
<li>3，获取云存储里的文件下载链接</li>
<li>4，复制下载链接，到浏览器里下载excel文件。 到这里我们就完整的实现了把数据保存到excel的功能了。</li>
</ul>
<h3 id="注意事项">注意事项</h3>
<p>因为云函数一次性只能查询100条记录，所以每一百条记录后需要导出，清空数据后方能继续使用。 百度云提供的免费接口只能使用1000次，如果要超额需要付费，大概0.002一条。</p>
]]></content>
      <tags>
        <tag>微信小程序开发</tag>
      </tags>
  </entry>
  <entry>
    <title>图像增强随机裁剪图片</title>
    <url>/2023/07/03/ImageEnhancementCropPicturesRandomly/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>在深度学习图片分割领域，经常使用数据增强的方法扩充自己的数据集。然而在语义分割中需要保证img和lable所随机裁剪的区域相同。所以我们需要设定随机种子</p>
<h2 id="代码实现">代码实现</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">seed = torch.random.seed()</span><br><span class="line"><span class="comment"># 用该方法获取一个随机种子</span></span><br><span class="line">seed = torch.random.seed()</span><br><span class="line"><span class="comment"># 该方法设置随机种子</span></span><br><span class="line">torch.random.manual_seed(seed)</span><br><span class="line">cropped_image = self.transform(image)</span><br><span class="line">torch.random.manual_seed(seed)</span><br><span class="line">cropped_label = self.transform(label)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>pytorch</category>
      </categories>
      <tags>
        <tag>数据增强</tag>
      </tags>
  </entry>
  <entry>
    <title>mmcv的安装</title>
    <url>/2023/07/06/InstallMmcv/</url>
    <content><![CDATA[<h3 id="前言">前言</h3>
<p>在使用mmcv中，经常出现mmcv安装失败或者一直卡在安装程序中。为了解决此类问题。我们参考了mmcv的官方文档。 且需要注意的是：请按照mmcv-full，如果安装mmcv还是会有报错的情况出现</p>
<h3 id="安装">安装</h3>
<p>笔者配置为 torch 1.7.1 cuda 1.1.0</p>
<p>此时我们点开<a class="link" href="https://mmcv.readthedocs.io/zh_CN/v1.4.0/get_started/installation.html">官网<i class="fas fa-external-link-alt"></i></a>参照自己的torch和cuda版本安装即可 查看cuda版本可通过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvcc --version</span><br></pre></td></tr></table></figure>
<p>查看torch版本可通过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line">&gt;&gt;import torch</span><br><span class="line">&gt;&gt;<span class="built_in">print</span>(torch.__version__)</span><br></pre></td></tr></table></figure>
<p>我们通过自己cuda和torch的版本选择安装即可 <img src="/2023/07/06/InstallMmcv/1.jpg" width="400"></p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>mmcv安装</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 cPolar 实现内网穿透</title>
    <url>/2023/06/26/IntranetPenetration/</url>
    <content><![CDATA[<h2 id="使用-cpolar-实现内网穿透">使用 cPolar 实现内网穿透</h2>
<h2 id="介绍">介绍</h2>
<p>内网穿透是一种将局域网内的服务暴露到公网的技术，它可以让你在外网访问你内网的服务，例如通过公网访问家庭网络中的摄像头或者办公室网络中的服务器等。cPolar 是一个强大的工具，它可以帮助你实现内网穿透，让你轻松地访问你内网中的服务。</p>
<h2 id="设备">设备</h2>
<p>一台i10 A4000 4tb装有unbantu操作系</p>
<h2 id="安装-cpolar">安装 cPolar</h2>
<p>我们参照的是<a class="link" href="https://www.cpolar.com/blog/linux-system-installation-cpolar#%E6%B3%A8_cpolar_%E5%8D%B8%E8%BD%BD%E6%96%B9%E6%B3%95">官网<i class="fas fa-external-link-alt"></i></a>的安装教程，操作简单且只用使用命令即可。首先你得保证你的服务器是连接了互联网。你可以根据以下命令检查服务器是否连接了互联网。（如有返回则联通了互联网） <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bing www.baidu.com</span><br></pre></td></tr></table></figure></p>
<h3 id="环境需求">环境需求</h3>
<p>该脚本适用于Ubuntu16.04/18.04/20.04及以后，Centos7/8及以后版本，树莓派最新官方镜像，及支持systemd的新式Linux操作系统，该脚本会自动判断CPU架构（i386/amd64/mips/arm/arm64等等），自动下载对应cpolar客户端，并自动部署安装。 ### 安装 首先，你需要安装 cPolar 工具。你可以通过以下步骤来安装 cPolar：</p>
<ol type="1">
<li><p>cpolar 安装（国内使用） <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | sudo bash</span><br></pre></td></tr></table></figure> 或 cpolar短链接安装方式：(国外使用） <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sL https://git.io/cpolar | sudo bash</span><br></pre></td></tr></table></figure></p></li>
<li><p>查看版本号，有正常显示版本号即为安装成功 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cpolar version</span><br></pre></td></tr></table></figure></p></li>
<li><p>token认证 登录cpolar<a class="link" href="https://dashboard.cpolar.com/get-started">官网后台<i class="fas fa-external-link-alt"></i></a>，点击左侧的验证，查看自己的认证token，之后将token贴在命令行里(xxxx 在点入官网后台的验证中可复制) <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cpolar authtoken xxxxxxx</span><br></pre></td></tr></table></figure></p></li>
<li>简单穿透测试 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cpolar http 8080</span><br></pre></td></tr></table></figure> 按ctrl+c退出</li>
<li>向系统添加服务 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable cpolar</span><br></pre></td></tr></table></figure></li>
<li>启动cpolar服务 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start cpolar</span><br></pre></td></tr></table></figure></li>
<li>查看服务状态 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl status cpolar</span><br></pre></td></tr></table></figure> 当查看到绿色显示为 activae(running) 则成功</li>
<li><p>登录后台，查看隧道在线状态 <a class="link" href="https://dashboard.cpolar.com/status">https://dashboard.cpolar.com/status<i class="fas fa-external-link-alt"></i></a>。同时因为cPolar如果固定ip是付费的，而免费的在24h内会更改ip地址，所以当ip改变时候我们需要通过后台查看新地址。官网会自动为我们配置两个通过一个是ssh一个是websit。我们通过ssh则可访问服务器了。 同时也可用通过服务器后台管理cpolar。例如我的ip为10.23.85.245,通过官方确认的端口号为9200。则可通过10.23.85.245:9200访问后台。可增加新的隧道。</p></li>
</ol>
]]></content>
      <categories>
        <category>内网穿透</category>
      </categories>
      <tags>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>气象论文</title>
    <url>/2023/06/27/MeteorologicalPapers/</url>
    <content><![CDATA[<table style="width:71%;">
<colgroup>
<col style="width: 6%">
<col style="width: 12%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
</colgroup>
<thead>
<tr class="header">
<th>方向</th>
<th>论文名称</th>
<th>年份</th>
<th>期刊</th>
<th>期刊级别</th>
<th>应用领域</th>
<th>摘要描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>海洋大气数字孪生</td>
<td>Using a Digital Twin to Study the Influence of Climatic Changes on High Ozone Levels in Bulgaria and Europe</td>
<td>2022</td>
<td>ATMOSPHERE</td>
<td>中科院3区</td>
<td>环境科学；气象与大气科学</td>
<td>通过应用DIGITAL AIR（一个数字孪生工具）成功地处理和解决非常复杂的环境中产生的许多复杂问题</td>
</tr>
<tr class="even">
<td></td>
<td>Digital Twin of Atmospheric Environment: Sensory Data Fusion for High-Resolution PM2.5 Estimation and Action Policies Recommendation</td>
<td>2023</td>
<td>IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC</td>
<td>中科院2区</td>
<td>计算机科学，信息系统；工程，电器和电子；电信</td>
<td>应用数字孪生来监测PM2.5</td>
</tr>
<tr class="odd">
<td></td>
<td>Management of Climate Resilience: Exploring the Potential of Digital Twin Technology, 3D City Modelling, and Early Warning Systems</td>
<td>2023</td>
<td>SENSORS</td>
<td>中科院2区</td>
<td>化学分析；工程，电器和电子；仪器仪表</td>
<td>系统回顾了3D城市建模、预警系统和数字孪生在通过有效管理智慧城市建立气候适应能力的技术创造中的重要性、潜力和未来方向</td>
</tr>
<tr class="even">
<td></td>
<td>Digital Twins for Managing Railway Bridge Maintenance, Resilience, and Climate Change Adaptation</td>
<td>2023</td>
<td>SENSORS</td>
<td>中科院2区</td>
<td>化学分析；工程，电器和电子；仪器仪表</td>
<td>利用BIM（建筑信息模型）集成开发了一种创新的DT（数字孪生）。澳大利亚Minnamurra铁路桥(MRB)被选为实际用例，以展示BIM(即DT)的扩展应用。此外，通过集成BIM, DT已被用于确定温室气体排放和成本消耗</td>
</tr>
<tr class="odd">
<td></td>
<td>A New Digital Twin for Climate Change Adaptation, Water Management, and Disaster Risk Reduction (HIP Digital Twin)</td>
<td>2023</td>
<td>WATER</td>
<td>中科院2区/3区</td>
<td>水资源/环境科学</td>
<td>分析了被视为“数字双胞胎”的国家dk模型水文信息和预测(HIP)系统和HIP门户，并讨论了利用“外接式数字孪生”为地方流域进一步发展HIP数字孪生的挑战和潜力，包括对国家层面的反馈</td>
</tr>
<tr class="even">
<td></td>
<td>Amplitude and Phase Computable Ocean Wave Real-Time Modeling with GPU Acceleration</td>
<td>2022</td>
<td>MARINE SCIENCE AND ENGINEERING</td>
<td>中科院1区/2区</td>
<td>海洋</td>
<td>提出了一种基于小波变换的混合海洋建模方法实现了详细的海面和相干相位相关的波浪效应。完全能够满足CBATS的实时仿真训练要求。因此，它可以在提高视觉系统的性能方面发挥重要作用</td>
</tr>
<tr class="odd">
<td></td>
<td>A high resolution coupled ocean-atmosphere simulation of the regional climate over Central America</td>
<td>2022</td>
<td>CLIMATE DYNAMICS</td>
<td>中科院2区</td>
<td>气象学、海洋</td>
<td>这项研究分析了中美洲上空配置的相对高分辨率（15公里网格间距）区域海洋-大气耦合模拟。利用区域光谱模式-区域海洋模式系统（RSM-RMS）进行了为期25年（1986-2010）的全球大气和海洋再分析模拟</td>
</tr>
<tr class="even">
<td></td>
<td>Real-time in situ prediction of ocean currents</td>
<td>2021</td>
<td>OCEAN ENGINEERING</td>
<td>JCR1区</td>
<td>深度学习的海洋洋流预测</td>
<td>我们在本文中提出了两种使用深度学习技术的预测工具，一种是长短期记忆（LSTM）递归神经网络，另一种是Transformer，用于对任何位置的洋流进行实时原位预测</td>
</tr>
<tr class="odd">
<td></td>
<td>Improving Coastal Ocean Wave Height Forecasting during Typhoons by using Local Meteorological and Neighboring Wave Data in Support Vector Regression Models</td>
<td>2020</td>
<td>MARINE SCIENCE AND ENGINEERING</td>
<td>JCR1区</td>
<td>台湾地区台风期间海洋波高观察</td>
<td>本研究旨在应用支持向量回归进行台风波高的实时预测，提前时间为1至3小时。台湾东北沿海的两个乘浪浮标为研究提供了实时观测波浪和气象数据</td>
</tr>
<tr class="even">
<td></td>
<td>Representing the function and sensitivity of coastal interfaces in Earth system models</td>
<td>2020</td>
<td>NATURE</td>
<td>中科院1区</td>
<td>海岸科学</td>
<td>我们评估了现有的沿海监测网络和区域模型，以及这些工作中存在的挑战，并建议制定一条更有力地反映沿海界面的全球模型的道路，将海岸界面纳入预测模型</td>
</tr>
<tr class="odd">
<td></td>
<td>Using Machine Learning at scale in numerical simulations with SmartSim: An application to ocean climate modeling</td>
<td>2022</td>
<td>COMPUTATIONAL SCIENCE</td>
<td>JCR1区</td>
<td>机器学习的海洋气候建模</td>
<td>示了通过使用SmartSim的深度神经网络（DNN）的分布式在线推理改进的第一个气候尺度的海洋数值模拟。通过使用SmartSim运行一个由12名成员组成的全球规模、高分辨率海洋模拟集合来展示SmartSim的能力</td>
</tr>
</tbody>
</table>
<ul>
<li>气象数据可视化
<ul>
<li>作者：未知</li>
<li>出版年份：2022</li>
<li>期刊：COMPUTERS &amp; GRAPHICS-UK</li>
<li>影响因子：中科院3区</li>
<li>关键词：可视化技术</li>
<li>摘要：在本文中，我们改进了一种用于大型时间序列比较的可视化技术。</li>
</ul></li>
<li>A Brief Review on 4D Weather Visualization
<ul>
<li>作者：未知</li>
<li>出版年份：2022</li>
<li>期刊：SUSTAINABILITY</li>
<li>影响因子：中科院2区</li>
<li>关键词：综述</li>
<li>摘要：基于对工具和方法的调查，我们考虑了存在表示气象数据和方法的不同方式。但是，获取知识并创建可视化天气数据的方式势在必行。本文找到了 4 个现有的 &lt;&gt;D 气象可视化和气象现象解决方案。</li>
</ul></li>
<li>Predictions of national-scale river temperatures: A visualisation of complex space-time dynamics
<ul>
<li>作者：未知</li>
<li>出版年份：2020</li>
<li>期刊：HYDROLOGICAL PROCESSES</li>
<li>影响因子：中科院3区</li>
<li>关键词：全国河流温度预测 复杂时空动力学的可视化</li>
<li>摘要：有效环境数据可视化和科学传播提供了增加在决策过程中采用创新的科学工具。</li>
</ul></li>
<li>A climate service for ecologists: sharing pre-processed EURO-CORDEX regional climate scenario data using the eLTER Information System
<ul>
<li>作者：未知</li>
<li>出版年份：2021</li>
<li>期刊：EARTH SYSTEM SCIENCE DATA(ESSD)</li>
<li>影响因子：中科院1区</li>
<li>关键词：预处理的EURO-CORDEX区域气候情景数据</li>
<li>摘要：介绍了eLTER信息系统基础设施如何具有通过气候服务数据产品进行了扩展，提供对专门预处理的区域气候变化情景数据，这些数据来自协调区域最先进的区域气候模型集合702个注册生态的降尺度实验（CORDEX）欧洲各地的研究基地。</li>
</ul></li>
<li>Integration of Remote Sensing Data into a Composite Voxel Model for Environmental Performance Analysis of Terraced Vineyards in Tuscany, Italy
<ul>
<li>作者：未知</li>
<li>出版年份：2022</li>
<li>期刊：International Journal of Remote Sensing</li>
<li>影响因子：中科院2区</li>
<li>关键词：将遥感数据集成到复合体素模型中，用于意大利托斯卡纳梯田葡萄园的环境绩效分析</li>
<li>摘要：使用遥感、地理空间分析和模拟技术获取的数据集往往受到狭窄学科边界的限制，因此无法实现跨多个领域和规模的整体方法。在这项工作中，我们展示了一种跨学科数据采集和集成的新工作流程，重点关注意大利托斯卡纳的梯田葡萄园。我们使用多模态数据采集，并通过体素化点云（我们称之为复合体素模型）执行数据集成。后者有助于采用多领域和多尺度数据综合方法，以推进土地知识的发现和恢复。这种方法可以在单个数据结构中集成、关联和分析与不同领域和规模相关的数据。</li>
</ul></li>
<li>Climate: An R Package to Access Free In-Situ Meteorological and Hydrological Datasets For Environmental Assessment
<ul>
<li>作者：未知</li>
<li>出版年份：2020</li>
<li>期刊：SUSTAINABILITY</li>
<li>影响因子：中科院3区</li>
<li>关键词：气候：用于访问用于环境评估的免费原位气象和水文数据集的R包</li>
<li>摘要：软件包中包含的自动化程序允许人们以用户定义的时间分辨率（从每小时到每年）、用户定义的时间跨度以及指定的台站或国家组下载数据。该软件包还包含元数据，包括可用台站的列表、其地理空间信息以及带有单位的测量描述。最后，获得的数据集可以在R中进行处理或导出到外部工具（例如，电子表格或GIS软件）。</li>
</ul></li>
<li>&quot;The R Language as a Tool for Biometeorological Research&quot;
<ul>
<li>作者：未知</li>
<li>出版年份：2020</li>
<li>期刊：未知</li>
<li>影响因子：中科院3区</li>
<li>关键词：R语言作为生物气象学研究的工具</li>
<li>摘要：简要介绍了一组有用且受欢迎的生物气象研究软件包，以及在R基础上进一步开展科学合作的路线图。本文可以作为生物气象学家对R语言世界的简短介绍性指南。</li>
</ul></li>
<li>&quot;Consistency of Satellite Climate Data Records for Earth System Monitoring&quot;
<ul>
<li>作者：未知</li>
<li>出版年份：2020</li>
<li>期刊：Bulletin of the American Meteorological Society</li>
<li>影响因子：中科院1区</li>
<li>关键词：用于地球系统监测的卫星气候数据记录的一致性</li>
<li>摘要：总结了CCI为确保技术层面的一致性而采取的措施，并根据基本的物理知识提出了评估检索和科学层面一致性的概念。最后，本研究介绍了CCI CDR之间一致性的现状以及进一步改进CCI CDR所需的未来努力</li>
</ul></li>
<li>A Spatio-Temporal Visualization Approach of PM10 Concentration Data in Metropolitan Lima
<ul>
<li>作者：未知</li>
<li>出版年份：2021</li>
<li>期刊：atmosphere</li>
<li>影响因子：中科院3区</li>
<li>关键词：PM的时空可视化方法10利马大都市的浓度数据</li>
<li>摘要：&quot;所提出的方法公开了一系列步骤，用于根据其相关性制定具有越来越具体时间段的图表，并进行统计分析，例如动态时间相关性，从而可以获得PM时空变化的详细可视化10浓度。此外，得出的结论是，气象变量并不表明与PM有关的因果关系10水平，而是颗粒物质的浓度与每个地区的城市特征有关。&quot;</li>
</ul></li>
<li>Digital Twin and Cloud BIM-XR Platform Development: From Scan-to-BIM-to-DT Process to a 4D Multi-User Live App to Improve Building Comfort, Efficiency and Costs
<ul>
<li>作者：未知</li>
<li>出版年份：2022</li>
<li>期刊：energies</li>
<li>影响因子：中科院3区</li>
<li>关键词：从扫描到 BIM 再到 DT 流程到 4D 多用户实时应用程序，以提高建筑舒适度、效率和成本</li>
<li>摘要：实时应用程序的开发显示了不同类型的用户（专业人士和非专家）如何与DT进行交互，以了解环境设计的特征以及环境参数，从提高舒适度，使用，成本，行为的角度来看，提高他们的控制程度，和良好做法。最后，通过一个真实的案例研究验证了整体方法，其中BIM-XR平台是为现有建筑的能源改进和外墙翻新而构建的</li>
</ul></li>
<li>Future Swedish 3D City Models—Specifications, Test Data, and Evaluation
<ul>
<li>作者：未知</li>
<li>出版年份：2023</li>
<li>期刊：International Journal of Geo-Information</li>
<li>影响因子：中科院3区</li>
<li>关键词：瑞典 3D 城市模型 - 规格、测试数据和评估</li>
<li>摘要：这些数据在多个地理信息应用领域具有巨大的潜力。我们通过利用ODbL许可证在一个具有多个平台支持的开放数据平台上分发3D城市模型来介绍未来瑞典3D城市模型的详细规格，并提供了供大众使用和评估的测试数据集。通过提供模型和数据的规范，我们为城市建模和规划社区提供了可行的资源，并为市政府、研究人员和创新团队提供了机会，改善基础设施的设计和管理</li>
</ul></li>
</ul>
<table style="width:71%;">
<colgroup>
<col style="width: 6%">
<col style="width: 12%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
</colgroup>
<thead>
<tr class="header">
<th>方向</th>
<th>论文名称</th>
<th>年份</th>
<th>期刊</th>
<th>期刊级别</th>
<th>应用领域</th>
<th>摘要描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>VRAR天气预报</td>
<td>Development of three-dimensional visualisation technology of the aerodynamic environment in a greenhouse using CFD and VR technology, part 1: Development of VR a database using CFD</td>
<td>2021</td>
<td>BIOSYSTEMS ENGINEERING</td>
<td>Q1/Q2</td>
<td>JCR</td>
<td>使用 CFD 和 VR 技术开发温室空气动力环境三维可视化技术，第 1 部分：使用 CFD 开发 VR 数据库</td>
</tr>
<tr class="even">
<td></td>
<td>Required sampling density of ground-based soil moisture and brightness temperature observations for calibration and validation of L-band satellite observations based on a virtual reality</td>
<td>2020</td>
<td>HYDROLOGY AND EARTH SYSTEM SCIENCES</td>
<td>Q1</td>
<td>JCR</td>
<td>基于虚拟现实的 L 波段卫星观测校准和验证所需的地基土壤水分和亮温观测采样密度</td>
</tr>
<tr class="odd">
<td></td>
<td>Walking through the forests of the future: using data-driven virtual reality to visualize forests under climate change</td>
<td>2021</td>
<td>INTERNATIONAL JOURNAL OF GEOGRAPHICAL INFORMATION SCIENCE</td>
<td>Q1</td>
<td>JCR</td>
<td>穿越未来的森林：使用数据驱动的虚拟现实可视化气候变化下的森林</td>
</tr>
<tr class="even">
<td></td>
<td>Seeing Climate Change: A Framework for Understanding Visualizations for Climate Adaptation</td>
<td>2020</td>
<td>ISPRS INTERNATIONAL JOURNAL OF GEO-INFORMATION</td>
<td>Q2/Q3</td>
<td>JCR</td>
<td>观察气候变化：理解气候适应可视化的框架</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>气象论文</category>
      </categories>
      <tags>
        <tag>气象论文</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习课程竞赛心得</title>
    <url>/2023/06/27/MachineLearningCourseCompetition/</url>
    <content><![CDATA[<h3 id="前言">前言</h3>
<p>课程竞赛 狗狗分类（20分类任务） 狗狗分类（20分类任务） - 第一阶段：4月19日 至 4月30日（2周，占25%） 模型训练、主干网络、调参与调优tricks等基础知识 - 第二阶段：5月1日 至 5月14日（2周，占20%） 数据增强、图像编辑、调参与调优tricks等 - 第三阶段：5月15日 至 5月28日（2周，占20%） 网络攻防、数据增强等 提交验证地址：http://cuit.osmagic.com:8888 学号登录，初始密码“123” 期末提交测试代码及模型（占5%），供结果验证 按阶段准确率高低计分，最高者100分，最低者40分</p>
<h3 id="心得">心得</h3>
在第一阶段和第二阶段中我们使用的是Resnet，将epch和leaning rate更改了就提交代码了。在第三阶段在读论文时候发现了新模型Visual Attention Network(VAN)它是22年cvpr发表的。该模型在图像分类、物体检测、语义分割、实例分割、姿势估计等任务都取得了不错的成绩。其中的VAN-B6在ImageNet基准测试中取得了87.8%的准确率，并为全景分割创造了新的最先进的性能（58.PQ）。此外，VAN-B2在ADE20K基准上的语义分割超过Swin-T 4% mIoU（50.1 vs. 46.1），在COCO数据集上的物体检测超过2.6% AP（48.8 vs. 46.2）。因此决定使用该模型在第三阶段测试性能。
<div data-align="center">
<p><img src="/2023/06/27/MachineLearningCourseCompetition/1.jpg" width="400"> <img src="/2023/06/27/MachineLearningCourseCompetition/2.jpg" width="400"></p>
</div>
在训练中发现，所提供的数据集较少，在经过几个epch的训练后训练集的Acc指标可以达到100%且不波动，然而在提交后发现指标却非常低。因此出现了非常严重的过拟合现象。而VAN提供在ImageNet1k上训练的权重，所以我们加载训练权重后训练提交所得到的大概在92%。因VAN提供了多个版本可供选择，我使用了B0-B3发现在使用B3时候达到了94%，证明该model在数据集上参数量越大所取得的效果越好。但遗憾的是作者只提供了B0-B3在ImageNet1k上训练的权重。学生有使用B6在老师提供的数据集上训练3k轮所取得的效果非常糟糕。如果使用B6的权重训练应该会取得不错的成果。
<div data-align="center">
<p><img src="/2023/06/27/MachineLearningCourseCompetition/3.jpg" width="900"></p>
</div>
<p>模型选择完毕就是炼丹了。因数据集小炼丹相对容易。因数据集较小，为了扩充数据集，减少过拟合，添加了数据增强中的随机水平翻转和随机选择以及随机颜色调整。又因为考虑到训练集很快就过拟合了，因此降低了学习率为1e-5。最后在第三轮取得了96.64%。</p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>OperatorOverloading</title>
    <url>/2023/09/19/OperatorOverloading/</url>
    <content><![CDATA[<h4 id="运算符重载">运算符重载</h4>
<p>作用： 通过重载递增运算符，实现自己的整型数据</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyInteger</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">MyInteger</span>() &#123;</span><br><span class="line">		m_Num = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//前置++</span></span><br><span class="line">	MyInteger&amp; <span class="keyword">operator</span>++() &#123;</span><br><span class="line">		<span class="comment">//先++</span></span><br><span class="line">		m_Num++;</span><br><span class="line">		<span class="comment">//再返回</span></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//后置++</span></span><br><span class="line">	MyInteger <span class="keyword">operator</span>++(<span class="type">int</span>) &#123;</span><br><span class="line">		<span class="comment">//先返回</span></span><br><span class="line">		MyInteger temp = *<span class="keyword">this</span>; <span class="comment">//记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；</span></span><br><span class="line">		m_Num++;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> m_Num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint) &#123;</span><br><span class="line">	out &lt;&lt; myint.m_Num;</span><br><span class="line">	<span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//前置++ 先++ 再返回</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	MyInteger myInt;</span><br><span class="line">	cout &lt;&lt; ++myInt &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后置++ 先返回 再++</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	MyInteger myInt;</span><br><span class="line">	cout &lt;&lt; myInt++ &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="comment">//test02();</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结： 前置递增返回引用，后置递增返回值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>() &#123;&#125;</span><br><span class="line">	<span class="built_in">Person</span>(<span class="type">int</span> age, string name) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">		<span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Person</span>() &#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> Person&amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		os &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; p.name &lt;&lt; <span class="string">&quot; 年纪: &quot;</span> &lt;&lt; p.age &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> os;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	string name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++语言</category>
      </categories>
      <tags>
        <tag>C++语言基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/09/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link" href="https://hexo.io/">Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link" href="https://hexo.io/docs/">documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link" href="https://github.com/hexojs/hexo/issues">GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a class="link" href="https://hexo.io/docs/writing.html">Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a class="link" href="https://hexo.io/docs/server.html">Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a class="link" href="https://hexo.io/docs/generating.html">Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a class="link" href="https://hexo.io/docs/one-command-deployment.html">Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo命令</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言 线程池</title>
    <url>/2024/04/08/ThreadPool/</url>
    <content><![CDATA[<h2 id="线程池原理">线程池原理</h2>
<p>我们使用线程的时候就去创建一个线程，这样实现起来非常简便，但是就会有一个问题：如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。</p>
<p>那么有没有一种办法使得线程可以复用，就是执行完一个任务，并不被销毁，而是可以继续执行其他的任务呢？</p>
<p>线程池是一种多线程处理形式，处理过程中将任务添加到队列，然后在创建线程后自动启动这些任务。线程池线程都是后台线程。每个线程都使用默认的堆栈大小，以默认的优先级运行，并处于多线程单元中。如果某个线程在托管代码中空闲（如正在等待某个事件）,则线程池将插入另一个辅助线程来使所有处理器保持繁忙。如果所有线程池线程都始终保持繁忙，但队列中包含挂起的工作，则线程池将在一段时间后创建另一个辅助线程但线程的数目永远不会超过最大值。超过最大值的线程可以排队，但他们要等到其他线程完成后才启动。</p>
<p>在各个编程语言的语种中都有线程池的概念，并且很多语言中直接提供了线程池，作为程序猿直接使用就可以了，下面给大家介绍一下线程池的实现原理：</p>
<p>线程池的组成主要分为3个部分，这三部分配合工作就可以得到一个完整的线程池：</p>
<ol type="1">
<li>任务队列，存储需要处理的任务，由工作的线程来处理这些任务
<ul>
<li>通过线程池提供的API函数，将一个待处理的任务添加到任务队列，或者从任务队列中删除</li>
<li>已处理的任务会被从任务队列中删除</li>
<li>线程池的使用者，也就是调用线程池函数往任务队列中添加任务的线程就是生产者线程</li>
</ul></li>
<li>工作的线程（任务队列任务的消费者） ，N个
<ul>
<li><p>线程池中维护了一定数量的工作线程, 他们的作用是是不停的读任务队列, 从里边取出任务并处理</p></li>
<li><p>工作的线程相当于是任务队列的消费者角色，</p></li>
<li><p>如果任务队列为空, 工作的线程将会被阻塞 (使用条件变量/信号量阻塞)</p></li>
<li><p>如果阻塞之后有了新的任务, 由生产者将阻塞解除, 工作线程开始工作</p></li>
<li><ol start="3" type="1">
<li>管理者线程（不处理任务队列中的任务），1个</li>
</ol></li>
<li><p>它的任务是周期性的对任务队列中的任务数量以及处于忙状态的工作线程个数进行检测</p></li>
<li><p>当任务过多的时候, 可以适当的创建一些新的工作线程</p></li>
<li><p>当任务过少的时候, 可以适当的销毁一些工作的线程</p></li>
</ul></li>
</ol>
<p><img src="/ThreadPool/1.png"></p>
<h2 id="任务队列">任务队列</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 任务结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Task</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">void</span> (*function)(<span class="type">void</span>* arg);</span><br><span class="line">    <span class="type">void</span>* arg;</span><br><span class="line">}Task;</span><br></pre></td></tr></table></figure>
<h2 id="线程池定义">线程池定义</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 线程池结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ThreadPool</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="comment">// 任务队列</span></span><br><span class="line">    Task* taskQ;</span><br><span class="line">    <span class="type">int</span> queueCapacity;  <span class="comment">// 容量</span></span><br><span class="line">    <span class="type">int</span> queueSize;      <span class="comment">// 当前任务个数</span></span><br><span class="line">    <span class="type">int</span> queueFront;     <span class="comment">// 队头 -&gt; 取数据</span></span><br><span class="line">    <span class="type">int</span> queueRear;      <span class="comment">// 队尾 -&gt; 放数据</span></span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> managerID;    <span class="comment">// 管理者线程ID</span></span><br><span class="line">    <span class="type">pthread_t</span> *threadIDs;   <span class="comment">// 工作的线程ID</span></span><br><span class="line">    <span class="type">int</span> minNum;             <span class="comment">// 最小线程数量</span></span><br><span class="line">    <span class="type">int</span> maxNum;             <span class="comment">// 最大线程数量</span></span><br><span class="line">    <span class="type">int</span> busyNum;            <span class="comment">// 忙的线程的个数</span></span><br><span class="line">    <span class="type">int</span> liveNum;            <span class="comment">// 存活的线程的个数</span></span><br><span class="line">    <span class="type">int</span> exitNum;            <span class="comment">// 要销毁的线程个数</span></span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutexPool;  <span class="comment">// 锁整个的线程池</span></span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutexBusy;  <span class="comment">// 锁busyNum变量</span></span><br><span class="line">    <span class="type">pthread_cond_t</span> notFull;     <span class="comment">// 任务队列是不是满了</span></span><br><span class="line">    <span class="type">pthread_cond_t</span> notEmpty;    <span class="comment">// 任务队列是不是空了</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> shutdown;           <span class="comment">// 是不是要销毁线程池, 销毁为1, 不销毁为0</span></span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h2 id="threadpool头文件">ThreadPool头文件</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ge on 24-4-7.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> THREADPOOL_THREADPOOL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THREADPOOL_THREADPOOL_H</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUMBER 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ThreadPool</span> <span class="title">ThreadPool</span>;</span></span><br><span class="line"><span class="comment">// 创建线程池并初始化</span></span><br><span class="line">ThreadPool *<span class="title function_">threadPoolCreate</span><span class="params">(<span class="type">int</span> min, <span class="type">int</span> max, <span class="type">int</span> queueSize)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁线程池</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">threadPoolDestroy</span><span class="params">(ThreadPool* pool)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给线程池添加任务</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">threadPoolAdd</span><span class="params">(ThreadPool* pool, <span class="type">void</span>(*func)(<span class="type">void</span>*), <span class="type">void</span>* arg)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取线程池中工作的线程的个数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">threadPoolBusyNum</span><span class="params">(ThreadPool* pool)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取线程池中活着的线程的个数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">threadPoolAliveNum</span><span class="params">(ThreadPool* pool)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////</span></span><br><span class="line"><span class="comment">// 工作的线程(消费者线程)任务函数</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">worker</span><span class="params">(<span class="type">void</span>* arg)</span>;</span><br><span class="line"><span class="comment">// 管理者线程任务函数</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">manager</span><span class="params">(<span class="type">void</span>* arg)</span>;</span><br><span class="line"><span class="comment">// 单个线程退出</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">threadExit</span><span class="params">(ThreadPool* pool)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 任务结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Task</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">void</span> (*function)(<span class="type">void</span>* arg);</span><br><span class="line">    <span class="type">void</span>* arg;</span><br><span class="line">}Task;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程池结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ThreadPool</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="comment">// 任务队列</span></span><br><span class="line">    Task* taskQ;</span><br><span class="line">    <span class="type">int</span> queueCapacity;  <span class="comment">// 容量</span></span><br><span class="line">    <span class="type">int</span> queueSize;      <span class="comment">// 当前任务个数</span></span><br><span class="line">    <span class="type">int</span> queueFront;     <span class="comment">// 队头 -&gt; 取数据</span></span><br><span class="line">    <span class="type">int</span> queueRear;      <span class="comment">// 队尾 -&gt; 放数据</span></span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> managerID;    <span class="comment">// 管理者线程ID</span></span><br><span class="line">    <span class="type">pthread_t</span> *threadIDs;   <span class="comment">// 工作的线程ID</span></span><br><span class="line">    <span class="type">int</span> minNum;             <span class="comment">// 最小线程数量</span></span><br><span class="line">    <span class="type">int</span> maxNum;             <span class="comment">// 最大线程数量</span></span><br><span class="line">    <span class="type">int</span> busyNum;            <span class="comment">// 忙的线程的个数</span></span><br><span class="line">    <span class="type">int</span> liveNum;            <span class="comment">// 存活的线程的个数</span></span><br><span class="line">    <span class="type">int</span> exitNum;            <span class="comment">// 要销毁的线程个数</span></span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutexPool;  <span class="comment">// 锁整个的线程池</span></span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutexBusy;  <span class="comment">// 锁busyNum变量</span></span><br><span class="line">    <span class="type">pthread_cond_t</span> notFull;     <span class="comment">// 任务队列是不是满了</span></span><br><span class="line">    <span class="type">pthread_cond_t</span> notEmpty;    <span class="comment">// 任务队列是不是空了</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> shutdown;           <span class="comment">// 是不是要销毁线程池, 销毁为1, 不销毁为0</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//THREADPOOL_THREADPOOL_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="源文件threadpool">源文件ThreadPool</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ge on 24-4-7.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"ThreadPool.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"stdlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"pthread.h"</span></span></span><br><span class="line">ThreadPool* <span class="title function_">threadPoolCreate</span><span class="params">(<span class="type">int</span> min, <span class="type">int</span> max, <span class="type">int</span> queueSize)</span></span><br><span class="line">{</span><br><span class="line">    ThreadPool* pool = (ThreadPool*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ThreadPool));</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (pool == <span class="literal">NULL</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"malloc threadpool fail...\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        pool-&gt;threadIDs = (<span class="type">pthread_t</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">pthread_t</span>) * max);</span><br><span class="line">        <span class="keyword">if</span> (pool-&gt;threadIDs == <span class="literal">NULL</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"malloc threadIDs fail...\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">memset</span>(pool-&gt;threadIDs, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">pthread_t</span>) * max);</span><br><span class="line">        pool-&gt;minNum = min;</span><br><span class="line">        pool-&gt;maxNum = max;</span><br><span class="line">        pool-&gt;busyNum = <span class="number">0</span>;</span><br><span class="line">        pool-&gt;liveNum = min;    <span class="comment">// 和最小个数相等</span></span><br><span class="line">        pool-&gt;exitNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pthread_mutex_init(&amp;pool-&gt;mutexPool, <span class="literal">NULL</span>) != <span class="number">0</span> ||</span><br><span class="line">            pthread_mutex_init(&amp;pool-&gt;mutexBusy, <span class="literal">NULL</span>) != <span class="number">0</span> ||</span><br><span class="line">            pthread_cond_init(&amp;pool-&gt;notEmpty, <span class="literal">NULL</span>) != <span class="number">0</span> ||</span><br><span class="line">            pthread_cond_init(&amp;pool-&gt;notFull, <span class="literal">NULL</span>) != <span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"mutex or condition init fail...\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 任务队列</span></span><br><span class="line">        pool-&gt;taskQ = (Task*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Task) * queueSize);</span><br><span class="line">        pool-&gt;queueCapacity = queueSize;</span><br><span class="line">        pool-&gt;queueSize = <span class="number">0</span>;</span><br><span class="line">        pool-&gt;queueFront = <span class="number">0</span>;</span><br><span class="line">        pool-&gt;queueRear = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        pool-&gt;shutdown = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程</span></span><br><span class="line">        pthread_create(&amp;pool-&gt;managerID, <span class="literal">NULL</span>, manager, pool);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; min; ++i)</span><br><span class="line">        {</span><br><span class="line">            pthread_create(&amp;pool-&gt;threadIDs[i], <span class="literal">NULL</span>, worker, pool);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> pool;</span><br><span class="line">    } <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    <span class="keyword">if</span> (pool &amp;&amp; pool-&gt;threadIDs) <span class="built_in">free</span>(pool-&gt;threadIDs);</span><br><span class="line">    <span class="keyword">if</span> (pool &amp;&amp; pool-&gt;taskQ) <span class="built_in">free</span>(pool-&gt;taskQ);</span><br><span class="line">    <span class="keyword">if</span> (pool) <span class="built_in">free</span>(pool);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">threadPoolDestroy</span><span class="params">(ThreadPool* pool)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (pool == <span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭线程池</span></span><br><span class="line">    pool-&gt;shutdown = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 阻塞回收管理者线程</span></span><br><span class="line">    pthread_join(pool-&gt;managerID, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 唤醒阻塞的消费者线程</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pool-&gt;liveNum; ++i)</span><br><span class="line">    {</span><br><span class="line">        pthread_cond_signal(&amp;pool-&gt;notEmpty);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 释放堆内存</span></span><br><span class="line">    <span class="keyword">if</span> (pool-&gt;taskQ)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">free</span>(pool-&gt;taskQ);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (pool-&gt;threadIDs)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">free</span>(pool-&gt;threadIDs);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    pthread_mutex_destroy(&amp;pool-&gt;mutexPool);</span><br><span class="line">    pthread_mutex_destroy(&amp;pool-&gt;mutexBusy);</span><br><span class="line">    pthread_cond_destroy(&amp;pool-&gt;notEmpty);</span><br><span class="line">    pthread_cond_destroy(&amp;pool-&gt;notFull);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(pool);</span><br><span class="line">    pool = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">threadPoolAdd</span><span class="params">(ThreadPool* pool, <span class="type">void</span>(*func)(<span class="type">void</span>*), <span class="type">void</span>* arg)</span></span><br><span class="line">{</span><br><span class="line">    pthread_mutex_lock(&amp;pool-&gt;mutexPool);</span><br><span class="line">    <span class="comment">// 必须是循环，不然被cond_signal唤醒后，没有进行判断任务队列是否为满就继续添加，以防止内存溢出</span></span><br><span class="line">    <span class="keyword">while</span> (pool-&gt;queueSize == pool-&gt;queueCapacity &amp;&amp; !pool-&gt;shutdown)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 任务队列已满，阻塞生产者线程, 等工人完成任务再添加</span></span><br><span class="line">        pthread_cond_wait(&amp;pool-&gt;notFull, &amp;pool-&gt;mutexPool);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (pool-&gt;shutdown)</span><br><span class="line">    {</span><br><span class="line">        pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 添加任务</span></span><br><span class="line">    pool-&gt;taskQ[pool-&gt;queueRear].function = func;</span><br><span class="line">    pool-&gt;taskQ[pool-&gt;queueRear].arg = arg;</span><br><span class="line">    pool-&gt;queueRear = (pool-&gt;queueRear + <span class="number">1</span>) % pool-&gt;queueCapacity;</span><br><span class="line">    pool-&gt;queueSize++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此时任务队列已有任务，唤醒工人工作</span></span><br><span class="line">    pthread_cond_signal(&amp;pool-&gt;notEmpty);</span><br><span class="line">    pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">threadPoolBusyNum</span><span class="params">(ThreadPool* pool)</span></span><br><span class="line">{</span><br><span class="line">    pthread_mutex_lock(&amp;pool-&gt;mutexBusy);</span><br><span class="line">    <span class="type">int</span> busyNum = pool-&gt;busyNum;</span><br><span class="line">    pthread_mutex_unlock(&amp;pool-&gt;mutexBusy);</span><br><span class="line">    <span class="keyword">return</span> busyNum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">threadPoolAliveNum</span><span class="params">(ThreadPool* pool)</span></span><br><span class="line">{</span><br><span class="line">    pthread_mutex_lock(&amp;pool-&gt;mutexPool);</span><br><span class="line">    <span class="type">int</span> aliveNum = pool-&gt;liveNum;</span><br><span class="line">    pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line">    <span class="keyword">return</span> aliveNum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">worker</span><span class="params">(<span class="type">void</span>* arg)</span></span><br><span class="line">{</span><br><span class="line">    ThreadPool* pool = (ThreadPool*)arg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 抢锁</span></span><br><span class="line">        pthread_mutex_lock(&amp;pool-&gt;mutexPool);</span><br><span class="line">        <span class="comment">// 当前任务队列是否为空，此时也必须是循环，判断任务队列是否为空</span></span><br><span class="line">        <span class="keyword">while</span> (pool-&gt;queueSize == <span class="number">0</span> &amp;&amp; !pool-&gt;shutdown)</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// 阻塞工作线程，等待任务队列添加任务，等待被唤醒</span></span><br><span class="line">            pthread_cond_wait(&amp;pool-&gt;notEmpty, &amp;pool-&gt;mutexPool);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断是不是要销毁线程，自毁程序。。。。。</span></span><br><span class="line">            <span class="keyword">if</span> (pool-&gt;exitNum &gt; <span class="number">0</span>)</span><br><span class="line">            {</span><br><span class="line">                pool-&gt;exitNum--;</span><br><span class="line">                <span class="keyword">if</span> (pool-&gt;liveNum &gt; pool-&gt;minNum)</span><br><span class="line">                {</span><br><span class="line">                    <span class="comment">// 存活线程减少，并且解锁！！ 最后自毁</span></span><br><span class="line">                    pool-&gt;liveNum--;</span><br><span class="line">                    pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line">                    threadExit(pool);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断线程池是否被关闭了  记得解锁</span></span><br><span class="line">        <span class="keyword">if</span> (pool-&gt;shutdown)</span><br><span class="line">        {</span><br><span class="line">            pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line">            threadExit(pool);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从任务队列中取出一个任务</span></span><br><span class="line">        Task task;</span><br><span class="line">        task.function = pool-&gt;taskQ[pool-&gt;queueFront].function;</span><br><span class="line">        task.arg = pool-&gt;taskQ[pool-&gt;queueFront].arg;</span><br><span class="line">        <span class="comment">// 移动头结点</span></span><br><span class="line">        pool-&gt;queueFront = (pool-&gt;queueFront + <span class="number">1</span>) % pool-&gt;queueCapacity;</span><br><span class="line">        pool-&gt;queueSize--;</span><br><span class="line">        <span class="comment">// 解整个线程池的锁 此时已经获取了一个任务，便可以唤醒添加任务队列的进程。</span></span><br><span class="line">        pthread_cond_signal(&amp;pool-&gt;notFull);</span><br><span class="line">        pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 抢Busy锁，这里只有在对busyNum数进行内容改变才会锁。在运行任务的时刻是不用锁的，这样提升了运行效率</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"thread %ld start working...\n"</span>, pthread_self());</span><br><span class="line">        pthread_mutex_lock(&amp;pool-&gt;mutexBusy);</span><br><span class="line">        pool-&gt;busyNum++;</span><br><span class="line">        pthread_mutex_unlock(&amp;pool-&gt;mutexBusy);</span><br><span class="line">        task.function(task.arg);</span><br><span class="line">        <span class="comment">// 记得将堆内存释放</span></span><br><span class="line">        <span class="built_in">free</span>(task.arg);</span><br><span class="line">        task.arg = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"thread %ld end working...\n"</span>, pthread_self());</span><br><span class="line">        pthread_mutex_lock(&amp;pool-&gt;mutexBusy);</span><br><span class="line">        pool-&gt;busyNum--;</span><br><span class="line">        pthread_mutex_unlock(&amp;pool-&gt;mutexBusy);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 管理线程主要决定 是否 增删线程</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">manager</span><span class="params">(<span class="type">void</span>* arg)</span></span><br><span class="line">{</span><br><span class="line">    ThreadPool* pool = (ThreadPool*)arg;</span><br><span class="line">    <span class="keyword">while</span> (!pool-&gt;shutdown)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 每隔3s检测一次</span></span><br><span class="line">        sleep(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取出线程池中任务的数量和当前线程的数量</span></span><br><span class="line">        pthread_mutex_lock(&amp;pool-&gt;mutexPool);</span><br><span class="line">        <span class="type">int</span> queueSize = pool-&gt;queueSize;</span><br><span class="line">        <span class="type">int</span> liveNum = pool-&gt;liveNum;</span><br><span class="line">        pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取出忙的线程的数量</span></span><br><span class="line">        pthread_mutex_lock(&amp;pool-&gt;mutexBusy);</span><br><span class="line">        <span class="type">int</span> busyNum = pool-&gt;busyNum;</span><br><span class="line">        pthread_mutex_unlock(&amp;pool-&gt;mutexBusy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加线程</span></span><br><span class="line">        <span class="comment">// 制定添加线程的条件 ： 任务的个数&gt;存活的线程个数 &amp;&amp; 存活的线程数&lt;最大线程数</span></span><br><span class="line">        <span class="keyword">if</span> (queueSize &gt; liveNum &amp;&amp; liveNum &lt; pool-&gt;maxNum)</span><br><span class="line">        {</span><br><span class="line">            pthread_mutex_lock(&amp;pool-&gt;mutexPool);</span><br><span class="line">            <span class="type">int</span> counter = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pool-&gt;maxNum &amp;&amp; counter &lt; NUMBER</span><br><span class="line">                            &amp;&amp; pool-&gt;liveNum &lt; pool-&gt;maxNum; ++i)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 如果当前线程池位置为空 则在此位置上创建线程。</span></span><br><span class="line">                <span class="keyword">if</span> (pool-&gt;threadIDs[i] == <span class="number">0</span>)</span><br><span class="line">                {</span><br><span class="line">                    pthread_create(&amp;pool-&gt;threadIDs[i], <span class="literal">NULL</span>, worker, pool);</span><br><span class="line">                    counter++;</span><br><span class="line">                    pool-&gt;liveNum++;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 销毁线程</span></span><br><span class="line">        <span class="comment">// 忙的线程*2 &lt; 存活的线程数 &amp;&amp; 存活的线程&gt;最小线程数</span></span><br><span class="line">        <span class="keyword">if</span> (busyNum * <span class="number">2</span> &lt; liveNum &amp;&amp; liveNum &gt; pool-&gt;minNum)</span><br><span class="line">        {</span><br><span class="line">            pthread_mutex_lock(&amp;pool-&gt;mutexPool);</span><br><span class="line">            pool-&gt;exitNum = NUMBER;</span><br><span class="line">            pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line">            <span class="comment">// 让工作的线程自杀</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUMBER; ++i)</span><br><span class="line">            {</span><br><span class="line">                pthread_cond_signal(&amp;pool-&gt;notEmpty);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">threadExit</span><span class="params">(ThreadPool* pool)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">pthread_t</span> tid = pthread_self();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pool-&gt;maxNum; ++i)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (pool-&gt;threadIDs[i] == tid)</span><br><span class="line">        {</span><br><span class="line">            pool-&gt;threadIDs[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"threadExit() called, %ld exiting...\n"</span>, tid);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="测试代码">测试代码</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"ThreadPool.h"</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">taskFunc</span><span class="params">(<span class="type">void</span>* arg)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> num = *(<span class="type">int</span>*)arg;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"thread %ld is working, number = %d\n"</span>,</span><br><span class="line">           pthread_self(), num);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="comment">// 创建线程池</span></span><br><span class="line">    ThreadPool* pool = threadPoolCreate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span>* num = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">        *num = i + <span class="number">100</span>;</span><br><span class="line">        threadPoolAdd(pool, taskFunc, num);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    threadPoolDestroy(pool);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="感谢苏丙榅-视频">感谢<a class="link" href="https://subingwen.cn/linux/threadpool/">苏丙榅<i class="fas fa-external-link-alt"></i></a>, <a class="link" href="https://www.bilibili.com/video/BV1jV411J795?t=2.9&amp;p=13">视频<i class="fas fa-external-link-alt"></i></a></h4>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C线程池</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo新增加图片功能</title>
    <url>/2023/06/27/hexoAddPictures/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>在书写博客的时候，图片是更容易概况的。然而hexo在引入图片时总会出现各种问题。 在官方文档给的 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure> 还是主题给的代码都出现了问题。下面将会为此解决问题。</p>
<h2 id="解决方案">解决方案</h2>
<ol type="1">
<li>打开_config.yml文件，修改下述内容，目的是为了新建文章时自动帮我们建一个与文章名相同的文件夹用来从放图片文件 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li>我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image。打开cmd输入 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></li>
<li><p>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">var cheerio = require(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> getPosition(str, m, i) &#123;</span><br><span class="line">  <span class="built_in">return</span> str.split(m, i).<span class="built_in">join</span>(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version = String(hexo.version).<span class="built_in">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(data)&#123;</span><br><span class="line">  var config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        var <span class="built_in">link</span> = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class="line">       var beginPos = getPosition(<span class="built_in">link</span>, <span class="string">&#x27;/&#x27;</span>, 1) + 1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       var beginPos = getPosition(<span class="built_in">link</span>, <span class="string">&#x27;/&#x27;</span>, 3) + 1;</span><br><span class="line">    // In hexo 3.1.1, the permalink of <span class="string">&quot;about&quot;</span> page is like <span class="string">&quot;.../about/index.html&quot;</span>.</span><br><span class="line">    var endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + 1;</span><br><span class="line">    <span class="built_in">link</span> = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key = toprocess[i];</span><br><span class="line"></span><br><span class="line">      var $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(this).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            // For windows style path, we replace <span class="string">&#x27;\&#x27;</span> to <span class="string">&#x27;/&#x27;</span>.</span><br><span class="line">            var src = $(this).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;</span><br><span class="line">               !/^\s*\//.test(src)) &#123;</span><br><span class="line">              // For <span class="string">&quot;about&quot;</span> page, the first part of <span class="string">&quot;src&quot;</span> can<span class="string">&#x27;t be removed.</span></span><br><span class="line"><span class="string">              // In addition, to support multi-level local directory.</span></span><br><span class="line"><span class="string">              var linkArray = link.split(&#x27;</span>/<span class="string">&#x27;).filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">                return elem != &#x27;</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">              &#125;);</span></span><br><span class="line"><span class="string">              var srcArray = src.split(&#x27;</span>/<span class="string">&#x27;).filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">                return elem != &#x27;</span><span class="string">&#x27; &amp;&amp; elem != &#x27;</span>.<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">              &#125;);</span></span><br><span class="line"><span class="string">              if(srcArray.length &gt; 1)</span></span><br><span class="line"><span class="string">                srcArray.shift();</span></span><br><span class="line"><span class="string">              src = srcArray.join(&#x27;</span>/<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">              $(this).attr(&#x27;</span>src<span class="string">&#x27;, config.root + link + src);</span></span><br><span class="line"><span class="string">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;else&#123;</span></span><br><span class="line"><span class="string">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span></span><br><span class="line"><span class="string">            console.info&amp;&amp;console.info($(this));</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">      data[key] = $.html();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure></p></li>
</ol>
<p>之后使用markdown语法插入图片就一切正常了。 <strong>可以先在本地预览，是否加载 成功再上传到云端</strong></p>
<hr>
<p>以下是一些常用的插入图片代码 <strong>在创建了md文件后，会在相对路径下创建一个文件夹，在此处放入图片。在引用图片时写相对路径即可！</strong> 例如我创建的博客名字为MachineLearningCourseCompetition，则在该文件夹下放置图片。 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![这里写描述](这里写图片的相对位置)</span><br><span class="line">&lt;div align=<span class="string">&#x27;center&#x27;</span>&gt;</span><br><span class="line">	&lt;img src=<span class="string">&quot;MachineLearningCourseCompetition/2.jpg&quot;</span> width=<span class="string">&#x27;400&#x27;</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>hexo新增图片</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode11-16</title>
    <url>/2023/11/16/leetcode11-16/</url>
    <content><![CDATA[<h2 id="leetcode每日一天11.16">leetcode每日一天（11.16）</h2>
<p><a class="link" href="https://leetcode.cn/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/">1334. 阈值距离内邻居最少的城市 - 力扣（LeetCode）<i class="fas fa-external-link-alt"></i></a></p>
<p>有 <code>n</code> 个城市，按从 <code>0</code> 到 <code>n-1</code> 编号。给你一个边数组 <code>edges</code>，其中 <code>edges[i] = [fromi, toi, weighti]</code> 代表 <code>fromi</code> 和 <code>toi</code> 两个城市之间的双向加权边，距离阈值是一个整数 <code>distanceThreshold</code>。</p>
<p>返回能通过某些路径到达其他城市数目最少、且路径距离 <strong>最大</strong> 为 <code>distanceThreshold</code> 的城市。如果有多个这样的城市，则返回编号最大的城市。</p>
<p>注意，连接城市 <strong><em>i</em></strong> 和 <strong><em>j</em></strong> 的路径的距离等于沿该路径的所有边的权重之和。</p>
<p><strong>示例 1：</strong></p>
<p><img src="/2023/11/16/leetcode11-16/find_the_city_01.png" style="zoom:50%;"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4</span><br><span class="line">输出：3</span><br><span class="line">解释：城市分布图如上。</span><br><span class="line">每个城市阈值距离 distanceThreshold = 4 内的邻居城市分别是：</span><br><span class="line">城市 0 -&gt; [城市 1, 城市 2] </span><br><span class="line">城市 1 -&gt; [城市 0, 城市 2, 城市 3] </span><br><span class="line">城市 2 -&gt; [城市 0, 城市 1, 城市 3] </span><br><span class="line">城市 3 -&gt; [城市 1, 城市 2] </span><br><span class="line">城市 0 和 3 在阈值距离 4 以内都有 2 个邻居城市，但是我们必须返回城市 3，因为它的编号最大。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<p><img src="/2023/11/16/leetcode11-16/find_the_city_02.png" style="zoom:50%;"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2</span><br><span class="line">输出：0</span><br><span class="line">解释：城市分布图如上。 </span><br><span class="line">每个城市阈值距离 distanceThreshold = 2 内的邻居城市分别是：</span><br><span class="line">城市 0 -&gt; [城市 1] </span><br><span class="line">城市 1 -&gt; [城市 0, 城市 4] </span><br><span class="line">城市 2 -&gt; [城市 3, 城市 4] </span><br><span class="line">城市 3 -&gt; [城市 2, 城市 4]</span><br><span class="line">城市 4 -&gt; [城市 1, 城市 2, 城市 3] </span><br><span class="line">城市 0 在阈值距离 2 以内只有 1 个邻居城市。</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="解答">解答</h2>
<h6 id="思想">思想：</h6>
<p>我们需要找到 <code>n</code>个节点中，拥有距离在 <code>distanceThreshold</code> 以内的邻居数量最小、且编号最大的节点。</p>
<p>我使用的为Floyd算法 我们可以求出每一个节点 <code>p</code> 到其它节点的最短路，然后查看与 <code>p</code>距离在 <code>distanceThreshold</code>以内的邻居数量最小的节点。</p>
<p>我们可以使用 Floyd 算法得到任意两点之间的最短路，然后统计满足条件的邻居数量。</p>
<p><strong>注意的是，全片使用一个二维数组，该二维数组维护两点直接的最短路径，同时使用了三重循环，最外围的循环代表的更新该点的值进入最短路径中。</strong></p>
<h6 id="代码">代码：</h6>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findTheCity</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges, <span class="type">int</span> distanceThreshold)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> map[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line">        <span class="built_in">memset</span>(map,<span class="number">1e4</span>+<span class="number">5</span>,<span class="built_in">sizeof</span>(map));</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">1e4</span>+<span class="number">5</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">        <span class="type">int</span> len=edges.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">            map[edges[i][<span class="number">0</span>]][edges[i][<span class="number">1</span>]]=map[edges[i][<span class="number">1</span>]][edges[i][<span class="number">0</span>]]=edges[i][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            map[i][i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*k是代表更新到此顶点*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;n;k++)&#123;</span><br><span class="line">            dp[k][k]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                    map[i][j]=<span class="built_in">min</span>(map[i][j],map[i][k]+map[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> index = <span class="number">-1</span>,minCnt=n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;n;k++)&#123;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                cout&lt;&lt;dp[k][i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                <span class="keyword">if</span>(map[k][i]&lt;=distanceThreshold)&#123;</span><br><span class="line">                    <span class="comment">// cout&lt;&lt;k&lt;&lt; &quot; &quot;&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;&quot;k:&quot;&lt;&lt; k &lt;&lt;&quot;cnt:&quot;&lt;&lt;cnt&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">if</span>(minCnt&gt;=cnt)</span><br><span class="line">                index = k,minCnt=cnt;   </span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode11-21</title>
    <url>/2023/11/21/leetcode11-21/</url>
    <content><![CDATA[<h2 id="leetcode每日一天11.21">leetcode每日一天（11.21）</h2>
<h3 id="美化数组的最少删除数"><a class="link" href="https://leetcode.cn/problems/minimum-deletions-to-make-array-beautiful/">2216. 美化数组的最少删除数<i class="fas fa-external-link-alt"></i></a></h3>
<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> ，如果满足下述条件，则认为数组 <code>nums</code> 是一个 <strong>美丽数组</strong> ：</p>
<ul>
<li><code>nums.length</code> 为偶数</li>
<li>对所有满足 <code>i % 2 == 0</code> 的下标 <code>i</code> ，<code>nums[i] != nums[i + 1]</code> 均成立</li>
</ul>
<p>注意，空数组同样认为是美丽数组。</p>
<p>你可以从 <code>nums</code> 中删除任意数量的元素。当你删除一个元素时，被删除元素右侧的所有元素将会向左移动一个单位以填补空缺，而左侧的元素将会保持 <strong>不变</strong> 。</p>
<p>返回使 <code>nums</code> 变为美丽数组所需删除的 <strong>最少</strong> 元素数目<em>。</em></p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,1,2,3,5]</span><br><span class="line">输出：1</span><br><span class="line">解释：可以删除 nums[0] 或 nums[1] ，这样得到的 nums = [1,2,3,5] 是一个美丽数组。可以证明，要想使 nums 变为美丽数组，至少需要删除 1 个元素。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,1,2,2,3,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：可以删除 nums[0] 和 nums[5] ，这样得到的 nums = [1,2,2,3] 是一个美丽数组。可以证明，要想使 nums 变为美丽数组，至少需要删除 2 个元素。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 105</code></li>
<li><code>0 &lt;= nums[i] &lt;= 105</code></li>
</ul>
<hr>
<h2 id="解答">解答</h2>
<h6 id="思想贪心">思想：贪心</h6>
<p>这是一道典型的使用<strong>贪心</strong>解决的问题。</p>
<p><strong>关键 1：理解题意</strong></p>
<p>题目要我们找出需要删掉多少个数字达到美化数组。</p>
<p>题目只要求返回结果，不要求得到美化数组。我们就可以通过思路计算即可。</p>
<p><strong>关键 2：思路</strong></p>
<p>设计状态思路：思考题意，完美数组的长度为<strong>偶数</strong>，且要求位于偶数位的数字与<strong>接邻</strong>的数字不相同。 既然是可以删掉数字，然后原数组位于奇数位置还是偶数位置并不重要，我们仅仅需要得到的美化数组是这样的规则即可， 那<strong>我们可以直接从原数组找寻两个相邻数字不同的保留即可</strong>，遍历一遍后记录保留的数字个数，用原数组长度减去则得到删掉的个数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDeletion</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len=nums.<span class="built_in">size</span>(),num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=nums[i+<span class="number">1</span>])</span><br><span class="line">                num++,i++;</span><br><span class="line">        <span class="keyword">return</span> len<span class="number">-2</span>*num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode11-20</title>
    <url>/2023/11/20/leetcode11-20/</url>
    <content><![CDATA[<h2 id="leetcode每日一天11.20">leetcode每日一天（11.20）</h2>
<h3 id="最大子数组和"><em><a class="link" href="https://leetcode.cn/problems/maximum-subarray/">53. 最大子数组和<i class="fas fa-external-link-alt"></i></a></em></h3>
<p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<p><strong>子数组</strong> 是数组中的一个连续部分。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">输出：6</span><br><span class="line">解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [5,4,-1,7,8]</span><br><span class="line">输出：23</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="解答">解答</h2>
<h6 id="思想动态规划">思想：动态规划</h6>
<p>这是一道典型的使用「动态规划」解决的问题，需要我们掌握动态规划问题设计状态的技巧（<strong>无后效性</strong>），并且需要知道如何推导状态转移方程，最后再去优化空间。</p>
<p><strong>关键 1：理解题意</strong></p>
<p>题目要我们找出和最大的连续子数组的值是多少，「连续」是关键字，连续很重要，不是子序列。</p>
<p>题目只要求返回结果，不要求得到最大的连续子数组是哪一个。这样的问题通常可以使用「动态规划」解决。</p>
<p><strong>关键 2：如何定义子问题（如何定义状态）</strong></p>
<p>设计状态思路：把不确定的因素确定下来，进而把子问题定义清楚，把子问题定义得简单。动态规划的思想通过解决了一个一个简单的问题，进而把简单的问题的解组成了复杂的问题的解。</p>
<p>我们 不知道和最大的连续子数组一定会选哪一个数，那么我们可以求出 所有 经过输入数组的某一个数的连续子数组的最大和。</p>
<p>例如，示例 1 输入数组是 [-2,1,-3,4,-1,2,1,-5,4] ，我们可以求出以下子问题：</p>
<ul>
<li>子问题 1：经过 −2-2−2 的连续子数组的最大和是多少；</li>
<li>子问题 2：经过 111 的连续子数组的最大和是多少；</li>
<li>子问题 3：经过 −3-3−3 的连续子数组的最大和是多少；</li>
<li>子问题 4：经过 444 的连续子数组的最大和是多少；</li>
<li>子问题 5：经过 −1-1−1 的连续子数组的最大和是多少；</li>
<li>子问题 6：经过 222 的连续子数组的最大和是多少；</li>
<li>子问题 7：经过 111 的连续子数组的最大和是多少；</li>
<li>子问题 8：经过 −5-5−5 的连续子数组的最大和是多少；</li>
<li>子问题 9：经过 444 的连续子数组的最大和是多少。</li>
</ul>
<p>最后dp的状态转移方程为： $$ dp[i] = { dp[i-1] + nums[i], nums[i],</p>
<p>if dp[i-1] &gt; 0, if dp[i-1] &lt;= 0 } $$ <strong>注意：</strong></p>
<p>这里状态的定义不是题目中的问题的定义，不能直接将最后一个状态返回回去；</p>
<p>这里状态的定义不是题目中的问题的定义，不能直接将最后一个状态返回回去；</p>
<p>这里状态的定义不是题目中的问题的定义，不能直接将最后一个状态返回回去。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> num = nums[<span class="number">0</span>],len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(len,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>]=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">            dp[i]=<span class="built_in">max</span>(nums[i],dp[i<span class="number">-1</span>]+nums[i]);</span><br><span class="line">            num = <span class="built_in">max</span>(dp[i],num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode11-22</title>
    <url>/2023/11/22/leetcode11-22/</url>
    <content><![CDATA[<h2 id="leetcode每日一天11.22">leetcode每日一天（11.22）</h2>
<p><a class="link" href="https://leetcode.cn/problems/minimum-path-cost-in-a-grid/">2304. 网格中的最小路径代价<i class="fas fa-external-link-alt"></i></a></p>
<p>给你一个下标从 <strong>0</strong> 开始的整数矩阵 <code>grid</code> ，矩阵大小为 <code>m x n</code> ，由从 <code>0</code> 到 <code>m * n - 1</code> 的不同整数组成。你可以在此矩阵中，从一个单元格移动到 <strong>下一行</strong> 的任何其他单元格。如果你位于单元格 <code>(x, y)</code> ，且满足 <code>x &lt; m - 1</code> ，你可以移动到 <code>(x + 1, 0)</code>, <code>(x + 1, 1)</code>, ..., <code>(x + 1, n - 1)</code> 中的任何一个单元格。<strong>注意：</strong> 在最后一行中的单元格不能触发移动。</p>
<p>每次可能的移动都需要付出对应的代价，代价用一个下标从 <strong>0</strong> 开始的二维数组 <code>moveCost</code> 表示，该数组大小为 <code>(m * n) x n</code> ，其中 <code>moveCost[i][j]</code> 是从值为 <code>i</code> 的单元格移动到下一行第 <code>j</code> 列单元格的代价。从 <code>grid</code> 最后一行的单元格移动的代价可以忽略。</p>
<p><code>grid</code> 一条路径的代价是：所有路径经过的单元格的 <strong>值之和</strong> 加上 所有移动的 <strong>代价之和</strong> 。从 <strong>第一行</strong> 任意单元格出发，返回到达 <strong>最后一行</strong> 任意单元格的最小路径代价<em>。</em></p>
<p><strong>示例 1：</strong></p>
<p><img src="/2023/11/22/leetcode11-22/griddrawio-2.png" style="zoom:100%;"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：grid = [[5,3],[4,0],[2,1]], moveCost = [[9,8],[1,5],[10,12],[18,6],[2,4],[14,3]]</span><br><span class="line">输出：17</span><br><span class="line">解释：最小代价的路径是 5 -&gt; 0 -&gt; 1 。</span><br><span class="line">- 路径途经单元格值之和 5 + 0 + 1 = 6 。</span><br><span class="line">- 从 5 移动到 0 的代价为 3 。</span><br><span class="line">- 从 0 移动到 1 的代价为 8 。</span><br><span class="line">路径总代价为 6 + 3 + 8 = 17 。</span><br><span class="line">示例 2：</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：grid = [[5,1,2],[4,0,3]], moveCost = [[12,10,15],[20,23,8],[21,7,1],[8,1,13],[9,10,25],[5,3,2]]</span><br><span class="line">输出：6</span><br><span class="line">解释：</span><br><span class="line">最小代价的路径是 2 -&gt; 3 。 </span><br><span class="line">- 路径途经单元格值之和 2 + 3 = 5 。 </span><br><span class="line">- 从 2 移动到 3 的代价为 1 。 </span><br><span class="line">路径总代价为 5 + 1 = 6 。</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>提示：</strong></p>
<ul>
<li><code>m == grid.length</code></li>
<li><code>n == grid[i].length</code></li>
<li><code>2 &lt;= m, n &lt;= 50</code></li>
<li><code>grid</code> 由从 <code>0</code> 到 <code>m * n - 1</code> 的不同整数组成</li>
<li><code>moveCost.length == m * n</code></li>
<li><code>moveCost[i].length == n</code></li>
<li><code>1 &lt;= moveCost[i][j] &lt;= 100</code></li>
</ul>
<hr>
<h2 id="解答">解答</h2>
<h6 id="思想">思想：</h6>
<p>我们使用 dp【i】【j】表示从第 0 行的任意单元格出发，到达第i 行j 列的单元格的最小路径代价，那么转移方程为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[next][j]=min(dp[next][j],dp[cur][k]+grid[i][j]+moveCost[grid[i-1][k]][j]);</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<p>使用了 Floyd-Warshall 算法，这个算法的时间复杂度为 O(N^3)，其中 N 是节点的数量。会超时。</p>
<p>**因为我们的路径必须是从上到下依次路过，则我们只用开辟一个2*n的数组大小。**</p>
<p><strong>同样因为我们从头到尾结束，所以我们不必在意真实标号为多少直接用序号代替即可</strong></p>
<p><strong>我们选择路径的依次是：该条路径的cost以及达到点的值。因此我们需先把头节点的大小加入即可</strong></p>
<p><strong>三重for循环中i和j表示该点，k表示选择的路径</strong></p>
<h6 id="代码">代码：</h6>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minPathCost</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; moveCost)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>(),n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(<span class="number">2</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">        dp[<span class="number">0</span>]=grid[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="type">int</span> next = <span class="number">1</span> - cur;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                dp[next][j]=<span class="number">1e6</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;n;k++)&#123;</span><br><span class="line">                    dp[next][j]=<span class="built_in">min</span>(dp[next][j],dp[cur][k]+grid[i][j]+moveCost[grid[i<span class="number">-1</span>][k]][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> minNum = dp[cur][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            minNum = <span class="built_in">min</span>(minNum,dp[cur][i]);</span><br><span class="line">        <span class="keyword">return</span> minNum;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode11-23</title>
    <url>/2023/11/23/leetcode11-23/</url>
    <content><![CDATA[<h2 id="leetcode每日一天11.23">leetcode每日一天（11.23）</h2>
<p><a class="link" href="https://leetcode.cn/problems/html-entity-parser/">1410. HTML 实体解析器<i class="fas fa-external-link-alt"></i></a></p>
<p>「HTML 实体解析器」 是一种特殊的解析器，它将 HTML 代码作为输入，并用字符本身替换掉所有这些特殊的字符实体。</p>
<p>HTML 里这些特殊字符和它们对应的字符实体包括：</p>
<ul>
<li><strong>双引号：</strong>字符实体为 <code>&quot;</code> ，对应的字符是 <code>&quot;</code> 。</li>
<li><strong>单引号：</strong>字符实体为 <code>'</code> ，对应的字符是 <code>'</code> 。</li>
<li><strong>与符号：</strong>字符实体为 <code>&amp;</code> ，对应对的字符是 <code>&amp;</code> 。</li>
<li><strong>大于号：</strong>字符实体为 <code>&gt;</code> ，对应的字符是 <code>&gt;</code> 。</li>
<li><strong>小于号：</strong>字符实体为 <code>&lt;</code> ，对应的字符是 <code>&lt;</code> 。</li>
<li><strong>斜线号：</strong>字符实体为 <code>⁄</code> ，对应的字符是 <code>/</code> 。</li>
</ul>
<p>给你输入字符串 <code>text</code> ，请你实现一个 HTML 实体解析器，返回解析器解析后的结果。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：text = &quot;&amp;amp; is an HTML entity but &amp;ambassador; is not.&quot;</span><br><span class="line">输出：&quot;&amp; is an HTML entity but &amp;ambassador; is not.&quot;</span><br><span class="line">解释：解析器把字符实体 &amp;amp; 用 &amp; 替换</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：text = &quot;and I quote: &amp;quot;...&amp;quot;&quot;</span><br><span class="line">输出：&quot;and I quote: \&quot;...\&quot;&quot;</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：text = &quot;Stay home! Practice on Leetcode :)&quot;</span><br><span class="line">输出：&quot;Stay home! Practice on Leetcode :)&quot;</span><br></pre></td></tr></table></figure>
<p><strong>示例 4：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：text = &quot;x &amp;gt; y &amp;amp;&amp;amp; x &amp;lt; y is always false&quot;</span><br><span class="line">输出：&quot;x &gt; y &amp;&amp; x &lt; y is always false&quot;</span><br></pre></td></tr></table></figure>
<p><strong>示例 5：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：text = &quot;leetcode.com&amp;frasl;problemset&amp;frasl;all&quot;</span><br><span class="line">输出：&quot;leetcode.com/problemset/all&quot;</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= text.length &lt;= 10^5</code></li>
<li>字符串可能包含 256 个ASCII 字符中的任意字符。</li>
</ul>
<hr>
<h2 id="解答">解答</h2>
<h6 id="思想">思想：</h6>
<p>这是一道很简单的字符串操作的题目。这里我为了温故以前学习的map而特意使用了他，如果想更便捷的抒写代码可以使用官网提供的题解使用二维字符串数组则可以轻松的AC。</p>
<p>大概思路：观察需要替换的字符串的共同点发现都以<strong>&amp;</strong>开头和都以<strong>；</strong>结尾，因此可以依次作为根据判断是否是需要进行更换的字符串。</p>
<p>注意：</p>
<p><strong>在遍历是否为需替换字符串时，应该注意到最长替换字符串长度为7，因此在大于最长长度应该截至并且应考虑数组越界的可能</strong></p>
<p>知识：</p>
<p>稳固了字符串的相关操作，例如：compare函数和substr函数。</p>
<h6 id="代码">代码：</h6>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">entityParser</span><span class="params">(string text)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = text.<span class="built_in">size</span>();</span><br><span class="line">        string output;</span><br><span class="line"></span><br><span class="line">        map&lt;string,string&gt; m;</span><br><span class="line">        map&lt;string,string&gt;::iterator *it;</span><br><span class="line">        m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;&amp;apos;&quot;</span>,<span class="string">&quot;\&#x27;&quot;</span>));</span><br><span class="line">        m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;&amp;amp;&quot;</span>,<span class="string">&quot;&amp;&quot;</span>));</span><br><span class="line">        m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;&amp;quot;&quot;</span>,<span class="string">&quot;\&quot;&quot;</span>));</span><br><span class="line">        m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;&amp;gt;&quot;</span>,<span class="string">&quot;&gt;&quot;</span>));</span><br><span class="line">        m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;&amp;lt;&quot;</span>,<span class="string">&quot;&lt;&quot;</span>));</span><br><span class="line">        m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;&amp;frasl;&quot;</span>,<span class="string">&quot;/&quot;</span>));</span><br><span class="line">        vector&lt;string&gt; first=&#123;<span class="string">&quot;&amp;apos;&quot;</span>,<span class="string">&quot;&amp;amp;&quot;</span>,<span class="string">&quot;&amp;quot;&quot;</span>,<span class="string">&quot;&amp;gt;&quot;</span>,<span class="string">&quot;&amp;lt;&quot;</span>,<span class="string">&quot;&amp;frasl;&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;m[&quot;&amp;l&quot;]&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span> ;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(text[i]==<span class="string">&#x27;&amp;&#x27;</span>)&#123;</span><br><span class="line">                <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="type">int</span> endIndex=i;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;i+<span class="number">7</span>&amp;&amp;j&lt;len;j++)</span><br><span class="line">                    <span class="keyword">if</span>(text[j]==<span class="string">&#x27;;&#x27;</span>)&#123;</span><br><span class="line">                        endIndex=j;</span><br><span class="line">                        string t=text.<span class="built_in">substr</span>(i,j-i+<span class="number">1</span>);</span><br><span class="line">                        cout&lt;&lt;t&lt;&lt;endl;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">6</span>;k++)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(t.<span class="built_in">compare</span>(first[k])==<span class="number">0</span>)&#123;</span><br><span class="line">                                output+=m[first[k]];</span><br><span class="line">                                i=j;</span><br><span class="line">                                flag=<span class="literal">true</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            output+=text[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode11-27</title>
    <url>/2023/11/27/leetcode11-27/</url>
    <content><![CDATA[<h2 id="leetcode每日一天11.27">leetcode每日一天（11.27）</h2>
<p><a class="link" href="https://leetcode.cn/problems/sum-of-subarray-minimums/">907. 子数组的最小值之和<i class="fas fa-external-link-alt"></i></a></p>
<ul>
<li><p>给定一个整数数组 <code>arr</code>，找到 <code>min(b)</code> 的总和，其中 <code>b</code> 的范围为 <code>arr</code> 的每个（连续）子数组。</p>
<p>由于答案可能很大，因此 <strong>返回答案模 <code>10^9 + 7</code></strong> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [3,1,2,4]</span><br><span class="line">输出：17</span><br><span class="line">解释：</span><br><span class="line">子数组为 [3]，[1]，[2]，[4]，[3,1]，[1,2]，[2,4]，[3,1,2]，[1,2,4]，[3,1,2,4]。 </span><br><span class="line">最小值为 3，1，2，4，1，1，2，1，1，1，和为 17。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [11,81,94,43,3]</span><br><span class="line">输出：444</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= arr.length &lt;= 3 * 104</code></li>
<li><code>1 &lt;= arr[i] &lt;= 3 * 104</code></li>
</ul></li>
</ul>
<hr>
<h2 id="解答">解答</h2>
<h6 id="思想">思想：</h6>
<p>考虑所有满足以数组 <code>arr</code> 中的某个元素 <code>arr[i]</code> 为最右且最小的元素的子序列个数 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.758ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 1661 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mo" transform="translate(760,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(1038,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1383,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g></g></g></svg></mjx-container></span>，那么题目要求求连续子数组的最小值之和即为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.777ex;" xmlns="http://www.w3.org/2000/svg" width="17.758ex" height="2.922ex" role="img" focusable="false" viewbox="0 -948 7849.1 1291.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"/></g><g data-mml-node="TeXAtom" transform="translate(1089,477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g><g data-mml-node="mtext" transform="translate(2633.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" transform="translate(529,0)"/><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" transform="translate(980,0)"/></g><g data-mml-node="mo" transform="translate(4064.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(4342.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(4687.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(5187.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"/></g><g data-mml-node="mi" transform="translate(6188.1,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mo" transform="translate(6948.1,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(7226.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(7571.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g></g></g></svg></mjx-container></span>，其中数组 <code>arr</code> 的长度为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container></span>。</p>
<p>其中，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.828ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2576 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(764,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mi" transform="translate(1314,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mo" transform="translate(1675,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(1953,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2298,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g></g></g></svg></mjx-container></span> 表示以 <code>arr[i]</code> 为最右且最小的子序列的数目，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.038ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3111 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(451,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(796,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(1273,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(1849,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mo" transform="translate(2210,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(2488,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2833,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g></g></g></svg></mjx-container></span> 表示以 <code>arr[i]</code> 为最左且最小的子序列的数目，所以以 <code>arr[i]</code> 为最小元素的子序列的数目合计为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.632ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 6909.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(764,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mi" transform="translate(1314,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mo" transform="translate(1675,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(1953,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2298,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(2798.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"/></g><g data-mml-node="mi" transform="translate(3798.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(4249.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(4594.4,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(5071.4,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(5647.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mo" transform="translate(6008.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(6286.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(6631.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g></g></g></svg></mjx-container></span>。</p>
<p>具体步骤如下：</p>
<ol type="1">
<li><p>求左边第一个小于 <code>arr[i]</code> 的元素：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="12.74ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 5631 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"/><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(278,0)"/><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(722,0)"/><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1028,0)"/></g><g data-mml-node="mo" transform="translate(1417,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(1695,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2040,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(2595.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(3651.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(4218.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(5219,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></svg></mjx-container></span>，其中 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex;" xmlns="http://www.w3.org/2000/svg" width="0.932ex" height="1.957ex" role="img" focusable="false" viewbox="0 -661 412 865"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></svg></mjx-container></span> 为栈顶元素的下标。</p></li>
<li><p>求右边第一个大于等于 <code>arr[i]</code> 的元素：$<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="14.566ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 6438 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z"/><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(392,0)"/><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(670,0)"/><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1170,0)"/><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1726,0)"/></g><g data-mml-node="mo" transform="translate(2115,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(2393,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2738,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(3293.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(4349.6,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(5092.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(6093,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container></span>，其中 <code>k</code> 为栈顶元素的下标。</p></li>
<li><p>连续子数组 <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="26.473ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 11701.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" transform="translate(529,0)"/><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" transform="translate(980,0)"/></g><g data-mml-node="mo" transform="translate(1431,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(1709,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mo" transform="translate(2121,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(2399,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mtext" transform="translate(2843.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" transform="translate(529,0)"/><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" transform="translate(980,0)"/></g><g data-mml-node="mo" transform="translate(4274.7,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(4552.7,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mo" transform="translate(5186.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(6187.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(6687.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(6965.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(7409.8,0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"/></g><g data-mml-node="mo" transform="translate(8748.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mtext" transform="translate(9193.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" transform="translate(529,0)"/><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" transform="translate(980,0)"/></g><g data-mml-node="mo" transform="translate(10624.1,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(10902.1,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(11423.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g></g></g></svg></mjx-container></span> 的最小元素即为 <code>arr[i]</code>，以 <code>arr[i]</code> 为最小元素的连续子序列的数量为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.489ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 6846.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(956.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(1956.4,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mo" transform="translate(2368.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2979.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"/></g><g data-mml-node="mo" transform="translate(3979.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4368.9,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(5112.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(6112.3,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(6457.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></span>。</p></li>
<li><p>根据以上结论，所有子数组的最小值之和即为 <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.819ex;" xmlns="http://www.w3.org/2000/svg" width="27.182ex" height="6.712ex" role="img" focusable="false" viewbox="0 -1720.9 12014.6 2966.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"/></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(58,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mtext" transform="translate(1610.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" transform="translate(529,0)"/><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" transform="translate(980,0)"/></g><g data-mml-node="mo" transform="translate(3041.7,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(3319.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3664.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(4164.9,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"/></g><g data-mml-node="mtext" transform="translate(5165.1,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" transform="translate(298,0)"/><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z" transform="translate(764,0)"/><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" transform="translate(1254,0)"/></g><g data-mml-node="mo" transform="translate(6780.1,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(7058.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(7403.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(7903.3,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"/></g><g data-mml-node="mtext" transform="translate(8903.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" transform="translate(451,0)"/><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z" transform="translate(796,0)"/><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z" transform="translate(1273,0)"/><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" transform="translate(1849,0)"/></g><g data-mml-node="mo" transform="translate(11113.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(11391.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(11736.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g></g></g></svg></mjx-container></span></p></li>
</ol>
<p>维护单调栈的过程是线性的，因为只进行了线性次的入栈和出栈。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumSubarrayMins</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>{</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; monoStack;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(n)</span>, <span class="title">right</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">while</span> (!monoStack.<span class="built_in">empty</span>() &amp;&amp; arr[i] &lt;= arr[monoStack.<span class="built_in">back</span>()]) {</span><br><span class="line">                monoStack.<span class="built_in">pop_back</span>();</span><br><span class="line">            }</span><br><span class="line">            left[i] = i - (monoStack.<span class="built_in">empty</span>() ? <span class="number">-1</span> : monoStack.<span class="built_in">back</span>());</span><br><span class="line">            monoStack.<span class="built_in">push_back</span>(i);</span><br><span class="line">        }</span><br><span class="line">        monoStack.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">            <span class="keyword">while</span> (!monoStack.<span class="built_in">empty</span>() &amp;&amp; arr[i] &lt; arr[monoStack.<span class="built_in">back</span>()]) {</span><br><span class="line">                monoStack.<span class="built_in">pop_back</span>();</span><br><span class="line">            }</span><br><span class="line">            right[i] = (monoStack.<span class="built_in">empty</span>() ? n : monoStack.<span class="built_in">back</span>()) - i;</span><br><span class="line">            monoStack.<span class="built_in">push_back</span>(i);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            ans = (ans + (<span class="type">long</span> <span class="type">long</span>)left[i] * right[i] * arr[i]) % mod; </span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode11-28</title>
    <url>/2023/11/28/leetcode11-28/</url>
    <content><![CDATA[<h2 id="leetcode每日一天11.28">leetcode每日一天（11.28）</h2>
<p><a class="link" href="https://leetcode.cn/problems/design-front-middle-back-queue/">1670. 设计前中后队列<i class="fas fa-external-link-alt"></i></a></p>
<ul>
<li><p>请你设计一个队列，支持在前，中，后三个位置的 <code>push</code> 和 <code>pop</code> 操作。</p>
<p>请你完成 <code>FrontMiddleBack</code> 类：</p>
<ul>
<li><code>FrontMiddleBack()</code> 初始化队列。</li>
<li><code>void pushFront(int val)</code> 将 <code>val</code> 添加到队列的 <strong>最前面</strong> 。</li>
<li><code>void pushMiddle(int val)</code> 将 <code>val</code> 添加到队列的 <strong>正中间</strong> 。</li>
<li><code>void pushBack(int val)</code> 将 <code>val</code> 添加到队里的 <strong>最后面</strong> 。</li>
<li><code>int popFront()</code> 将 <strong>最前面</strong> 的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 <code>-1</code> 。</li>
<li><code>int popMiddle()</code> 将 <strong>正中间</strong> 的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 <code>-1</code> 。</li>
<li><code>int popBack()</code> 将 <strong>最后面</strong> 的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 <code>-1</code> 。</li>
</ul>
<p>请注意当有 <strong>两个</strong> 中间位置的时候，选择靠前面的位置进行操作。比方说：</p>
<ul>
<li>将 <code>6</code> 添加到 <code>[1, 2, 3, 4, 5]</code> 的中间位置，结果数组为 <code>[1, 2, **6**, 3, 4, 5]</code> 。</li>
<li>从 <code>[1, 2, **3**, 4, 5, 6]</code> 的中间位置弹出元素，返回 <code>3</code> ，数组变为 <code>[1, 2, 4, 5, 6]</code> 。</li>
</ul>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">["FrontMiddleBackQueue", "pushFront", "pushBack", "pushMiddle", "pushMiddle", "popFront", "popMiddle", "popMiddle", "popBack", "popFront"]</span><br><span class="line">[[], [1], [2], [3], [4], [], [], [], [], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, null, null, 1, 3, 4, 2, -1]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">FrontMiddleBackQueue q = new FrontMiddleBackQueue();</span><br><span class="line">q.pushFront(1);   // [1]</span><br><span class="line">q.pushBack(2);    // [1, 2]</span><br><span class="line">q.pushMiddle(3);  // [1, 3, 2]</span><br><span class="line">q.pushMiddle(4);  // [1, 4, 3, 2]</span><br><span class="line">q.popFront();     // 返回 1 -&gt; [4, 3, 2]</span><br><span class="line">q.popMiddle();    // 返回 3 -&gt; [4, 2]</span><br><span class="line">q.popMiddle();    // 返回 4 -&gt; [2]</span><br><span class="line">q.popBack();      // 返回 2 -&gt; []</span><br><span class="line">q.popFront();     // 返回 -1 -&gt; [] （队列为空）</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= val &lt;= 109</code></li>
<li>最多调用 <code>1000</code> 次 <code>pushFront</code>， <code>pushMiddle</code>， <code>pushBack</code>， <code>popFront</code>， <code>popMiddle</code> 和 <code>popBack</code> 。</li>
</ul></li>
</ul>
<hr>
<h2 id="解答">解答</h2>
<h6 id="思想">思想：</h6>
<p>当你看到这个问题时，首先需要设计一种数据结构，支持在头、中、尾部进行元素的插入和删除。一个自然的想法是将这个数据结构分为左右两部分，它们的长度大致相同，并且左边的尾部与右边的头部相接。这样一来，对中部的操作就可以转化为对左边尾部或者右边头部的操作。</p>
<p>因为左右两部分都需要支持头、尾部的插入和删除，所以选择使用双端队列这一基础数据结构。我们用<code>left</code>表示左边，<code>right</code>表示右边。在整个过程中，要保持<code>left</code>和<code>right</code>的长度相同，或者<code>left</code>的长度比<code>right</code>大1，即 <code>right.length ≤ left.length ≤ right.length + 1</code>。当然，也可以反过来，让<code>left</code>的长度与<code>right</code>的长度相等，或者<code>right</code>的长度比<code>left</code>大1。这么做是为了便于在中部进行插入和删除操作。</p>
<p>在以下六个基本操作中，你需要进行一些调整，以满足两个双端队列长度的约束：</p>
<ol type="1">
<li><strong>头部插入 <code>pushFront</code>：</strong> 在<code>left</code>的头部插入元素。如果插入后<code>left</code>的长度比<code>right</code>大2，需要将<code>left</code>的尾部元素移动到<code>right</code>的头部。</li>
<li><strong>中部插入 <code>pushMiddle</code>：</strong> 在<code>left</code>的尾部插入元素。如果插入前<code>left</code>的长度比<code>right</code>大1，需要先将<code>left</code>的尾部元素移动到<code>right</code>的头部，然后再插入新元素。</li>
<li><strong>尾部插入 <code>pushBack</code>：</strong> 在<code>right</code>的尾部插入元素。如果插入后<code>right</code>的长度比<code>left</code>大1，需要将<code>right</code>的头部元素移动到<code>left</code>的尾部。</li>
<li><strong>头部删除 <code>popFront</code>：</strong> 如果<code>left</code>为空，则直接返回-1。否则删除<code>left</code>的头部元素，如果删除后<code>left</code>的长度比<code>right</code>小1，需要将<code>right</code>的头部元素移动到<code>left</code>的尾部。</li>
<li><strong>中部删除 <code>popMiddle</code>：</strong> 如果<code>left</code>为空，则直接返回-1。否则删除<code>left</code>的尾部元素，如果删除后<code>left</code>的长度比<code>right</code>小1，需要将<code>right</code>的头部元素移动到<code>left</code>的尾部。</li>
<li><strong>尾部删除 <code>popBack</code>：</strong> 如果<code>left</code>为空，则直接返回-1。然后查看<code>right</code>的长度：
<ul>
<li>如果<code>right</code>为空（此时队列中仅存在一个元素），则删除<code>left</code>的尾部元素。</li>
<li>如果<code>right</code>不为空，则删除<code>right</code>的尾部元素，如果删除后<code>left</code>的长度比<code>right</code>大2，需要将<code>left</code>的尾部元素移动到<code>right</code>的头部。</li>
</ul></li>
</ol>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FrontMiddleBackQueue</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">FrontMiddleBackQueue</span>() {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushFront</span><span class="params">(<span class="type">int</span> val)</span> </span>{</span><br><span class="line">        left.<span class="built_in">push_front</span>(val);</span><br><span class="line">        <span class="keyword">if</span> (left.<span class="built_in">size</span>() == right.<span class="built_in">size</span>() + <span class="number">2</span>) {</span><br><span class="line">            right.<span class="built_in">push_front</span>(left.<span class="built_in">back</span>());</span><br><span class="line">            left.<span class="built_in">pop_back</span>();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushMiddle</span><span class="params">(<span class="type">int</span> val)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (left.<span class="built_in">size</span>() == right.<span class="built_in">size</span>() + <span class="number">1</span>) {</span><br><span class="line">            right.<span class="built_in">push_front</span>(left.<span class="built_in">back</span>());</span><br><span class="line">            left.<span class="built_in">pop_back</span>();</span><br><span class="line">        }</span><br><span class="line">        left.<span class="built_in">push_back</span>(val);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushBack</span><span class="params">(<span class="type">int</span> val)</span> </span>{</span><br><span class="line">        right.<span class="built_in">push_back</span>(val);</span><br><span class="line">        <span class="keyword">if</span> (left.<span class="built_in">size</span>() + <span class="number">1</span> == right.<span class="built_in">size</span>()) {</span><br><span class="line">            left.<span class="built_in">push_back</span>(right.<span class="built_in">front</span>());</span><br><span class="line">            right.<span class="built_in">pop_front</span>();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">popFront</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (left.<span class="built_in">empty</span>()) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> val = left.<span class="built_in">front</span>();</span><br><span class="line">        left.<span class="built_in">pop_front</span>();</span><br><span class="line">        <span class="keyword">if</span> (left.<span class="built_in">size</span>() + <span class="number">1</span> == right.<span class="built_in">size</span>()) {</span><br><span class="line">            left.<span class="built_in">push_back</span>(right.<span class="built_in">front</span>());</span><br><span class="line">            right.<span class="built_in">pop_front</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">popMiddle</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (left.<span class="built_in">empty</span>()) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> val = left.<span class="built_in">back</span>();</span><br><span class="line">        left.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">if</span> (left.<span class="built_in">size</span>() + <span class="number">1</span> == right.<span class="built_in">size</span>()) {</span><br><span class="line">            left.<span class="built_in">push_back</span>(right.<span class="built_in">front</span>());</span><br><span class="line">            right.<span class="built_in">pop_front</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">popBack</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (left.<span class="built_in">empty</span>()) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (right.<span class="built_in">empty</span>()) {</span><br><span class="line">            val = left.<span class="built_in">back</span>();</span><br><span class="line">            left.<span class="built_in">pop_back</span>();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            val = right.<span class="built_in">back</span>();</span><br><span class="line">            right.<span class="built_in">pop_back</span>();</span><br><span class="line">            <span class="keyword">if</span> (left.<span class="built_in">size</span>() == right.<span class="built_in">size</span>() + <span class="number">2</span>) {</span><br><span class="line">                right.<span class="built_in">push_front</span>(left.<span class="built_in">back</span>());</span><br><span class="line">                left.<span class="built_in">pop_back</span>();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    }</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; left;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; right;</span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode12-1</title>
    <url>/2023/12/01/leetcode12-1/</url>
    <content><![CDATA[<h2 id="leetcode每日一天12.1">leetcode每日一天（12.1）</h2>
<p><a class="link" href="https://leetcode.cn/problems/first-completely-painted-row-or-column/">2661. 找出叠涂元素<i class="fas fa-external-link-alt"></i></a></p>
<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>arr</code> 和一个 <code>m x n</code> 的整数 <strong>矩阵</strong> <code>mat</code> 。<code>arr</code> 和 <code>mat</code> 都包含范围 <code>[1，m * n]</code> 内的 <strong>所有</strong> 整数。</p>
<p>从下标 <code>0</code> 开始遍历 <code>arr</code> 中的每个下标 <code>i</code> ，并将包含整数 <code>arr[i]</code> 的 <code>mat</code> 单元格涂色。</p>
<p>请你找出 <code>arr</code> 中在 <code>mat</code> 的某一行或某一列上都被涂色且下标最小的元素，并返回其下标 <code>i</code> 。</p>
<p><strong>示例 1：</strong></p>
<p><img src="/2023/12/01/leetcode12-1/leetcode12-1\grid1.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [1,3,4,2], mat = [[1,4],[2,3]]</span><br><span class="line">输出：2</span><br><span class="line">解释：遍历如上图所示，arr[2] 在矩阵中的第一行或第二列上都被涂色。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<p><img src="/2023/12/01/leetcode12-1/leetcode12-1\grid2.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [2,8,7,4,1,3,5,6,9], mat = [[3,2,5],[1,4,6],[8,7,9]]</span><br><span class="line">输出：3</span><br><span class="line">解释：遍历如上图所示，arr[3] 在矩阵中的第二列上都被涂色。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>m == mat.length</code></li>
<li><code>n = mat[i].length</code></li>
<li><code>arr.length == m * n</code></li>
<li><code>1 &lt;= m, n &lt;= 105</code></li>
<li><code>1 &lt;= m * n &lt;= 105</code></li>
<li><code>1 &lt;= arr[i], mat[r][c] &lt;= m * n</code></li>
<li><code>arr</code> 中的所有整数 <strong>互不相同</strong></li>
<li><code>mat</code> 中的所有整数 <strong>互不相同</strong></li>
</ul>
<h2 id="解答">解答</h2>
<h6 id="思想">思想：</h6>
<p>由于矩阵 <code>mat</code> 中每一个元素都不同，并且都在数组 <code>arr</code> 中，所以首先我们用一个哈希表来存储 <code>mat</code> 中每一个元素的位置信息（即行列信息）。然后用一个长度为 <code>n</code> 的数组 <code>rowCnt</code> 来表示每一行中已经被涂色的个数，用一个长度为 <code>m</code> 的数组 <code>colCnt</code> 来表示每一列中已经被涂色的个数，其中若出现某一行 <code>i</code> 有<code>rowCnt[i]=m</code> 或者某一列 <code>j</code> 有 <code>colCnt[j]=n</code>，则表示第 <code>i</code> 行或 <code>j</code> 列已被全部涂色。 接着我们遍历数组 <code>arr</code>，对于遍历到的 <code>arr[i]</code>，从哈希表中得到该元素的行列信息，并更新数组 <code>rowCnt</code> 和 <code>colCnt</code>，如果出现某一行或某一列被全部涂色，则返回该元素的下标 <code>i</code>。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstCompleteIndex</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat)</span> </span>{</span><br><span class="line">        <span class="type">int</span> m=mat.<span class="built_in">size</span>(),n=mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> len = m*n;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">row</span><span class="params">(m+<span class="number">1</span>,<span class="number">0</span>)</span>,<span class="title">col</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        map&lt;<span class="type">int</span>,pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; poj;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++){</span><br><span class="line">                <span class="comment">// cout&lt;&lt;mat[i][j]&lt;&lt;":"&lt;&lt;i&lt;&lt;" "&lt;&lt;j&lt;&lt;endl;</span></span><br><span class="line">                pair&lt;<span class="type">int</span>,pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; <span class="built_in">p</span>(mat[i][j],<span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;(i,j));</span><br><span class="line">                poj.<span class="built_in">insert</span>(p);</span><br><span class="line">            }</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">            row[poj[arr[i]].first]++;</span><br><span class="line">            col[poj[arr[i]].second]++;</span><br><span class="line">            cout&lt;&lt;arr[i]&lt;&lt;<span class="string">":"</span>&lt;&lt;poj[arr[i]].first&lt;&lt;<span class="string">" "</span>&lt;&lt;poj[arr[i]].second&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">if</span>(row[poj[arr[i]].first]==n||col[poj[arr[i]].second]==m)</span><br><span class="line">                <span class="keyword">return</span> i;                </span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode12-2</title>
    <url>/2023/12/02/leetcode12-2/</url>
    <content><![CDATA[<h2 id="leetcode每日一天12.2">leetcode每日一天（12.2）</h2>
<ul>
<li><p>车上最初有 <code>capacity</code> 个空座位。车 <strong>只能</strong> 向一个方向行驶（也就是说，<strong>不允许掉头或改变方向</strong>）</p>
<p>给定整数 <code>capacity</code> 和一个数组 <code>trips</code> , <code>trip[i] = [numPassengersi, fromi, toi]</code> 表示第 <code>i</code> 次旅行有 <code>numPassengersi</code> 乘客，接他们和放他们的位置分别是 <code>fromi</code> 和 <code>toi</code> 。这些位置是从汽车的初始位置向东的公里数。</p>
<p>当且仅当你可以在所有给定的行程中接送所有乘客时，返回 <code>true</code>，否则请返回 <code>false</code>。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：trips = [[2,1,5],[3,3,7]], capacity = 4</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：trips = [[2,1,5],[3,3,7]], capacity = 5</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= trips.length &lt;= 1000</code></li>
<li><code>trips[i].length == 3</code></li>
<li><code>1 &lt;= numPassengersi &lt;= 100</code></li>
<li><code>0 &lt;= fromi &lt; toi &lt;= 10^5</code></li>
</ul></li>
</ul>
<h2 id="解答">解答</h2>
<h6 id="思想">思想：</h6>
<p><strong>思想一</strong></p>
<p>模拟一个<code>旅程数组</code>但时间复杂度为<code>O(n^2)</code>在此题中未超时，需要<code>注意</code>的是：需要规划好下车和上车时间点的时间节点，在此题解中规划下车前一时间就已经下车，参考案例为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：trips = [[2,1,5],[3,5,7]], capacity = 3</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">add</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cap,<span class="type">int</span> value,<span class="type">int</span> from,<span class="type">int</span> to,<span class="type">int</span> capacity)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=from;i&lt;to;i++){</span><br><span class="line">            cap[i] += value;</span><br><span class="line">            <span class="keyword">if</span>(cap[i]&gt;capacity)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">carPooling</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; trips, <span class="type">int</span> capacity)</span> </span>{</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cap</span><span class="params">(<span class="number">1000</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> len = trips.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">add</span>(cap,trips[i][<span class="number">0</span>],trips[i][<span class="number">1</span>],trips[i][<span class="number">2</span>],capacity))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<p>思想二：</p>
<h4 id="差分数组">差分数组</h4>
<p><strong>思路与算法</strong></p>
<p>由于车的位置范围<code>[0,1000]</code>,那么我们可以创建一个数组存放在某一时刻车上人的数量，与思路一不同点在于我们重新创建了一个数组，该数组表示在每一时刻上下乘客的人数，因此我们可以表示在某一时刻车上人的数量的数组从头模拟一遍，即该时刻加上上一时刻的乘客数量和在一时刻人员的变动。</p>
<p>时间复杂度为<code>O(n)</code></p>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution {</span><br><span class="line">public:</span><br><span class="line">    bool carPooling(vector&lt;vector&lt;int&gt;&gt;&amp; trips, int capacity) {</span><br><span class="line">        vector&lt;int&gt; dp(1005,0),arr(1005,0);</span><br><span class="line">        int len = trips.size();</span><br><span class="line">        int maxLen = 0;</span><br><span class="line">        for(int i=0;i&lt;len;i++){</span><br><span class="line">            dp[trips[i][1]]+=trips[i][0];</span><br><span class="line">            dp[trips[i][2]]-=trips[i][0];</span><br><span class="line">            maxLen = max(maxLen,trips[i][2]);</span><br><span class="line">        }</span><br><span class="line">        arr[0] = dp[0];</span><br><span class="line">        cout&lt;&lt; arr[0] &lt;&lt;" ";</span><br><span class="line">        if(arr[0]&gt;capacity)</span><br><span class="line">            return false;</span><br><span class="line">        for(int i=1;i&lt;=maxLen;i++){</span><br><span class="line">            arr[i] += arr[i-1] + dp[i];</span><br><span class="line">            cout&lt;&lt;arr[i]&lt;&lt;" ";</span><br><span class="line">            if(arr[i]&gt;capacity)</span><br><span class="line">                return false;</span><br><span class="line">        }</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        return true;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode12-3</title>
    <url>/2023/12/03/leetcode12-3/</url>
    <content><![CDATA[<h2 id="leetcode每日一天12.3">leetcode每日一天（12.3）</h2>
<p><a class="link" href="https://leetcode.cn/problems/maximum-points-you-can-obtain-from-cards/">1423. 可获得的最大点数<i class="fas fa-external-link-alt"></i></a></p>
<p>几张卡牌 <strong>排成一行</strong>，每张卡牌都有一个对应的点数。点数由整数数组 <code>cardPoints</code> 给出。</p>
<p>每次行动，你可以从行的开头或者末尾拿一张卡牌，最终你必须正好拿 <code>k</code> 张卡牌。</p>
<p>你的点数就是你拿到手中的所有卡牌的点数之和。</p>
<p>给你一个整数数组 <code>cardPoints</code> 和整数 <code>k</code>，请你返回可以获得的最大点数。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：cardPoints = [1,2,3,4,5,6,1], k = 3</span><br><span class="line">输出：12</span><br><span class="line">解释：第一次行动，不管拿哪张牌，你的点数总是 1 。但是，先拿最右边的卡牌将会最大化你的可获得点数。最优策略是拿右边的三张牌，最终点数为 1 + 6 + 5 = 12 。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：cardPoints = [2,2,2], k = 2</span><br><span class="line">输出：4</span><br><span class="line">解释：无论你拿起哪两张卡牌，可获得的点数总是 4 。</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：cardPoints = [9,7,7,9,7,7,9], k = 7</span><br><span class="line">输出：55</span><br><span class="line">解释：你必须拿起所有卡牌，可以获得的点数为所有卡牌的点数之和。</span><br></pre></td></tr></table></figure>
<p><strong>示例 4：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：cardPoints = [1,1000,1], k = 1</span><br><span class="line">输出：1</span><br><span class="line">解释：你无法拿到中间那张卡牌，所以可以获得的最大点数为 1 。 </span><br></pre></td></tr></table></figure>
<p><strong>示例 5：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：cardPoints = [1,79,80,1,1,1,200,1], k = 3</span><br><span class="line">输出：202</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= cardPoints.length &lt;= 10^5</code></li>
<li><code>1 &lt;= cardPoints[i] &lt;= 10^4</code></li>
<li><code>1 &lt;= k &lt;= cardPoints.length</code></li>
</ul>
<h2 id="解答">解答</h2>
<h6 id="思想">思想：</h6>
<p><strong>注意：</strong> dfs的思路实现没有问题，但是时间复杂度是<code>O(K!)</code>会超时！</p>
<p><strong>正确思路</strong>：</p>
<p>模拟一个<code>滑动窗口</code>在左侧先遍历完一个从下标<code>0</code>到<code>k</code>的数组，然后在从右侧依次出左侧最右元素，入栈右侧最左元素。依次模拟完则得到全部结果答案，最后输出最大结果值即可。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// void dfs(int left,int right,vector&lt;int&gt;&amp; cardPoints,int k,int value,int index){</span></span><br><span class="line">    <span class="comment">//     if(index==k){</span></span><br><span class="line">    <span class="comment">//         maxNum = max(value,maxNum);</span></span><br><span class="line">    <span class="comment">//         return;</span></span><br><span class="line">    <span class="comment">//     }</span></span><br><span class="line">    <span class="comment">//     dfs(left+1,right,cardPoints,k,value+cardPoints[left],index+1);</span></span><br><span class="line">    <span class="comment">//     dfs(left,right-1,cardPoints,k,value+cardPoints[right],index+1);</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxScore</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cardPoints, <span class="type">int</span> k)</span> </span>{</span><br><span class="line">        <span class="type">int</span> len = cardPoints.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">            num+=cardPoints[i];</span><br><span class="line">        <span class="type">int</span> maxNum = num;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++){</span><br><span class="line">            num = num - cardPoints[k-i<span class="number">-1</span>] + cardPoints[len-i<span class="number">-1</span>];</span><br><span class="line">            maxNum = <span class="built_in">max</span>(maxNum,num); </span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> maxNum;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode12-4</title>
    <url>/2023/12/04/leetcode12-4/</url>
    <content><![CDATA[<h2 id="leetcode每日一天12.4">leetcode每日一天（12.4）</h2>
<p><a class="link" href="https://leetcode.cn/problems/binary-search-tree-to-greater-sum-tree/">1038. 从二叉搜索树到更大和树<i class="fas fa-external-link-alt"></i></a></p>
<p>给定一个二叉搜索树 <code>root</code> (BST)，请将它的每个节点的值替换成树中大于或者等于该节点值的所有节点值之和。</p>
<p>提醒一下， <em>二叉搜索树</em> 满足下列约束条件：</p>
<ul>
<li>节点的左子树仅包含键 <strong>小于</strong> 节点键的节点。</li>
<li>节点的右子树仅包含键 <strong>大于</strong> 节点键的节点。</li>
<li>左右子树也必须是二叉搜索树。</li>
</ul>
<p><strong>示例 1：</strong></p>
<p><img src="/2023/12/04/leetcode12-4/leetcode12-4\tree.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]</span><br><span class="line">输出：[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [0,null,1]</span><br><span class="line">输出：[1,null,1]</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li>树中的节点数在 <code>[1, 100]</code> 范围内。</li>
<li><code>0 &lt;= Node.val &lt;= 100</code></li>
<li>树中的所有值均 <strong>不重复</strong> 。</li>
</ul>
<h2 id="解答">解答</h2>
<h6 id="思想">思想：</h6>
<ul>
<li><p>主要考点在于<code>二叉搜索树</code>的遍历问题，主要使用递归完成二叉搜索树的递归。并且考察了<code>二叉搜索树</code>的基本特征。-</p></li>
<li><p>其次首先定义一个变量，保存已经遍历到的节点，将变量更新到正在遍历的节点即可。</p></li>
</ul>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}</span></span><br><span class="line"><span class="comment"> * };</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> value=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(TreeNode *root)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right!=<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="built_in">print</span>(root-&gt;right);</span><br><span class="line">        cout&lt;&lt;root-&gt;val&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        root-&gt;val += value;</span><br><span class="line">        value = root-&gt;val;</span><br><span class="line">        cout&lt;&lt;root-&gt;val&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left!=<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="built_in">print</span>(root-&gt;left);</span><br><span class="line">    }</span><br><span class="line">    <span class="function">TreeNode* <span class="title">bstToGst</span><span class="params">(TreeNode* root)</span> </span>{</span><br><span class="line">        <span class="built_in">print</span>(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode12-5</title>
    <url>/2023/12/05/leetcode12-5/</url>
    <content><![CDATA[<h2 id="leetcode每日一天12.5">leetcode每日一天（12.5）</h2>
<p><a class="link" href="https://leetcode.cn/problems/minimum-fuel-cost-to-report-to-the-capital/">2477. 到达首都的最少油耗<i class="fas fa-external-link-alt"></i></a></p>
<p>给你一棵 <code>n</code> 个节点的树（一个无向、连通、无环图），每个节点表示一个城市，编号从 <code>0</code> 到 <code>n - 1</code> ，且恰好有 <code>n - 1</code> 条路。<code>0</code> 是首都。给你一个二维整数数组 <code>roads</code> ，其中 <code>roads[i] = [ai, bi]</code> ，表示城市 <code>ai</code> 和 <code>bi</code> 之间有一条 <strong>双向路</strong> 。</p>
<p>每个城市里有一个代表，他们都要去首都参加一个会议。</p>
<p>每座城市里有一辆车。给你一个整数 <code>seats</code> 表示每辆车里面座位的数目。</p>
<p>城市里的代表可以选择乘坐所在城市的车，或者乘坐其他城市的车。相邻城市之间一辆车的油耗是一升汽油。</p>
<p>请你返回到达首都最少需要多少升汽油。</p>
<p><strong>示例 1：</strong></p>
<p><img src="/2023/12/05/leetcode12-5/leetcode12-5\1.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：roads = [[0,1],[0,2],[0,3]], seats = 5</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">- 代表 1 直接到达首都，消耗 1 升汽油。</span><br><span class="line">- 代表 2 直接到达首都，消耗 1 升汽油。</span><br><span class="line">- 代表 3 直接到达首都，消耗 1 升汽油。</span><br><span class="line">最少消耗 3 升汽油。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<p><img src="/2023/12/05/leetcode12-5/leetcode12-5\2.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：roads = [[3,1],[3,2],[1,0],[0,4],[0,5],[4,6]], seats = 2</span><br><span class="line">输出：7</span><br><span class="line">解释：</span><br><span class="line">- 代表 2 到达城市 3 ，消耗 1 升汽油。</span><br><span class="line">- 代表 2 和代表 3 一起到达城市 1 ，消耗 1 升汽油。</span><br><span class="line">- 代表 2 和代表 3 一起到达首都，消耗 1 升汽油。</span><br><span class="line">- 代表 1 直接到达首都，消耗 1 升汽油。</span><br><span class="line">- 代表 5 直接到达首都，消耗 1 升汽油。</span><br><span class="line">- 代表 6 到达城市 4 ，消耗 1 升汽油。</span><br><span class="line">- 代表 4 和代表 6 一起到达首都，消耗 1 升汽油。</span><br><span class="line">最少消耗 7 升汽油。</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<p><img src="/2023/12/05/leetcode12-5/leetcode12-5\3.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：roads = [], seats = 1</span><br><span class="line">输出：0</span><br><span class="line">解释：没有代表需要从别的城市到达首都。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><p><code>1 &lt;= n &lt;= 105</code></p></li>
<li><p><code>roads.length == n - 1</code></p></li>
<li><p><code>roads[i].length == 2</code></p></li>
<li><p><code>0 &lt;= ai, bi &lt; n</code></p></li>
<li><p><code>ai != bi</code></p></li>
<li><p><code>roads</code> 表示一棵合法的树。</p></li>
<li><p><code>1 &lt;= seats &lt;= 105</code></p>
<hr></li>
</ul>
<h2 id="解答">解答</h2>
<h6 id="思想">思想：</h6>
<h6 id="贪心-深度优先搜索">贪心 + 深度优先搜索</h6>
<h3 id="思路与算法">思路与算法</h3>
<p>题目等价于给出了一棵以节点 000 为根结点的树，并且初始树上的每一个节点上都有一个人，现在所有人都需要通过「车子」向结点 0 移动。</p>
<p>对于某一个节点 x，x ≠ 0，其父节点为 y。因为以节点 x为根结点的子树上的人都需要通过边 x → y 向节点 000 移动，所以为了使这条边上的「车子」利用率最高，我们贪心地让 xxx 的全部子节点上的人到了节点 xxx 后再一起坐车向上移动，我们不妨设以节点 xxx 为根节点的子树大小为 <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.909ex;" xmlns="http://www.w3.org/2000/svg" width="7.803ex" height="4.83ex" role="img" focusable="false" viewbox="0 -1291 3449 2134.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2308" d="M174 734Q178 746 190 750H298H369Q400 750 411 747T422 730T411 713T372 709Q365 709 345 709T310 710H214V-235Q206 -248 196 -250Q192 -250 189 -249T184 -247T180 -244T178 -241T176 -237T174 -234V734Z"/></g><g data-mml-node="mfrac" transform="translate(444,0)"><g data-mml-node="mtext" transform="translate(220,676)"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"/><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(394,0)"/><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(838,0)"/><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1338,0)"/><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(1727,0)"/></g><g data-mml-node="msub" transform="translate(342.3,-686)"><g data-mml-node="mtext"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"/><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(444,0)"/><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1000,0)"/></g><g data-mml-node="mi" transform="translate(1422,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g></g><rect width="2321" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(3005,0)"><path data-c="2309" d="M21 717T21 730T32 746T75 750H147H256Q266 742 269 735V-235Q262 -248 251 -250Q247 -250 244 -249T239 -247T235 -244T233 -241T231 -237T229 -234V710H133Q119 710 99 710T71 709Q43 709 32 713Z"/></g></g></g></svg></mjx-container></span> ，其中 seats 为一辆车的给定座位数。那么我们可以通过从根结点 000 往下进行「深度优先搜索」，每一条边上「车子」的数目即为该条边上汽油的开销，统计全部边上汽油的开销即为最终答案。</p>
<p>从后遍历，然后回溯即可。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">minimumFuelCost</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; roads, <span class="type">int</span> seats)</span> </span>{</span><br><span class="line">        <span class="type">int</span> n = roads.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">g</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : roads) {</span><br><span class="line">            g[e[<span class="number">0</span>]].<span class="built_in">push_back</span>(e[<span class="number">1</span>]);</span><br><span class="line">            g[e[<span class="number">1</span>]].<span class="built_in">push_back</span>(e[<span class="number">0</span>]);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> cur, <span class="type">int</span> fa) -&gt; <span class="type">int</span> {</span><br><span class="line">            <span class="type">int</span> peopleSum = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> ne : g[cur]) {</span><br><span class="line">                <span class="keyword">if</span> (ne != fa) {</span><br><span class="line">                    <span class="type">int</span> peopleCnt = <span class="built_in">dfs</span>(ne, cur);</span><br><span class="line">                    peopleSum += peopleCnt;</span><br><span class="line">                    res += (peopleCnt + seats - <span class="number">1</span>) / seats;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> peopleSum;</span><br><span class="line">        };</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode12-6</title>
    <url>/2023/12/06/leetcode12-6/</url>
    <content><![CDATA[<h2 id="leetcode每日一天12.6">leetcode每日一天（12.6）</h2>
<p><a class="link" href="https://leetcode.cn/problems/minimize-the-total-price-of-the-trips/">2646. 最小化旅行的价格总和<i class="fas fa-external-link-alt"></i></a></p>
<p>现有一棵无向、无根的树，树中有 <code>n</code> 个节点，按从 <code>0</code> 到 <code>n - 1</code> 编号。给你一个整数 <code>n</code> 和一个长度为 <code>n - 1</code> 的二维整数数组 <code>edges</code> ，其中 <code>edges[i] = [ai, bi]</code> 表示树中节点 <code>ai</code> 和 <code>bi</code> 之间存在一条边。</p>
<p>每个节点都关联一个价格。给你一个整数数组 <code>price</code> ，其中 <code>price[i]</code> 是第 <code>i</code> 个节点的价格。</p>
<p>给定路径的 <strong>价格总和</strong> 是该路径上所有节点的价格之和。</p>
<p>另给你一个二维整数数组 <code>trips</code> ，其中 <code>trips[i] = [starti, endi]</code> 表示您从节点 <code>starti</code> 开始第 <code>i</code> 次旅行，并通过任何你喜欢的路径前往节点 <code>endi</code> 。</p>
<p>在执行第一次旅行之前，你可以选择一些 <strong>非相邻节点</strong> 并将价格减半。</p>
<p>返回执行所有旅行的最小价格总和。</p>
<p><strong>示例 1：</strong></p>
<p><img src="/leetcode12-6/diagram2.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 4, edges = [[0,1],[1,2],[1,3]], price = [2,2,10,6], trips = [[0,3],[2,1],[2,3]]</span><br><span class="line">输出：23</span><br><span class="line">解释：</span><br><span class="line">上图表示将节点 2 视为根之后的树结构。第一个图表示初始树，第二个图表示选择节点 0 、2 和 3 并使其价格减半后的树。</span><br><span class="line">第 1 次旅行，选择路径 [0,1,3] 。路径的价格总和为 1 + 2 + 3 = 6 。</span><br><span class="line">第 2 次旅行，选择路径 [2,1] 。路径的价格总和为 2 + 5 = 7 。</span><br><span class="line">第 3 次旅行，选择路径 [2,1,3] 。路径的价格总和为 5 + 2 + 3 = 10 。</span><br><span class="line">所有旅行的价格总和为 6 + 7 + 10 = 23 。可以证明，23 是可以实现的最小答案。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<p><img src="/leetcode12-6/diagram3.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 2, edges = [[0,1]], price = [2,2], trips = [[0,0]]</span><br><span class="line">输出：1</span><br><span class="line">解释：</span><br><span class="line">上图表示将节点 0 视为根之后的树结构。第一个图表示初始树，第二个图表示选择节点 0 并使其价格减半后的树。 </span><br><span class="line">第 1 次旅行，选择路径 [0] 。路径的价格总和为 1 。 </span><br><span class="line">所有旅行的价格总和为 1 。可以证明，1 是可以实现的最小答案。</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 50</code></li>
<li><code>edges.length == n - 1</code></li>
<li><code>0 &lt;= ai, bi &lt;= n - 1</code></li>
<li><code>edges</code> 表示一棵有效的树</li>
<li><code>price.length == n</code></li>
<li><code>price[i]</code> 是一个偶数</li>
<li><code>1 &lt;= price[i] &lt;= 1000</code></li>
<li><code>1 &lt;= trips.length &lt;= 100</code></li>
<li><code>0 &lt;= starti, endi &lt;= n - 1</code></li>
</ul>
<hr></li>
</ul>
<h2 id="解答">解答</h2>
<h6 id="思想">思想：</h6>
<h2 id="方法一深度优先搜索-动态规划">方法一：深度优先搜索 + 动态规划</h2>
<p>为了使旅行的价格总和最小，每次旅行的路径必定是最短路径。根据题意，每次旅行 <code>trips[i]</code> 都是独立的，因此我们可以依次开始旅行 <code>trips[i]</code>，并且用数组 <code>count</code> 记录节点在旅行中被经过的次数。记旅行 <code>trips[i]</code> 的起点和终点分别为 <code>start_i</code> 和 <code>end_i</code>，那么我们以 <code>start_i</code> 为树的根节点，对树进行深度优先搜索，对于如果节点 <code>node</code> 的子树（包含它本身）包含节点 <code>end_i</code>，那么我们将 <code>count[node]</code> 加一。</p>
<p>获取节点在所有旅行中被经过的次数 <code>count</code> 后，执行所有旅行的价格总和的计算为： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.018ex;" xmlns="http://www.w3.org/2000/svg" width="41.748ex" height="3.167ex" role="img" focusable="false" viewbox="0 -950 18452.7 1400"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z"/><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(556,0)"/><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(948,0)"/><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(1226,0)"/><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1670,0)"/><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z" transform="translate(2114,0)"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(2836,0)"/><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(3336,0)"/><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(3725,0)"/><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(4225,0)"/></g><g data-mml-node="mo" transform="translate(4780.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(5836.6,0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"/></g><g data-mml-node="mtext" transform="translate(7447.2,0)"><path data-c="70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z"/><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(556,0)"/><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(948,0)"/><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(1226,0)"/><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1670,0)"/></g><g data-mml-node="mo" transform="translate(9561.2,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mtext" transform="translate(9839.2,0)"><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(556,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1056,0)"/><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1612,0)"/></g><g data-mml-node="mo" transform="translate(11895.2,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(12395.4,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"/></g><g data-mml-node="mtext" transform="translate(13395.7,0)"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(444,0)"/><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(944,0)"/><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1500,0)"/><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(2056,0)"/></g><g data-mml-node="mo" transform="translate(15840.7,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mtext" transform="translate(16118.7,0)"><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(556,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1056,0)"/><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1612,0)"/></g><g data-mml-node="mo" transform="translate(18174.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g></g></g></svg></mjx-container></span></p>
<p>以节点 0 为树的根节点，令 <code>dp[node][0]</code> 和 <code>dp[node][1]</code> 为以 <code>node</code> 为根节点的子树，分别对 <code>node</code> 的价格保持和减半时的最小价格总和，那么转移方程为</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -5.145ex;" xmlns="http://www.w3.org/2000/svg" width="52.735ex" height="11.421ex" role="img" focusable="false" viewbox="0 -2774.1 23308.7 5048.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,1824.1)"><g data-mml-node="mtd"><g data-mml-node="mtext"><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"/><path data-c="70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z" transform="translate(556,0)"/><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" transform="translate(1112,0)"/><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1390,0)"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(1946,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(2446,0)"/><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(3002,0)"/><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" transform="translate(3446,0)"/><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" transform="translate(3724,0)"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(4002,0)"/><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" transform="translate(4502,0)"/></g></g><g data-mml-node="mtd" transform="translate(4780,0)"><g data-mml-node="mi"/><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="munder" transform="translate(1333.6,0)"><g data-mml-node="mo" transform="translate(1511.4,0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"/></g><g data-mml-node="TeXAtom" transform="translate(0,-1147.3) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mtext"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"/><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(444,0)"/><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(1000,0)"/><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(1278,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1556,0)"/></g><g data-mml-node="mo" transform="translate(2112,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="mi" transform="translate(2779,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(3483,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mtext" transform="translate(3872,0)"><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(556,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1056,0)"/><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1612,0)"/></g><g data-mml-node="mo" transform="translate(5928,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g><g data-mml-node="mo" transform="translate(5967,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(833,0)"/><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1111,0)"/></g><g data-mml-node="mo" transform="translate(7634,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mtext" transform="translate(8023,0)"><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"/><path data-c="70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z" transform="translate(556,0)"/><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" transform="translate(1112,0)"/><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(1390,0)"/><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1834,0)"/><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(2390,0)"/><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(2668,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(2946,0)"/><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" transform="translate(3502,0)"/><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" transform="translate(3780,0)"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(4058,0)"/><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" transform="translate(4558,0)"/></g><g data-mml-node="mo" transform="translate(12859,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mtext" transform="translate(13303.7,0)"><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"/><path data-c="70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z" transform="translate(556,0)"/><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" transform="translate(1112,0)"/><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(1390,0)"/><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1834,0)"/><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(2390,0)"/><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(2668,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(2946,0)"/><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" transform="translate(3502,0)"/><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" transform="translate(3780,0)"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(4058,0)"/><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" transform="translate(4558,0)"/></g><g data-mml-node="mo" transform="translate(18139.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g><g data-mml-node="mtr" transform="translate(0,-850)"><g data-mml-node="mtd"><g data-mml-node="mtext"><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"/><path data-c="70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z" transform="translate(556,0)"/><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" transform="translate(1112,0)"/><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1390,0)"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(1946,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(2446,0)"/><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(3002,0)"/><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" transform="translate(3446,0)"/><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" transform="translate(3724,0)"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(4002,0)"/><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" transform="translate(4502,0)"/></g></g><g data-mml-node="mtd" transform="translate(4780,0)"><g data-mml-node="mi"/><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="munder" transform="translate(1333.6,0)"><g data-mml-node="mo" transform="translate(1511.4,0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"/></g><g data-mml-node="TeXAtom" transform="translate(0,-1147.3) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mtext"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"/><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(444,0)"/><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(1000,0)"/><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(1278,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1556,0)"/></g><g data-mml-node="mo" transform="translate(2112,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="mi" transform="translate(2779,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(3483,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mtext" transform="translate(3872,0)"><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(556,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1056,0)"/><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1612,0)"/></g><g data-mml-node="mo" transform="translate(5928,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g><g data-mml-node="mtext" transform="translate(5967,0)"><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"/><path data-c="70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z" transform="translate(556,0)"/><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" transform="translate(1112,0)"/><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(1390,0)"/><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1834,0)"/><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(2390,0)"/><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(2668,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(2946,0)"/><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" transform="translate(3502,0)"/><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" transform="translate(3780,0)"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(4058,0)"/><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" transform="translate(4558,0)"/></g></g></g></g></g></g></svg></mjx-container></span></p>
<p>其中 <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.005ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3538 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mtext" transform="translate(1093,0)"><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(556,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1056,0)"/><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1612,0)"/></g><g data-mml-node="mo" transform="translate(3149,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></span> 表示节点 <code>node</code> 的子节点集合，根据转移方程对树进行深度优先搜索， <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="28.167ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 12449.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(833,0)"/><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1111,0)"/></g><g data-mml-node="mo" transform="translate(1667,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mtext" transform="translate(2056,0)"><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"/><path data-c="70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z" transform="translate(556,0)"/><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" transform="translate(1112,0)"/><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1390,0)"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(1946,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(2446,0)"/><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(3002,0)"/><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" transform="translate(3446,0)"/><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" transform="translate(3724,0)"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(4002,0)"/><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" transform="translate(4502,0)"/></g><g data-mml-node="mo" transform="translate(6836,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mtext" transform="translate(7280.7,0)"><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"/><path data-c="70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z" transform="translate(556,0)"/><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" transform="translate(1112,0)"/><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1390,0)"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(1946,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(2446,0)"/><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(3002,0)"/><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" transform="translate(3446,0)"/><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" transform="translate(3724,0)"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(4002,0)"/><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" transform="translate(4502,0)"/></g><g data-mml-node="mo" transform="translate(12060.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></span> 即为所求。</p>
<p>复杂度分析</p>
<p>时间复杂度：<code>O(mn)</code>，其中 <code>n</code>是节点数目，<code>m</code>是数组 <code>trips</code> 的长度。计算<code>count</code> 需要 <code>O(mn)</code>。</p>
<p>空间复杂度：<code>O(n)</code>。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumTotalPrice</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges, vector&lt;<span class="type">int</span>&gt;&amp; price, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; trips)</span>    </span>{</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">next</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;edge : edges) {</span><br><span class="line">            next[edge[<span class="number">0</span>]].<span class="built_in">push_back</span>(edge[<span class="number">1</span>]);</span><br><span class="line">            next[edge[<span class="number">1</span>]].<span class="built_in">push_back</span>(edge[<span class="number">0</span>]);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count</span><span class="params">(n)</span></span>;</span><br><span class="line">        function&lt;<span class="type">bool</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> node, <span class="type">int</span> parent, <span class="type">int</span> end) -&gt; <span class="type">bool</span> {</span><br><span class="line">            <span class="keyword">if</span> (node == end) {</span><br><span class="line">                count[node]++;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> child : next[node]) {</span><br><span class="line">                <span class="keyword">if</span> (child == parent) {</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">dfs</span>(child, node, end)) {</span><br><span class="line">                    count[node]++;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;trip: trips) {</span><br><span class="line">            <span class="built_in">dfs</span>(trip[<span class="number">0</span>], <span class="number">-1</span>, trip[<span class="number">1</span>]);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        function&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="type">int</span>, <span class="type">int</span>)&gt; dp = [&amp;](<span class="type">int</span> node, <span class="type">int</span> parent) -&gt; pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; {</span><br><span class="line">            pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; res = {</span><br><span class="line">                price[node] * count[node], price[node] * count[node] / <span class="number">2</span></span><br><span class="line">            };</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> child : next[node]) {</span><br><span class="line">                <span class="keyword">if</span> (child == parent) {</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">auto</span> [x, y] = <span class="built_in">dp</span>(child, node);</span><br><span class="line">                res.first += <span class="built_in">min</span>(x, y); <span class="comment">// node 没有减半，因此可以取子树的两种情况的最小值</span></span><br><span class="line">                res.second += x; <span class="comment">// node 减半，只能取子树没有减半的情况</span></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">auto</span> [x, y] = <span class="built_in">dp</span>(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(x, y);</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode12-7</title>
    <url>/2023/12/07/leetcode12-7/</url>
    <content><![CDATA[<h2 id="leetcode每日一天12.6">leetcode每日一天（12.6）</h2>
<p><a class="link" href="https://leetcode.cn/problems/reorder-routes-to-make-all-paths-lead-to-the-city-zero/">1466. 重新规划路线<i class="fas fa-external-link-alt"></i></a></p>
<p><code>n</code> 座城市，从 <code>0</code> 到 <code>n-1</code> 编号，其间共有 <code>n-1</code> 条路线。因此，要想在两座不同城市之间旅行只有唯一一条路线可供选择（路线网形成一颗树）。去年，交通运输部决定重新规划路线，以改变交通拥堵的状况。</p>
<p>路线用 <code>connections</code> 表示，其中 <code>connections[i] = [a, b]</code> 表示从城市 <code>a</code> 到 <code>b</code> 的一条有向路线。</p>
<p>今年，城市 0 将会举办一场大型比赛，很多游客都想前往城市 0 。</p>
<p>请你帮助重新规划路线方向，使每个城市都可以访问城市 0 。返回需要变更方向的最小路线数。</p>
<p>题目数据 <strong>保证</strong> 每个城市在重新规划路线方向后都能到达城市 0 。</p>
<p><strong>示例 1：</strong></p>
<p><img src="/leetcode12-7/sample_1_1819.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]</span><br><span class="line">输出：3</span><br><span class="line">解释：更改以红色显示的路线的方向，使每个城市都可以到达城市 0 。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<p><img src="/leetcode12-7/sample_2_1819.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]</span><br><span class="line">输出：2</span><br><span class="line">解释：更改以红色显示的路线的方向，使每个城市都可以到达城市 0 。</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 3, connections = [[1,0],[2,0]]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>2 &lt;= n &lt;= 5 * 10^4</code></li>
<li><code>connections.length == n-1</code></li>
<li><code>connections[i].length == 2</code></li>
<li><code>0 &lt;= connections[i][0], connections[i][1] &lt;= n-1</code></li>
<li><code>connections[i][0] != connections[i][1]</code></li>
</ul>
<hr>
<h2 id="解答">解答</h2>
<h6 id="思想">思想：</h6>
<p>该题较为简单，只用考虑到是否根节点遍历到所有节点即可，如果是反方向则需要重新规划路线，如果不是则继续搜索。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minReorder</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; connections)</span> </span>{</span><br><span class="line">        vector&lt;vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;&gt;  <span class="built_in">v</span>(n);</span><br><span class="line">        <span class="type">int</span> len = connections.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">            v[connections[i][<span class="number">0</span>]].<span class="built_in">push_back</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;(connections[i][<span class="number">1</span>],<span class="number">1</span>));</span><br><span class="line">            v[connections[i][<span class="number">1</span>]].<span class="built_in">push_back</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;(connections[i][<span class="number">0</span>],<span class="number">0</span>));</span><br><span class="line">        }</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">vis</span><span class="params">(n,<span class="literal">false</span>)</span></span>;</span><br><span class="line">        vis[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()){</span><br><span class="line">            <span class="type">int</span> x = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> xlen = v[x].<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;xlen;i++){</span><br><span class="line">                pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; p = v[x][i];</span><br><span class="line">                <span class="keyword">if</span>(!vis[p.first]){</span><br><span class="line">                    q.<span class="built_in">push</span>(p.first);</span><br><span class="line">                    cout&lt;&lt;p.first&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">                    vis[p.first] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span>(p.second==<span class="number">1</span>){</span><br><span class="line">                        ans++;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }            </span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode12-8</title>
    <url>/2023/12/08/leetcode12-8/</url>
    <content><![CDATA[<h2 id="leetcode每日一天12.8">leetcode每日一天（12.8）</h2>
<p><a class="link" href="https://leetcode.cn/problems/maximum-earnings-from-taxi/">2008. 出租车的最大盈利<i class="fas fa-external-link-alt"></i></a></p>
<ul>
<li><p>你驾驶出租车行驶在一条有 <code>n</code> 个地点的路上。这 <code>n</code> 个地点从近到远编号为 <code>1</code> 到 <code>n</code> ，你想要从 <code>1</code> 开到 <code>n</code> ，通过接乘客订单盈利。你只能沿着编号递增的方向前进，不能改变方向。</p>
<p>乘客信息用一个下标从 <strong>0</strong> 开始的二维数组 <code>rides</code> 表示，其中 <code>rides[i] = [starti, endi, tipi]</code> 表示第 <code>i</code> 位乘客需要从地点 <code>starti</code> 前往 <code>endi</code> ，愿意支付 <code>tipi</code> 元的小费。</p>
<p><strong>每一位</strong> 你选择接单的乘客 <code>i</code> ，你可以 <strong>盈利</strong> <code>endi - starti + tipi</code> 元。你同时 <strong>最多</strong> 只能接一个订单。</p>
<p>给你 <code>n</code> 和 <code>rides</code> ，请你返回在最优接单方案下，你能盈利 <strong>最多</strong> 多少元。</p>
<p><strong>注意：</strong>你可以在一个地点放下一位乘客，并在同一个地点接上另一位乘客。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 5, rides = [[2,5,4],[1,5,1]]</span><br><span class="line">输出：7</span><br><span class="line">解释：我们可以接乘客 0 的订单，获得 5 - 2 + 4 = 7 元。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 20, rides = [[1,6,1],[3,10,2],[10,12,3],[11,12,2],[12,15,2],[13,18,1]]</span><br><span class="line">输出：20</span><br><span class="line">解释：我们可以接以下乘客的订单：</span><br><span class="line">- 将乘客 1 从地点 3 送往地点 10 ，获得 10 - 3 + 2 = 9 元。</span><br><span class="line">- 将乘客 2 从地点 10 送往地点 12 ，获得 12 - 10 + 3 = 5 元。</span><br><span class="line">- 将乘客 5 从地点 13 送往地点 18 ，获得 18 - 13 + 1 = 6 元。</span><br><span class="line">我们总共获得 9 + 5 + 6 = 20 元。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 105</code></li>
<li><code>1 &lt;= rides.length &lt;= 3 * 104</code></li>
<li><code>rides[i].length == 3</code></li>
<li><code>1 &lt;= starti &lt; endi &lt;= n</code></li>
<li><code>1 &lt;= tipi &lt;= 105</code></li>
</ul></li>
</ul>
<h2 id="解答">解答</h2>
<h2 id="方法一动态规划-二分查找">方法一：动态规划 + 二分查找</h2>
<p>将 rides 按照 end_i 从小到大进行排序，记 ( m ) 为 rides 的大小，dp}_{i+1} ) 表示只接区间 [0,i] 内的乘客的最大盈利，显然 {dp}_0 = 0 ，而对于 ( i )，有两种情况：</p>
<ol type="1">
<li><p>对第 ( i ) 位乘客接单，由于前面已经对 rides 进行排序，因此我们可以通过二分查找来找到满足 <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="13.104ex" height="2.236ex" role="img" focusable="false" viewbox="0 -694 5791.8 988.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mtext"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" transform="translate(466,0)"/><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z" transform="translate(1066,0)"/></g><g data-mml-node="mi" transform="translate(1619,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g><g data-mml-node="mo" transform="translate(2238.1,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="msub" transform="translate(3293.9,0)"><g data-mml-node="mtext"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" transform="translate(469,0)"/><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" transform="translate(830,0)"/><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" transform="translate(1359,0)"/><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" transform="translate(1810,0)"/></g><g data-mml-node="mi" transform="translate(2204,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container></span> 最大的 ( j )，那么</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.845ex;" xmlns="http://www.w3.org/2000/svg" width="33.029ex" height="2.415ex" role="img" focusable="false" viewbox="0 -694 14598.7 1067.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mtext"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" transform="translate(520,0)"/></g><g data-mml-node="TeXAtom" transform="translate(1056,-229.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mo" transform="translate(2531.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(3587.2,0)"><g data-mml-node="mtext"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" transform="translate(520,0)"/></g><g data-mml-node="mi" transform="translate(1056,-229.4) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g><g data-mml-node="mo" transform="translate(5206.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msub" transform="translate(6207,0)"><g data-mml-node="mtext"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" transform="translate(466,0)"/><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z" transform="translate(1066,0)"/></g><g data-mml-node="mi" transform="translate(1619,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(8342.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(9342.4,0)"><g data-mml-node="mtext"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" transform="translate(469,0)"/><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" transform="translate(830,0)"/><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" transform="translate(1359,0)"/><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" transform="translate(1810,0)"/></g><g data-mml-node="mi" transform="translate(2204,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(12062.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msub" transform="translate(13062.8,0)"><g data-mml-node="mtext"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" transform="translate(361,0)"/><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" transform="translate(706,0)"/></g><g data-mml-node="mi" transform="translate(1242,-229.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container></span></p></li>
<li><p>对第 ( i ) 位乘客不接单，那么有 <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.65ex;" xmlns="http://www.w3.org/2000/svg" width="11.17ex" height="2.22ex" role="img" focusable="false" viewbox="0 -694 4937.1 981.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mtext"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" transform="translate(520,0)"/></g><g data-mml-node="TeXAtom" transform="translate(1056,-229.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mo" transform="translate(2531.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(3587.2,0)"><g data-mml-node="mtext"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" transform="translate(520,0)"/></g><g data-mml-node="mi" transform="translate(1056,-229.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container></span></p></li>
<li><p>根据以上情况，对于 ( i )，有转移方程为：</p></li>
</ol>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.845ex;" xmlns="http://www.w3.org/2000/svg" width="43.06ex" height="2.542ex" role="img" focusable="false" viewbox="0 -750 19032.3 1123.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mtext"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" transform="translate(520,0)"/></g><g data-mml-node="TeXAtom" transform="translate(1056,-229.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mo" transform="translate(2531.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(3587.2,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(833,0)"/><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(1333,0)"/></g><g data-mml-node="mo" transform="translate(5448.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(5837.2,0)"><g data-mml-node="mtext"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" transform="translate(520,0)"/></g><g data-mml-node="mi" transform="translate(1056,-229.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(7187.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(7631.8,0)"><g data-mml-node="mtext"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" transform="translate(520,0)"/></g><g data-mml-node="mi" transform="translate(1056,-229.4) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g><g data-mml-node="mo" transform="translate(9251.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msub" transform="translate(10251.6,0)"><g data-mml-node="mtext"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" transform="translate(466,0)"/><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z" transform="translate(1066,0)"/></g><g data-mml-node="mi" transform="translate(1619,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(12386.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(13387,0)"><g data-mml-node="mtext"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" transform="translate(469,0)"/><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" transform="translate(830,0)"/><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" transform="translate(1359,0)"/><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" transform="translate(1810,0)"/></g><g data-mml-node="mi" transform="translate(2204,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(16107.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msub" transform="translate(17107.4,0)"><g data-mml-node="mtext"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" transform="translate(361,0)"/><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" transform="translate(706,0)"/></g><g data-mml-node="mi" transform="translate(1242,-229.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(18643.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></span></p>
<p>其中 ( j ) 为满足 <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="13.104ex" height="2.236ex" role="img" focusable="false" viewbox="0 -694 5791.8 988.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mtext"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" transform="translate(466,0)"/><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z" transform="translate(1066,0)"/></g><g data-mml-node="mi" transform="translate(1619,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g><g data-mml-node="mo" transform="translate(2238.1,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="msub" transform="translate(3293.9,0)"><g data-mml-node="mtext"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" transform="translate(469,0)"/><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" transform="translate(830,0)"/><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" transform="translate(1359,0)"/><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" transform="translate(1810,0)"/></g><g data-mml-node="mi" transform="translate(2204,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container></span> ，那么 <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.559ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2457 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" transform="translate(520,0)"/></g><g data-mml-node="mo" transform="translate(1023,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(1301,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2179,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g></g></g></svg></mjx-container></span> 即为结果。</p>
<p>注意：从end为结束统一了结束的节点。从上一个找寻最接近当前strat的其他end，这样避免了乱套的情况！</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">maxTaxiEarnings</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; rides)</span> </span>{</span><br><span class="line">        <span class="built_in">sort</span>(rides.<span class="built_in">begin</span>(),rides.<span class="built_in">end</span>(),[&amp;](<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;r1,<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;r2)-&gt;<span class="type">bool</span>{<span class="keyword">return</span> r1[<span class="number">1</span>]&lt;r2[<span class="number">1</span>];});</span><br><span class="line">        <span class="type">int</span> m = rides.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">dp</span><span class="params">(m+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++){</span><br><span class="line">            <span class="type">int</span> j = <span class="built_in">upper_bound</span>(rides.<span class="built_in">begin</span>(),rides.<span class="built_in">begin</span>()+i,rides[i][<span class="number">0</span>],[](<span class="type">int</span> x,<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;r)-&gt;<span class="type">bool</span>{</span><br><span class="line">                <span class="keyword">return</span> x&lt;r[<span class="number">1</span>];</span><br><span class="line">            })-rides.<span class="built_in">begin</span>();</span><br><span class="line">            dp[i+<span class="number">1</span>]=<span class="built_in">max</span>(dp[i],dp[j]+rides[i][<span class="number">1</span>]-rides[i][<span class="number">0</span>]+rides[i][<span class="number">2</span>]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[m];</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode6-27</title>
    <url>/2023/06/27/leetcode6-27/</url>
    <content><![CDATA[<h2 id="leetcode每日一天6.24">leetcode每日一天（6.24）</h2>
<p><a class="link" href="https://leetcode.cn/problems/maximum-subarray-sum-with-one-deletion">1186. 删除一次得到子数组最大和<i class="fas fa-external-link-alt"></i></a> 给你一个整数数组，返回它的某个 非空 子数组（连续元素）在执行一次可选的删除操作后，所能得到的最大元素总和。换句话说，你可以从原数组中选出一个子数组，并可以决定要不要从中删除一个元素（只能删一次哦），（删除后）子数组中至少应当有一个元素，然后该子数组（剩下）的元素总和是所有子数组之中最大的。</p>
<p>注意，删除一个元素后，子数组 不能为空。</p>
<h6 id="示例1">示例1</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入：arr = [1,-2,0,3]</span><br><span class="line">输出：4</span><br><span class="line">解释：我们可以选出 [1, -2, 0, 3]，然后删掉 -2，这样得到 [1, 0, 3]，和最大。</span><br></pre></td></tr></table></figure>
<h6 id="示例2">示例2</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入：arr = [1,-2,-2,3]</span><br><span class="line">输出：3</span><br><span class="line">解释：我们直接选出 [3]，这就是最大和。</span><br></pre></td></tr></table></figure>
<h6 id="示例3">示例3</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入：arr = [-1,-1,-1,-1]</span><br><span class="line">输出：-1</span><br><span class="line">解释：最后得到的子数组不能为空，所以我们不能选择 [-1] 并从中删去 -1 来得到 0。</span><br><span class="line">     我们应该直接选择 [-1]，或者选择 [-1, -1] 再从中删去一个 -1。</span><br></pre></td></tr></table></figure>
<h6 id="提示">提示：</h6>
<ul>
<li>1 &lt;= arr.length &lt;= 10^5</li>
<li>-10^4 &lt;= arr[i] &lt;= 10^4</li>
</ul>
<hr>
<h2 id="解答">解答</h2>
<h6 id="思想">思想：</h6>
动态规划 本题是典型的动态规划应用题，我们可以将问题拆分成多个子问题，即求解以 arr[i] 结尾的最多删除一次的非空子数组的最大和。我们以 dp[i][k] 表示以 arr[i]结尾，删除** k ** 次的非空子数组的最大和（删除前的末尾元素为 arr[i]，就视为以 arr[i] 结尾）。初始时 dp[0][0]=arr[0]，dp[0][1]＝0<strong>（以 arr[0] 结尾，删除一次的非空子数组不存在，因此 dp[0][1] 不会计入结果）</strong>。当 i&gt;0 时，转移方程如下：
<center>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[i][0]=max(dp[i−1][0],0)+arr[i]</span><br><span class="line">dp[i][1]=max(dp[i−1][1]+arr[i],dp[i−1][0])</span><br></pre></td></tr></table></figure>
</center>
<ul>
<li>第一个转移方程表示在不删除的情况下，以 arr[i]] 为结尾的非空子数组的最大和 dp[i][0]与 dp[i－1][0] 有关，当 dp[i−1][0]&gt;0 时，直接将 arr[i]与 i−1 时的最大非空子数组连接时，取得最大和，否则只选 arr[i] 时，取得最大和。</li>
<li>第二个转移方程表示在删除一次的情况下，以 arr[i] 为结尾的非空子数组有两种情况：
<ol type="1">
<li>不删除 arr[i]，那么选择 arr[i] 与 dp[i−1][1] 对应的子数组（已执行一次删除）。</li>
<li>删除 arr[i]，那么选择 dp[i−1][0] 对应的非空子数组（未执行一次删除，但是等同于删除了 arr[i]）。 dp[i][1] 取以上两种情况的最大和的最大值。</li>
</ol></li>
</ul>
<p><strong>注意到 dp[i][∗]的值只与 dp[i−1][∗] 有关，因此我们可以只使用两个整数来节省空间。</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> dp0=arr[<span class="number">0</span>],dp1=<span class="number">0</span>,res=arr[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> len = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">            dp1 = <span class="built_in">max</span>(dp0,dp1+arr[i]);</span><br><span class="line">            dp0 = <span class="built_in">max</span>(dp0,<span class="number">0</span>) + arr[i];</span><br><span class="line">            res = <span class="built_in">max</span>(res,<span class="built_in">max</span>(dp0,dp1));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode9.20</title>
    <url>/2022/09/20/leetcode9-20/</url>
    <content><![CDATA[<h2 id="leetcode每日一天9.20">leetcode每日一天（9.20）</h2>
<p><a class="link" href="https://leetcode.cn/problems/partition-to-k-equal-sum-subsets/">题目：698. 划分为k个相等的子集<i class="fas fa-external-link-alt"></i></a> 给定一个整数数组 nums 和一个正整数 k，找出是否有可能把这个数组分成 k 个非空子集，其总和都相等。 ###### 示例1 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入： nums = [4, 3, 2, 3, 5, 2, 1], k = 4</span><br><span class="line">输出： True</span><br><span class="line">说明： 有可能将其分成 4 个子集（5），（1,4），（2,3），（2,3）等于总和。</span><br></pre></td></tr></table></figure> ###### 示例2 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入: nums = [1,2,3,4], k = 3</span><br><span class="line">输出: <span class="literal">false</span></span><br></pre></td></tr></table></figure> ###### 提示 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1 &lt;= k &lt;= len(nums) &lt;= 16</span><br><span class="line">0 &lt; nums[i] &lt; 10000</span><br><span class="line">每个元素的频率在 [1,4] 范围内</span><br></pre></td></tr></table></figure> *** ## 解答 ###### 思想： 我们可以把每个集合看做一个桶，然后我们可以通过dfs和剪枝来模拟每个数值入桶和出桶。 ###### 剪枝： 因为我们需要有k个桶且每个桶的值是相等的。以此可以推出给定的值相加一定是桶的值的倍速，并且不会存在比桶值大的数值。最关键的剪枝为，我们在dfs遍历一个桶是否可以装满，如果回溯的时候发现这个桶回到了初始值，则证明这个桶是装不满的。然而，每个桶都是一样的，这个桶装不满则其他桶一样装不满。 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">canPartitionKSubsets</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>,size=nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> maxN=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">        sum+=nums[i],maxN=<span class="built_in">max</span>(maxN,nums[i]);</span><br><span class="line">    <span class="keyword">if</span>(sum%k!=<span class="number">0</span>||maxN&gt;sum/k)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    sum=sum/k;</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">  <span class="comment">//  cout&lt;&lt;nums[0];</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(k,sum)</span></span>;</span><br><span class="line">    <span class="type">bool</span> t=<span class="literal">false</span>;</span><br><span class="line">    t=<span class="built_in">dfs</span>(nums,arr,size<span class="number">-1</span>,k,size,sum);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//nums给定数组 arr模拟每一个桶  cur以此遍历每个数值 k一共有几个桶 size原数组大小 sum每个桶的值</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums,vector&lt;<span class="type">int</span>&gt;&amp; arr,<span class="type">int</span> cur,<span class="type">int</span> k,<span class="type">int</span> size,<span class="type">int</span> sum)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">            <span class="keyword">if</span>(arr[i]!=<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]-nums[cur]&lt;nums[<span class="number">0</span>]&amp;&amp;arr[i]!=nums[cur])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        arr[i] -= nums[cur];</span><br><span class="line">        <span class="comment">// for(int j=0;j&lt;k;j++)</span></span><br><span class="line">        <span class="comment">//     cout&lt;&lt;arr[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dfs</span>(nums,arr,cur<span class="number">-1</span>,k,size,sum))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        arr[i] += nums[cur];</span><br><span class="line">        <span class="keyword">if</span>(arr[i]==sum)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode9-23</title>
    <url>/2022/09/23/leetcode9-23/</url>
    <content><![CDATA[<h2 id="leetcode每日一天9.23">leetcode每日一天（9.23）</h2>
<p><a class="link" href="https://leetcode.cn/problems/design-linked-list/">707. 设计链表<i class="fas fa-external-link-alt"></i></a> 设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：<code>val</code> 和 <code>next</code>。<code>val</code> 是当前节点的值，<code>next</code> 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 <code>prev</code> 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。 在链表类中实现这些功能： 1. get(index)：获取链表中第<code>index</code>个节点的值。如果索引无效，则返回-1。 2. addAtHead(val)：在链表的第一个元素之前添加一个值为 <code>val</code> 的节点。插入后，新节点将成为链表的第一个节点。 3. addAtHead(val)：在链表的第一个元素之前添加一个值为<code>val</code> 的节点。插入后，新节点将成为链表的第一个节点。 4. addAtIndex(index,val)：在链表中的第<code> index </code>个节点之前添加值为<code> val</code>  的节点。如果<code> index </code>等于链表的长度，则该节点将附加到链表的末尾。如果 <code>index</code> 大于链表长度，则不会插入节点。如果<code>index</code>小于0，则在头部插入节点。 5. deleteAtIndex(index)：如果索引<code>index</code>有效，则删除链表中的第 <code>index</code> 个节点。 ###### 示例1 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MyLinkedList linkedList = new MyLinkedList();</span><br><span class="line">linkedList.addAtHead(1);</span><br><span class="line">linkedList.addAtTail(3);</span><br><span class="line">linkedList.addAtIndex(1,2);   //链表变为1-&gt; 2-&gt; 3</span><br><span class="line">linkedList.get(1);            //返回2</span><br><span class="line">linkedList.deleteAtIndex(1);  //现在链表是1-&gt; 3</span><br><span class="line">linkedList.get(1);            //返回3</span><br></pre></td></tr></table></figure> ###### 提示 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">所有val值都在 [1, 1000] 之内。</span><br><span class="line">操作次数将在  [1, 1000] 之内。</span><br><span class="line">请不要使用内置的 LinkedList 库。</span><br></pre></td></tr></table></figure> *** ## 解答 ###### 思想： 这是一道水题目，主要是用到数据结构里面的链表，我是用的c++里面的ListNode来解答这题比较轻松。题目要求有三处增加函数，实质上在首部添加数值和在尾部添加数值的操作可以归纳为addAtIndex，则我们在addAtHead和addAtTail可以直接调用addAtIndex用来减少我们的代码量。 ###### ListNode的结构： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">struct ListNode &#123;</span><br><span class="line">      int val;  //当前结点的值</span><br><span class="line">      ListNode *next;  //指向下一个结点的指针</span><br><span class="line">      ListNode(int x) : val(x), next(NULL) &#123;&#125;  //初始化当前结点值为x,指针为空</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">ListNode *p=new ListNode(0); //新增一个节点</span><br><span class="line">delete p; //删除一个节点，释放内存</span><br></pre></td></tr></table></figure> ###### 代码： <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyLinkedList</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;head = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>); <span class="comment">//首节点，值无意义</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;=size)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        ListNode *cur = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= index; i++) &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">addAtIndex</span>(<span class="number">0</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">addAtIndex</span>(size,val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;size)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        index=<span class="built_in">max</span>(<span class="number">0</span>,index);</span><br><span class="line">        ListNode *cur=head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;index;i++)</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        ListNode *toAdd = <span class="keyword">new</span> <span class="built_in">ListNode</span>(val);</span><br><span class="line">        toAdd-&gt;next = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = toAdd;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;=size)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        ListNode *cur=head;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;index;i++)</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        ListNode *p = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    ListNode *head;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyLinkedList object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyLinkedList* obj = new MyLinkedList();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;get(index);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAtHead(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAtTail(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAtIndex(index,val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;deleteAtIndex(index);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>八股文</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo增添评论区</title>
    <url>/2022/09/22/newComment/</url>
    <content><![CDATA[<p>hexo有三种新增评论的模板分别是：valine、gitalk还有twikoo。我使用的是twikoo。 ## Twikoo Twikoo是一个静态博客评论系统，除了评论功能，还可以记录文章阅读量。搭建过程包括准备数据库和云函数，还有修改主题配置文件。 而配置Twikoo主要是分两种一种是使用腾讯云来布置，一种是使用Mongodb+Vercel部署。 ### 腾讯云部署 #### 准备工作 注册<a class="link" href="https://curl.qcloud.com/KnnJtUom">云开发CloudBase(opens new window)<i class="fas fa-external-link-alt"></i></a> 进入<a class="link" href="https://console.cloud.tencent.com/tcb/">云开发控制台 (opens new window)<i class="fas fa-external-link-alt"></i></a>，新建环境，请按个人需要配置#### 环境 1. 进入后选择空模板 2. 安全配置：再登录授权中启用“匿名登录” 3. 选择安全配置，将网站域名添加到“WEB安全域名” 4. 进入环境总览中复制环境id（后面要用)</p>
<h4 id="部署">部署</h4>
<p>我们一般选择手动部署 1. 新建函数，函数名称填写：<code>twikoo</code>，创建方式选择：<code>空白函数</code>，运行环境选择：<code>Nodejs 10.15</code>（选择最靠近你的运行环境的版本），函数内存请选择：<code>128MB</code> 2. 点击下一步，修改函数代码： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exports.main = require(<span class="string">&#x27;twikoo-func&#x27;</span>).main</span><br></pre></td></tr></table></figure> 3. 确定完成后，点击刚才创建的twikoo函数，点击函数代码，创建<code>package.json</code> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123; <span class="string">&quot;dependencies&quot;</span>: &#123; <span class="string">&quot;twikoo-func&quot;</span>: <span class="string">&quot;1.4.9&quot;</span> &#125; &#125;</span><br></pre></td></tr></table></figure> twikoo-func填写最新的版本 #### 命令行环境部署 以下操作部署，可使用任意环境面板部署，这里使用的是git进行部署 1. 克隆本仓库 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/imaegoo/twikoo.git</span><br><span class="line"><span class="built_in">cd</span> twikoo</span><br></pre></td></tr></table></figure> 2. 安装依赖项 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g yarn <span class="comment"># 已安装 yarn 可以跳过此步</span></span><br><span class="line">yarn install</span><br></pre></td></tr></table></figure> 3. 授权云开发环境（会自动跳转到授权界面，点击授权即可） <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn run login</span><br></pre></td></tr></table></figure> 4. 自动部署 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn deploy -e 您的环境<span class="built_in">id</span> (就是之前你复制的)</span><br></pre></td></tr></table></figure></p>
<h4 id="在-hexo-中使用">在 Hexo 中使用</h4>
<ol type="1">
<li>在主题的配置文件中找到comment enable改为true，use为twikoo <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">comment:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  use: twikoo <span class="comment"># values: valine | gitalk | twikoo</span></span><br></pre></td></tr></table></figure></li>
<li>继续往下找寻 twikoo region一定要填写 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">twikoo:</span><br><span class="line">  env_id:  填写你的环境iD  <span class="comment">#https://www.sunset148.top/ Tencent Cloud environment id</span></span><br><span class="line">  region: ap-shanghai <span class="comment"># environment region. If select Guangzhou, fill in &quot;ap-guangzhou&quot;.</span></span><br></pre></td></tr></table></figure> 到这里在腾讯云的配置就结束了 *** ### Mongodb+Vercel部署 #### MongoDB 我们使用MongoDB存储数据</li>
<li><a class="link" href="https://www.mongodb.com/zh-cn/cloud/atlas/register">注册MongoDB账号<i class="fas fa-external-link-alt"></i></a></li>
<li>创建免费数据库，类型选择<code>Shared</code>，区域选择 <code>AWS / N. Virginia (us-east-1)</code></li>
<li>点击<code>Connect</code>按钮，键入 0.0.0.0/0 以允许所有 IP 地址的连接，并创建数据库用户</li>
<li>连接方式选择中间的<code>Connect your application</code></li>
<li>记录下连接字符串，等下使用时记得将其中的 <password> 修改为刚刚设置的用户密码（<password>需要整体替换）</password></password></li>
</ol>
<h4 id="vercel">Vercel</h4>
<ol type="1">
<li>使用<code>Vercel</code>来运行云函数，先注册 <a class="link" href="https://vercel.com/signup">vercel 账号<i class="fas fa-external-link-alt"></i></a>，可以选择从<code>GitHub</code>之类的登录，也可以选择通过邮箱注册</li>
<li>新创建一个库来保存代码（如果你之前用使用该<a class="link" href="https://twikoo.js.org/quick-start.html#vercel-%E9%83%A8%E7%BD%B2">链接<i class="fas fa-external-link-alt"></i></a>）</li>
<li>完成后，在导航栏选择<code>Setting</code>，在左侧选择<code>Environment Variables</code>，添加变量<code>MONGODB_URI</code>，值输入刚才的连接字符串，记得修改 <code>&lt;password&gt;</code> 为数据库用户密码</li>
<li>导航栏中选择<code>Deployments</code>，重新部署一下</li>
<li>回到<code>Overview</code>，可以看见<code>云函数运行正常</code>字样，在右边的<code>域名（DOMAINS）</code>里挑一个记录下你的域名,而该域名就是你的环境ID</li>
</ol>
<h5 id="tip">Tip：</h5>
<p>因为 Vercel.app 可能在国内被墙，所以可能需要手动添加一个自己域名。 但是解决方法也很简单——准备一个新域名，然后把这个域名指过去 1. 来到 <code>vercel</code> 控制台，点进去你的实例 2. 找到 <code>Setting</code> -&gt; <code>Domain</code> 3. 手动添加你的域名进去 4. 他会给出解析配置，你就去改你的域名解析就好了（在你购买域名的官网会有一个域名解析） 5. 最后去主题配置文件里更新这个新地址就行</p>
<h4 id="主题文件配置">主题文件配置</h4>
<p>在主题文件中找到配置文件keep_partial <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">twikoo:</span><br><span class="line">  env_id:  你的域名  <span class="comment">#https://www.sunset148.top/ Tencent Cloud environment id</span></span><br><span class="line">  region: ap-shanghai <span class="comment"># environment region. If select Guangzhou, fill in &quot;ap-guangzhou&quot;.</span></span><br></pre></td></tr></table></figure> 重启Hexo，就能可以看到了。 *** ### 其他 但很有可能你的评论系统打不开，很有可能是因为<code>Butterfly</code>版本过低的问题。 博主试了几个Butterfly依旧开不开评论系统，转而投向了keep ##### keep安装 如果你在使用 Hexo 5.0 或更高版本，最简单的安装方式是通过 npm： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo-site</span><br><span class="line">$ npm install hexo-theme-keep</span><br></pre></td></tr></table></figure> 或者使用 git 克隆整个仓库： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo-site</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/XPoet/hexo-theme-keep themes/keep</span><br></pre></td></tr></table></figure> ##### 使用 安装完成后，在 Hexo 配置文件中将<code>theme</code>设置为<code>keep</code>。 Keep 不定期发布新版本，你可以通过如下命令更新 Keep。 ##### 更新 通过 npm 安装最新版本： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo-site</span><br><span class="line">$ npm update hexo-theme-keep</span><br></pre></td></tr></table></figure> 通过 git 更新到最新的 master 分支： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/keep</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure> ##### Twikoo 另外在keep里面的keep_partial.ejs里面的版本号更改为最新的就是 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script &lt;%= theme.pjax.enable === <span class="literal">true</span> ? <span class="string">&#x27;data-pjax&#x27;</span> : <span class="string">&#x27;&#x27;</span> %&gt;                src=<span class="string">&quot;//cdn.jsdelivr.net/npm/twikoo@1.6.7/dist/twikoo.all.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure> <a class="link" href="https://keep-docs.xpoet.cn/usage-tutorial/quick-start.html">keep官方文档<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>hexo新增评论区</tag>
      </tags>
  </entry>
  <entry>
    <title>博客新增了搜索、分类还有标签功能</title>
    <url>/2022/09/23/newHexoSomeFunction/</url>
    <content><![CDATA[<p>今天为博客新增了搜索、分类还有标签功能</p>
<h2 id="搜索功能添加">搜索功能添加</h2>
<p>本文主要描述了怎么添加hexo博客搜索插件，然后启动搜索功能，对两个本地搜索插件的使用进行了描述，文章可能还有很多不足，请大家谅解，欢迎大佬提意见。 ### 本文用的东西 1. hexo 2. 电脑</p>
<h3 id="部署">部署</h3>
<h4 id="插件比较">插件比较</h4>
<p>“hexo-generator-searchdb”插件功能比较强大，可以替代后面讲的第二个插件“hexo-generator-json-content”插件。而“hexo-generator-json-content”插件只能生产json文件，且不能定义文件名，无法替代“hexo-generator-searchdb”插件，但是“hexo-generator-json-content”可以定义生成的json文件的格式。</p>
<h4 id="hexo-generator-searchdb插件">hexo-generator-searchdb插件</h4>
<h5 id="插件原理">插件原理</h5>
<p>这个插件会扫描博客文章，根据“——config.yml”的配置从文章里获取内容生成一个xml/json文件的结果，类似于博客中文章信息的摘要把，搜索的时候就搜索这个文件的内容。 ##### 添加插件 1. 打开<code>cmd</code> 2. 输入以下命令添加博客搜索插件。 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//未配置淘宝的数据源</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line">//配置淘宝数据源的可以使用这条命令，网络会好一些</span><br><span class="line">cnpm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure> 3. 打开博客目录，找到<code>_config.yml</code>文件，添加以下内容。 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: <span class="literal">true</span></span><br><span class="line">  format: html</span><br></pre></td></tr></table></figure> <code>path</code>：表示搜索后生成的文件路径，可以生成xml和json两种格式；将path设置为<code>content.json</code>就可以替代第二个插件。 <code>field</code>：表示搜索的范围，有<code>post</code>、<code>page</code>和<code>all</code>三种值。     <code>post</code>：所有的文章；     <code>page</code>：所有顶部导航选项的页面；     <code>all</code>：所有的文章和顶部导航选项的页面。 <code>content</code>：是否包含搜索到的文章的全部内容。如果<code>false</code>，生成的结果只包括标题和创建时间这些信息，没有文章主体。默认情况下是<code>true</code>. <code>format</code>：搜索到的内容、选项的格式。     <code>html</code>(默认)：将html原文本缩略。     <code>striptags</code>：将html原文本缩略，并删除所有标记。     <code>raw</code>：记下每一篇文章或每一页的文字。</p>
<h5 id="使用插件">使用插件</h5>
<p>打开博客目录目录，找到当前正在使用的主题的<code>_config.yml</code>文件，打开进行编辑，找到<code>local_search</code>，修改<code>enable</code>的值为<code>true</code>。 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地搜索</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure> 到此即可使用搜索功能了 *** ## 分类、标签和留言功能添加 这三个功能实际上是异曲同工的。使用类似的方法即可添加 #### 新建标签页 用命令行新建一个页面：（页面名称可以任意） <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;tages&quot;</span> </span><br></pre></td></tr></table></figure> #### 设置其类型 type 值为“tages” 用命令行新建一个页打开 /source/tages/index.md，设置其类型<code>type</code>值为<code>tages</code>：（页面名称可以任意） <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: tags</span><br><span class="line"><span class="built_in">date</span>: 2019-07-26 00:33:58</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure> 如果需要多个标签或者分类的话 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- 分类</span><br><span class="line">- 子分类</span><br><span class="line">- 子子分类</span><br><span class="line">tags:</span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br></pre></td></tr></table></figure> #### 在主题的配置文件更改 打开 /themes/主题/_config.yml，把tages标签那项取消注释即可，下面的是已经取消注释了的。 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  主页: /</span><br><span class="line">  <span class="comment">#随笔: /tags/随笔/</span></span><br><span class="line">  <span class="comment">#分类: /categories</span></span><br><span class="line">  <span class="comment">#归档: /archives</span></span><br><span class="line">  标签: /tags</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>hexo搜索</tag>
        <tag>hexo分类、标签和留言墙</tag>
      </tags>
  </entry>
  <entry>
    <title>遥感影像的路网识别、提取的数据集</title>
    <url>/2022/09/29/roadDataset/</url>
    <content><![CDATA[<h3 id="简介">简介</h3>
<h3 id="简介-1">简介</h3>
<table style="width:62%;">
<colgroup>
<col style="width: 16%">
<col style="width: 13%">
<col style="width: 31%">
</colgroup>
<thead>
<tr class="header">
<th>数据集名称</th>
<th>数据集下载地址</th>
<th>数据集详细情况</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>CHN6-CUG Road Dataset</td>
<td>链接：https://pan.baidu.com/share/init?surl=hHwUfwGvqb_5kM-3dpyM_g 提取码：urs6</td>
<td>CHN6-CUG 包含 4511 张 512×512 大小的标记图像，分为 3608 张用于模型训练的图像和 903 张用于测试和结果评估的图像，分辨率为 50 厘米/像素。原始数据集采用.jpg格式，道路标记图采用.png格式</td>
</tr>
<tr class="even">
<td>DeepGlobe 道路提取数据集</td>
<td>https://bj.bcebos.com/ai-studio-online/bae42d32d39b46059783791e327bea12b2716d64cf654be08aa0c11bd670ef21?authorization=bce-auth-v1%2F5cfe9a5e1454405eb2a975c43eace6ec%2F2022-09-04T15%3A26%3A45Z%2F-1%2F%2F3dc55e6d32d46b7c21406ee098d7c08c1eeba23e90082aa3da9a0b140abbc87d&amp;responseContentDisposition=attachment%3B%20filename%3DDeepGlobe.zip</td>
<td>6226 张 RGB 卫星图像，大小为 1024x1024。该图像具有 50 厘米像素分辨率，由 DigitalGlobe 的卫星收集。该数据集包含 1243 个验证图像和 1101 个测试图像（但没有掩码）每个卫星图像都与道路标签的蒙版图像配对。蒙版是灰度图像，白色代表道路像素，黑色代表背景。卫星图像和相应蒙版图像的文件名是id _sat.jpg 和id _mask.png。id是一个随机整数。</td>
</tr>
<tr class="odd">
<td>Leveraging Crowdsourced GPS Data for Road Extraction from Aerial Imagery</td>
<td>以Python的Pickle格式发布数据集，可以直接加载，如下所示：import pandas import picklegps_data = pickle.load(open('beijing_gps_dir_speed_interval_sorted.pkl', 'rb'))</td>
<td>GPS 数据集包含从北京约 280000 辆汽车收集的约 50 米行 GPS 记录</td>
</tr>
<tr class="even">
<td>RoadNet</td>
<td>链接：https://pan.baidu.com/s/1l9RZvyYfLgTOx_k4LQRyhQ 提取码：h2zt</td>
<td>我们从谷歌地球收集了加拿大渥太华的几个典型城市地区。图像每像素的空间分辨率为0.21m（缩放级别为19）。Training files:2,3,4,5,6,7,8,9,10,11,12,13,14,15 Testing files:1,16,17,18,19,20</td>
</tr>
<tr class="odd">
<td>Generative Graph Transformer</td>
<td>generative-graph-transformer/download_dataset.sh at master · davide-belli/generative-graph-transformer (github.com)</td>
<td>图卢兹路网数据集，用于从卫星图像的语义分割中提取道路网</td>
</tr>
<tr class="even">
<td>road_connectivity</td>
<td>road_connectivity/data at master · anilbatra2185/road_connectivity (github.com)</td>
<td>提出了一个名为方向学习的连接任务，其动机是人类通过在特定方向跟踪道路来注释道路的行为。我们还开发了一个堆叠的多分支卷积模块，以有效地利用方向学习和分割任务之间的相互信息</td>
</tr>
<tr class="odd">
<td>DeepGlobeRoad</td>
<td>链接：https://pan.baidu.com/s/1aG1qdTFEcIwzh2YruBGUNA 提取码：podb</td>
<td>比赛数据集包含6226张训练图像，1243张验证图像，以及1101张测试图像。所有的图像尺寸均为1024*1024，图像来源于泰国、印度、印度尼西亚，图像场景包括城市、乡村、荒郊、海滨、热带雨林等多个场景。</td>
</tr>
<tr class="even">
<td>DeepWindow</td>
<td>https://github.com/rob-lian/DeepWindow/tree/master/resources</td>
<td>用于从遥感影像手动采样道路中心点的工具</td>
</tr>
<tr class="odd">
<td>Sat2Graph</td>
<td>https://github.com/songtaohe/Sat2Graph/tree/master/figures</td>
<td>20个美国城市覆盖720平方公里区域的大型城市数据集和流行的空间网道路数据集的评估中，Sat2Graph在广泛使用的地形相似度度量上超过了最先进的方法。</td>
</tr>
<tr class="even">
<td>SPIN Road Mapper: Extracting Roads from Aerial Images via Spatial and Interaction Space Graph Reasoning for Autonomous Driving</td>
<td>https://github.com/wgcban/SPIN_RoadMapper/tree/main/images</td>
<td>整个图像中被分叉，并且经常被地形、云或其他天气条件遮挡。</td>
</tr>
<tr class="odd">
<td>CoANet: Connectivity Attention Network for Road Extraction from Satellite Imagery</td>
<td>https://github.com/mj129/CoANet/tree/main/figures</td>
<td>由于其他物体造成的遮挡和复杂的交通环境，基于像素的方法往往会产生破碎的道路的图像</td>
</tr>
<tr class="even">
<td>Split Depth-wise Separable Graph Convolution Network for Road Extraction in Complex Environment from High-resolution Remote Sensing Imagery（TGRS）</td>
<td>https://github.com/tist0bsc/SGCN</td>
<td>高分辨率遥感图像的道路信息检测柏油路封闭或树木覆盖的道路</td>
</tr>
<tr class="odd">
<td>Topo-boundary: A Benchmark Dataset on Topological Road-boundary Detection Using Aerial Images for Autonomous Driving</td>
<td>https://roadmaps.csail.mit.edu/roadtracer/</td>
<td>数据集包含25,295 1000张×1000大小的4通道航空图像。每个图像提供8个不同子任务的训练标签。用于自动驾驶</td>
</tr>
<tr class="even">
<td>LoveDA</td>
<td>链接：https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1YrU1Y4Y0dS0f_OOHXpzspQ 提取码：27vc</td>
<td>用于域自适应语义分割的遥感土地覆盖数据集。5987 个图像芯片（Google Earth），7 个土地覆盖类别，166768 个标签，包含中国 3 个城市。论文：Wang et al., 2021 背景 - 1，建筑 - 2，道路 - 3，水 - 4，贫瘠 - 5，森林 - 6，农业 - 7。无数据区域分配为 0，应忽略。</td>
</tr>
<tr class="odd">
<td>SpaceNet 5：自动道路网络提取和路线旅行时间估计 （CosmiQ Works、Maxar、英特尔、AWS，2019 年 9 月)</td>
<td>https://spacenet.ai/sn5-challenge/</td>
<td>2300 个图像芯片，带有位置、形状和预计旅行时间的街道几何图形，3/8 波段 Worldview-3 图像（0.3m res.)，4 个全球城市，1 个用于排行榜评估的保留城市， APLS指标，基线模型</td>
</tr>
<tr class="even">
<td>RoadNet （武汉，2018 年 10 月）</td>
<td>链接：https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1l9RZvyYfLgTOx_k4LQRyhQ 提取码：h2zt</td>
<td>道路网络标签，高分辨率谷歌地球图像，21 个区域</td>
</tr>
<tr class="odd">
<td>SpaceNet 3：道路网络检测 （CosmiQ Works，Radiant Solutions，2018 年 2 月）</td>
<td>https://link.zhihu.com/?target=https%3A//spacenet.ai/spacenet-roads-dataset/</td>
<td>5 个城市的 8000 公里道路，3/8 波段 Worldview-3 图像（0.3m 分辨率），SpaceNet 挑战资产库</td>
</tr>
<tr class="even">
<td>Massachusetts Roads Dataset 马萨诸塞州道路数据集</td>
<td>源地址：https://www.cs.toronto.edu/~vmnih/data/ 阿里云天池：https://tianchi.aliyun.com/dataset/dataDetail?dataId=94570#1 （1是testing data，2是val data，3/6/7/8/9/10是training data）</td>
<td>马萨诸塞州道路数据集包含马萨诸塞州的1171个航拍图像。每张图像的尺寸为1500×1500像素，占地2.25平方公里。我们将数据随机分为1108张图像的训练集，14张图像的验证集和49张图像的测试集。该数据集涵盖了各种各样的城市，郊区和农村地区，面积超过2600平方公里。仅测试仪就覆盖110平方公里。目标地图是通过栅格化从OpenStreetMap项目获得的道路中心线生成的。产生7像素的线宽且不进行平滑处理。将所有图像重新缩放为每平方米1像素的分辨率。</td>
</tr>
<tr class="odd">
<td>DeepGlobe Road Extraction Dataset</td>
<td>https://www.kaggle.com/balraj98/deepglobe-road-extraction-dataset?select=train</td>
<td>包含 8570 张 1024×1024 大小的标记图像，分为 6226 张用于模型训练的图像和 1101 张用于测试和结果评估的图像</td>
</tr>
<tr class="even">
<td>AICrowd</td>
<td>链接：https://pan.baidu.com/s/1oGMFcksEZ1dbKxc6YRhdug 提取码：6666</td>
<td>包含 3000 张 1024×1024 大小的标记图像，分为 3000 张用于模型训练的图像和 1000 张用于测试和结果评估的图像</td>
</tr>
</tbody>
</table>
<h3 id="massachusetts-建筑">Massachusetts-建筑</h3>
<h5 id="数据集详细情况">数据集详细情况</h5>
<p>项目简介：麻萨诸塞州的航空影像，协助机器学习航空影像标签,包括了建筑和道路的影像与标签文件。本文我们介绍其中的建筑数据集。 数据介绍：马萨诸塞州建筑物数据集由波士顿地区的 151 张航拍图像组成，每张图像的大小为 1500 × 1500 像素，面积为 2.25 平方公里。因此，整个数据集大约覆盖 340 平方公里。我们将数据随机分成 137 张图像的训练集、10 张图像的测试集和 4 张图像的验证集。目标地图是通过栅格化从 OpenStreetMap 项目获得的建筑物覆盖区获得的。这些数据仅限于平均遗漏噪声水平约为 5% 或更低的区域。之所以能够收集到如此大量的高质量建筑足迹数据，是因为波士顿市为 OpenStreetMap 项目贡献了整个城市的建筑足迹。该数据集主要涵盖城市和郊区，各种规模的建筑物，包括个人房屋和车库，都包含在标签中。 ##### 数据集下载地址 项目地址：https://www.cs.toronto.edu/~vmnih/data/ 数据集下载： 链接： https://pan.baidu.com/s/1Y9yk8P26TGpxmiCsYSjfHw 提取码：zfal</p>
<p>出处：<a class="link" href="https://blog.csdn.net/u014311125/article/details/121627540?spm=1001.2014.3001.5501">(44条消息) 遥感影像公开数据集:Massachusetts-建筑_GHZhao_GIS_RS的博客-CSDN博客_massachusetts道路数据集<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="chn6-cug-road-dataset">CHN6-CUG Road Dataset</h3>
<h5 id="数据集详细情况-1">数据集详细情况</h5>
<p>CHN6-CUG Road Dataset是中国代表性城市的新型大型卫星图像数据集。其遥感影像底图来自谷歌地球。选取了6个城市化程度、城市规模、发展程度、城市结构、历史文化程度不同的城市，包括北京朝阳区、上海杨浦区、武汉市中心、深圳南山区、香港沙田地区、澳门。研究区域如图1所示。标记道路由有盖道路和无盖道路组成，具体取决于道路覆盖程度。根据地理因素的物理观点，标记道路包括铁路、高速公路、城市道路和农村道路等。 CHN6-CUG 包含 4511 张 512×512 大小的标记图像，分为 3608 张用于模型训练的图像和 903 张用于测试和结果评估的图像，分辨率为 50 厘米/像素。原始数据集采用.jpg格式，道路标记图采用.png格式。压缩的数据量为 175MB。 CHN6-CUG 道路数据集中研究区域的概述 中国化学烷基化学道路数据集样本 ##### 数据集下载地址 数据集下载： 链接：<a class="link" href="https://pan.baidu.com/share/init?surl=hHwUfwGvqb_5kM-3dpyM_g">百度网盘 请输入提取码 (baidu.com)<i class="fas fa-external-link-alt"></i></a><br>
提取码：urs6</p>
<p>出处：<a class="link" href="http://grzy.cug.edu.cn/zhuqiqi/zh_CN/yjgk/32368/list/index.htm">朱祺琪 中文主页 公开数据共享 中国地质大学（武汉）教师个人主页系统 (cug.edu.cn)<i class="fas fa-external-link-alt"></i></a> ### SOS: Deep-SAR Oil Spill Dataset ##### 数据集详细情况 SOS 数据集有两个研究区域：墨西哥湾漏油区和波斯湾漏油区。图1显示了墨西哥湾漏油的位置以及所选ALOS卫星图像的典型子集。图2给出了波斯湾漏油的位置和选定的Sentinel-1A卫星图像的典型子集。因此，使用数据增强技术来扩展原始数据集。裁剪、旋转、添加杂色和其他操作都在原始灰度地图上进行。最后，共使用了来自墨西哥石油泄漏地区的3101张图像进行训练，776张图像用于测试。共有3354张来自波斯湾漏油区的图像用于训练，839张图像用于测试。 图例.1. 墨西哥湾漏油的位置。（a）4月25日拍摄的NASA /MODIS卫星图像，显示了深水地平线灾难的浮油。（资料来源：约翰·阿莫斯 2010 [1]）（b） 选定的“海洋法”卫星图像的典型子集。 图例.2. 波斯湾漏油的位置。（a） Sentinel-2多光谱卫星图像显示，2017年8月11日，浮油在科威特海岸的Al Khiran附近登陆。（资料来源：约翰·阿莫斯 2017 [2]）。（b） 选定的哨兵-1A卫星图像的典型子集。 ##### 数据集下载地址 数据集下载： <a class="link" href="https://pan.baidu.com/share/init?surl=TcbtGt7qp-IL0dALQ9HBlg">链接：百度网盘 请输入提取码 (baidu.com)<i class="fas fa-external-link-alt"></i></a><br>
提取码：urs6 出处：<a class="link" href="http://grzy.cug.edu.cn/zhuqiqi/zh_CN/yjgk/32368/list/index.htm">朱祺琪 中文主页 公开数据共享 中国地质大学（武汉）教师个人主页系统 (cug.edu.cn)<i class="fas fa-external-link-alt"></i></a> ### DeepGlobe 道路提取数据集 ##### 数据集详细情况 Road Challenge 的训练数据包含 6226 张 RGB 卫星图像，大小为 1024x1024。 该图像具有 50 厘米像素分辨率，由 DigitalGlobe 的卫星收集。 该数据集包含 1243 个验证图像和 1101 个测试图像（但没有掩码）。 标签 每个卫星图像都与道路标签的蒙版图像配对。蒙版是灰度图像，白色代表道路像素，黑色代表背景。 卫星图像和相应蒙版图像的文件名是id _sat.jpg 和id _mask.png。id是一个随机整数。 请注意：遮罩图像的值可能不是纯0和255，转换为标签时，请在阈值128处进行二值化。 由于注释分割掩码的成本，标签并不完美，特别是在农村地区。此外，我们故意没有标注农田内的小路。 ##### 数据集下载地址 数据集下载： 链接： https://bj.bcebos.com/ai-studio-online/bae42d32d39b46059783791e327bea12b2716d64cf654be08aa0c11bd670ef21?authorization=bce-auth-v1%2F5cfe9a5e1454405eb2a975c43eace6ec%2F2022-09-04T15%3A26%3A45Z%2F-1%2F%2F3dc55e6d32d46b7c21406ee098d7c08c1eeba23e90082aa3da9a0b140abbc87d&amp;responseContentDisposition=attachment%3B%20filename%3DDeepGlobe.zip 出处：<a class="link" href="https://aistudio.baidu.com/aistudio/datasetdetail/102399">DeepGlobe 道路提取数据集 - 飞桨AI Studio (baidu.com)<i class="fas fa-external-link-alt"></i></a> ### Leveraging Crowdsourced GPS Data for Road Extraction from Aerial Imagery ##### 数据集详细情况 GPS 数据集包含从北京约 280000 辆汽车收集的约 50 米行 GPS 记录。 数据集下载地址 数据集下载： 为了节省加载时间，我们以Python的Pickle格式发布数据集，可以直接加载，如下所示： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import pandas</span><br><span class="line">import pickle</span><br><span class="line">gps_data = pickle.load(open(<span class="string">&#x27;beijing_gps_dir_speed_interval_sorted.pkl&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>))</span><br></pre></td></tr></table></figure> 出处：1.<a class="link" href="https://github.com/suniique/Leveraging-Crowdsourced-GPS-Data-for-Road-Extraction-from-Aerial-Imagery">suniique/利用-众包-GPS-用于从航空图像中提取道路的数据：CVPR 2019年论文“利用众包GPS数据从航空图像中提取道路”的源代码 (github.com)<i class="fas fa-external-link-alt"></i></a> 2.<a class="link" href="https://blog.csdn.net/weixin_42990464/article/details/113699960">(44条消息) 基于遥感影像的道路提取论文、开源代码和数据集汇总_点PY的博客-CSDN博客_道路提取<i class="fas fa-external-link-alt"></i></a> ### RoadNet ##### 数据集详细情况 我们从谷歌地球收集了加拿大渥太华的几个典型城市地区。图像每像素的空间分辨率为0.21m（缩放级别为19）。 Training files: 2,3,4,5,6,7,8,9,10,11,12,13,14,15 Testing files: 1,16,17,18,19,20 我们以文件名1为例 |文件名 |解释| | ----------- | ----------- | |Ottawa-1.tif |原始图像| |segmentation.png |手动清除路面| |edge.png |手动标注道路边缘| |centerline.png| 道路中心线的手动注释| |extra.png| 用单个像素宽度的画笔粗略标记异质区域（红色）| |extra-Ottawa-1.tif |覆盖着Ottawa-1.tifextra.png| ##### 数据集下载地址 数据集下载： 链接：https://pan.baidu.com/s/1l9RZvyYfLgTOx_k4LQRyhQ 提取码：h2zt</p>
<p>出处：1. https://github.com/mitroadmaps/roadtagger 2.<a class="link" href="https://blog.csdn.net/weixin_42990464/article/details/113699960">(44条消息) 基于遥感影像的道路提取论文、开源代码和数据集汇总_点PY的博客-CSDN博客_道路提取<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="generative-graph-transformer">Generative Graph Transformer</h3>
<h5 id="数据集详细情况-2">数据集详细情况</h5>
<p>图卢兹道路网络数据集。如果运行该脚本，将下载我们论文中介绍的数据集（图卢兹道路网络数据集）。 图卢兹路网数据集，用于从卫星图像的语义分割中提取道路网 ##### 数据集下载地址 数据集下载： generative-graph-transformer/download_dataset.sh at master · davide-belli/generative-graph-transformer (github.com) 出处：1. https://github.com/davide-belli/generative-graph-transformer 2.<a class="link" href="https://blog.csdn.net/weixin_42990464/article/details/113699960">(44条消息) 基于遥感影像的道路提取论文、开源代码和数据集汇总_点PY的博客-CSDN博客_道路提取<i class="fas fa-external-link-alt"></i></a> ### road_connectivity ##### 数据集详细情况 在本文中，我们提出了一个名为方向学习的连接任务，其动机是人类通过在特定方向跟踪道路来注释道路的行为。我们还开发了一个堆叠的多分支卷积模块，以有效地利用方向学习和分割任务之间的相互信息。 ##### 数据集下载地址 数据集下载： road_connectivity/data at master · anilbatra2185/road_connectivity (github.com) 出处：1. https://github.com/anilbatra2185/road_connectivity 2.(44条消息) 基于遥感影像的道路提取论文、开源代码和数据集汇总_点PY的博客-CSDN博客_道路提取 ### DeepGlobeRoad ##### 数据集详细情况 比赛数据集包含6226张训练图像，1243张验证图像，以及1101张测试图像。所有的图像尺寸均为1024*1024，图像来源于泰国、印度、印度尼西亚，图像场景包括城市、乡村、荒郊、海滨、热带雨林等多个场景。 ##### 数据集下载地址 数据集下载： 链接：https://pan.baidu.com/s/1aG1qdTFEcIwzh2YruBGUNA 提取码：podb 出处：<a class="link" href="https://blog.csdn.net/weixin_42990464/article/details/113699960">(44条消息) 基于遥感影像的道路提取论文、开源代码和数据集汇总_点PY的博客-CSDN博客_道路提取<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>路网识别数据集</category>
      </categories>
      <tags>
        <tag>路网识别</tag>
        <tag>数据集</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch安装</title>
    <url>/2022/10/02/pytorchsetup/</url>
    <content><![CDATA[<h2 id="anaconda的安装以及使用清华源镜像安装pytorch">Anaconda的安装以及使用清华源镜像安装pytorch</h2>
<h3 id="anaconda的安装">Anaconda的安装</h3>
<p>因为在他官网的安装速度缓慢，所以我们选择在清华源镜像站安装 这里我选择的是Anaconda3-5.3.1-Windows-x86_64.exe<a class="link" href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.3.1-Windows-x86_64.exe">清华源镜像站anaconda安装包<i class="fas fa-external-link-alt"></i></a> 其实也可以选择官网然后复制下载链接去迅雷下载 下载好安装包之后，双击运行。将会出现下图，点击<code>Next</code>即可： 也是点击<code>I Agree</code>即可 接下来需要选择<code>All Users</code>，点击<code>Next</code> 接下来选择自己想要安装的地址，点击<code>Browse</code>，再点击<code>Next</code>即可接下来就是如下图,上面的是环境变量可以勾选，再点击<code>Install</code> ### 安装pytorch ##### 创建Pytorch虚拟环境 打开Anaconda Prompt,输入下列命令：（版本号可以改为自己需要的） <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n pytorch python=3.8</span><br></pre></td></tr></table></figure> 启用创建的环境： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate pytorch</span><br></pre></td></tr></table></figure> ##### 其他：Anaconda重命名canda虚拟环境（通过复制和删除操作实现） 首先对要需要重命名的conda环境进行复制 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是简化的命令形式</span></span><br><span class="line">conda create -n conda-new --<span class="built_in">clone</span> conda-old</span><br><span class="line"><span class="comment"># 下面是完整的命令形式</span></span><br><span class="line">conda create --name conda-new --<span class="built_in">clone</span> conda-old</span><br></pre></td></tr></table></figure> 然后删除原有的conda环境： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda remove -n conda-old --all</span><br></pre></td></tr></table></figure> --all：表示删除整个conda环境；</p>
<h5 id="pytorch官网选择配置">PyTorch官网选择配置</h5>
<ul>
<li>先看你的显卡版本，再去下载Pytorch版本 <code>win</code>+<code>r</code>打开CMD命令行输入<code>nvidia-smi</code>可以查看自己的版本驱动，务必保证驱动版本大于396.26，且看到自己的CUDA版本号是10.2</li>
<li>打开Anaconda Prompt 在cmd中以此输入一下代码来添加清华镜像源 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls <span class="built_in">yes</span></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ </span><br></pre></td></tr></table></figure> 查看否修改到通道，输入： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda config --show channels</span><br></pre></td></tr></table></figure></li>
<li>可以试试使用conda安装/升级pip <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install pip</span><br></pre></td></tr></table></figure></li>
<li>查看当前环境 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure></li>
<li>在Pytorch网站查询需要安装的版本，<a class="link" href="https://pytorch.org/get-started/locally/">官网<i class="fas fa-external-link-alt"></i></a> 在选择PyTorch Build 中我们一般选择Stable OS 选择你需要装在电脑的系统 Package 我使用Conda一直安装不成功，我使用是的Pip Language 自然选择Python Computer Platform CUDA的版本要根据你的显卡来选择，要选择与你版本最近而不超过的 到此时就会出来一段命令。但我们直接输入此命令往往会下载很久且没有结果。这里建议加上清华的镜像网站会快很多。具体操作如下：</li>
</ul>
<h5 id="使用国内源下载pytorch">使用国内源下载Pytorch</h5>
<p>我们需要在上步骤的那一段命令加上一句 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br></pre></td></tr></table></figure> 最后我们运行的命令为： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu113 -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br></pre></td></tr></table></figure> 我下载的差不多又六分钟，最后显示下载成功。 当然，我们安装其他库是也可以使用这个命令进行快速下载！！！ <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install xxx -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure> 如果这个不成功，就再试试这个！ <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install 包名 -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure> 把xxx,替换成我们需要的库名就好啦！ ###### 最后验证是否安装成功 - 命令行输入python - 输入import torch - 输入torch.cuda.is_available() - 如果显示为True则安装成功了</p>
]]></content>
      <categories>
        <category>pytorch</category>
      </categories>
      <tags>
        <tag>pytorch安装</tag>
        <tag>深度学习框架</tag>
      </tags>
  </entry>
  <entry>
    <title>first one</title>
    <url>/2022/09/19/the-new-day/</url>
    <content><![CDATA[<h2 id="美好的一天从躺平开始">美好的一天从躺平开始！！</h2>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>水文</tag>
      </tags>
  </entry>
  <entry>
    <title>发博文</title>
    <url>/2022/09/19/sendBlog/</url>
    <content><![CDATA[<h3 id="发博文">发博文</h3>
<h5 id="使用下面命令创建一个md文档">1.使用下面命令创建一个md文档</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npx hexo new  <span class="string">&quot;页面名称&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后在source_posts中可以找到刚刚创建的文档 ##### 写文档 要实现顶置的文章，需在文章页添加 <code>sticky</code>属性，<code>sticky</code> 值越大，顶置的文章越靠前 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">tile:</span><br><span class="line"><span class="built_in">date</span>:</span><br><span class="line">tages:</span><br><span class="line">categories</span><br><span class="line">sticky: 999</span><br><span class="line">---</span><br><span class="line">在这里开始写博文的正文</span><br></pre></td></tr></table></figure> 博文是用Markdown语言写的，所以你可以用Markdown编辑器。推荐 Haroopad和MaHua ##### 发博文 只需要输入三个命令就可以了 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx hexo clean</span><br><span class="line">npx hexo generate</span><br><span class="line">git config --global user.name <span class="string">&quot;你的GitHub名字&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的GitHub邮箱&quot;</span></span><br><span class="line">(若要本地预览就先执行 hexo server)</span><br><span class="line">npx hexo deploy</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>发博文</tag>
      </tags>
  </entry>
</search>
