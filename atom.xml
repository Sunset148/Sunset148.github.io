<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BBlog</title>
  
  
  <link href="https://sunset148.github.io/atom.xml" rel="self"/>
  
  <link href="https://sunset148.github.io/"/>
  <updated>2023-09-27T05:40:24.158Z</updated>
  <id>https://sunset148.github.io/</id>
  
  <author>
    <name>Warrior</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IdentifyApplets</title>
    <link href="https://sunset148.github.io/2023/09/27/IdentifyApplets/"/>
    <id>https://sunset148.github.io/2023/09/27/IdentifyApplets/</id>
    <published>2023-09-27T03:10:25.000Z</published>
    <updated>2023-09-27T05:40:24.158Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微信手写识别-x2F-银行卡卡号识别-x2F-身份证识别"><a href="#微信手写识别-x2F-银行卡卡号识别-x2F-身份证识别" class="headerlink" title="微信手写识别&#x2F;银行卡卡号识别&#x2F;身份证识别"></a>微信手写识别&#x2F;银行卡卡号识别&#x2F;身份证识别</h2><h3 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h3><p>此项目仅提供个人使用未上线未开源，开发平台为微信开发者工具，使用了云函数，百度云API调用接口实现识别，在识别后显示到屏幕中可修改，最后可导出为excel表格。</p><div align="center">    <img src="/2023/09/27/IdentifyApplets/1.jpg" width="200" height="400">    <p>作品展示</p></div><h3 id="项目开发"><a href="#项目开发" class="headerlink" title="项目开发"></a>项目开发</h3><h4 id="入手微信开发者工具"><a href="#入手微信开发者工具" class="headerlink" title="入手微信开发者工具"></a>入手微信开发者工具</h4><ol><li><p>注册微信小程序<br>如果你还没有微信公众平台的账号，请先进入<a class="link" href="https://mp.weixin.qq.com/wxamp/home/guide?lang=zh_CN&token=831047294">微信公众平台首页<i class="fas fa-external-link-alt"></i></a>，点击 <code>立即注册</code> 按钮进行注册。注册的账号类型可以是订阅号、服务号、小程序以及企业微信，我们选择 <code>小程序</code> 即可。<br>接着填写账号信息，需要注意的是，填写的邮箱必须是未被微信公众平台注册、未被个人微信号绑定的邮箱，而且每个邮箱仅能申请一个小程序。<br>激活邮箱之后，选择主体类型为 <code>个人类型</code>，并按要求登记主体信息。主体信息提交后不可修改，该主体将成为你使用微信公众平台各项服务和功能的唯一法律主体与缔约主体，在后续开通其他业务功能时不得变更或修改。</p></li><li><p>下载微信开发者工具<br>下载<a class="link" href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=19010912">微信web开发者工具<i class="fas fa-external-link-alt"></i></a>，根据自己的操作系统下载对应的安装包进行安装即可。<br>通过查看<a class="link" href="https://developers.weixin.qq.com/miniprogram/dev/framework/">官网文档<i class="fas fa-external-link-alt"></i></a>可以更快了解到小程序的开发逻辑<br>打开开发者工具，用微信扫码登录开发者工具，准备开发你的第一个小程序吧！</p></li><li><p>创建项目<br><b>新建项目</b><br>打开<code>开发者工具</code>，选择 <code>小程序项目</code>，点击右下角的 <code>+</code> 新建项目。<br>选择一个空的文件夹作为项目目录，填入刚刚的 AppID，再填写一个项目名称，比如我这里叫做 ID。点击 <code>确定</code> 进入工具主界面<br><b>项目结构</b></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── app.js     <span class="comment"># 小程序的逻辑文件</span></span><br><span class="line">├── app.json   <span class="comment"># 小程序的配置文件</span></span><br><span class="line">├── app.wxss   <span class="comment"># 全局公共样式文件</span></span><br><span class="line">├── pages      <span class="comment"># 存放小程序的各个页面</span></span><br><span class="line">│   ├── index  <span class="comment"># index页面</span></span><br><span class="line">│   │   ├── index.js     <span class="comment"># 页面逻辑</span></span><br><span class="line">│   │   ├── index.wxml   <span class="comment"># 页面结构</span></span><br><span class="line">│   │   └── index.wxss   <span class="comment"># 页面样式表</span></span><br><span class="line">│   └── logs   <span class="comment"># logs页面</span></span><br><span class="line">│       ├── logs.js      <span class="comment"># 页面逻辑</span></span><br><span class="line">│       ├── logs.json    <span class="comment"># 页面配置</span></span><br><span class="line">│       ├── logs.wxml    <span class="comment"># 页面结构</span></span><br><span class="line">│       └── logs.wxss    <span class="comment"># 页面样式表</span></span><br><span class="line">├── project.config.json</span><br><span class="line">└── utils</span><br><span class="line">    └── util.js</span><br></pre></td></tr></table></figure><p>根目录下有3个文件：app.js、app.json、app.wxss，小程序必须有这3个描述 APP 的文件，并放在根目录下。这3个是应用程序级别的文件，与之平行的还有一个 pages 文件夹，用来存放小程序的各个页面。<br>我们可以和 web 前端开发技术做个类比：</p></li></ol><ul><li>wxml 类似于 HTML 文件，用来编写页面的标签和骨架，但里面只能用小程序自己封装的组件；</li><li>wxss 类似于 CSS 文件，用来编写页面样式，只是把 css 文件换成了 wxss 文件；</li><li>js 文件类似于前端编程中的 JavaScript 文件，用来编写小程序的页面逻辑；</li><li>json 文件用来配置页面的样式和行为。</li></ul><h4 id="微信云开发"><a href="#微信云开发" class="headerlink" title="微信云开发"></a>微信云开发</h4><p>微信云开发是微信团队联合腾讯云推出的专业的小程序开发服务。<br>开发者可以使用云开发快速开发小程序、小游戏、公众号网页等，并且原生打通微信开放能力。<br>开发者无需搭建服务器，可免鉴权直接使用平台提供的 API 进行业务开发。</p><h5 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h5><ol><li><p>准备工作<br>下载并安装<a class="link" href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">微信开发者工具<i class="fas fa-external-link-alt"></i></a>；<br><a class="link" href="https://mp.weixin.qq.com/">注册微信小程序<i class="fas fa-external-link-alt"></i></a>，获取小程序的 AppID（开发管理-开发设置）</p></li><li><p>创建项目<br>打开并登录微信开发者工具，新建小程序项目，填入 AppID，后端服务选择<code>微信云开发</code>并勾选同意<code>云开发服务条款</code>：</p><div align="center"> <img src="/2023/09/27/IdentifyApplets/2.png" width="600" height="400"></div>点击创建后，即可得到一个展示云开发基础能力的示例小程序：<div align="center"> <img src="/2023/09/27/IdentifyApplets/3.png" width="600" height="400"></div></li><li><p>开通云开发，创建环境<br>在使用云开发能力之前，需要先开通云开发。<br>在开发者工具的工具栏左侧，点击 <code>云开发</code> 按钮即可打开云控制台，根据提示开通云开发，并且创建一个新的云开发环境。</p><div align="center"> <img src="/2023/09/27/IdentifyApplets/4.png" width="600" height="100"></div></li></ol><ul><li>每个环境相互隔离，拥有唯一的环境<code> ID</code>，包含独立的数据库实例、存储空间、云函数配置等资源；</li><li>初始创建的环境自动成为默认环境；</li><li>默认配额下可以创建两个环境；</li><li>腾讯云控制台创建的云开发环境也可在微信云开发中使用。登录微信云开发控制台-设置-环境设置，点击环境名称，选择<code>管理我的环境</code>，点击<code>使用已有腾讯云环境</code>按钮，选择所需腾讯云环境，即可在微信云开发控制台使用该环境。</li></ul><h4 id="使用百度云接口实现识别"><a href="#使用百度云接口实现识别" class="headerlink" title="使用百度云接口实现识别"></a>使用百度云接口实现识别</h4><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>如今人们对于信息的获取需求越来越高，而图像识别技术的发展为我们带来了更加便捷高效的信息获取方式。微信小程序作为一种新型的应用形态，越来越受到用户的青睐。而本文将为大家介绍微信小程序基于百度云的图文识别技术。让我们一起来看看微信小程序基于百度云实现图文识别的奇妙之处吧！</p><h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><ol><li>首先我们需要注册一个百度云账号<a class="link" href="https://cloud.baidu.com/?from=console">百度云<i class="fas fa-external-link-alt"></i></a><div align="center"> <img src="/2023/09/27/IdentifyApplets/5.jpg" width="600" height="400"></div></li><li>注册完毕后搜索文字识别<div align="center"> <img src="/2023/09/27/IdentifyApplets/6.jpg" width="600" height="400"></div></li><li>点击创建应用，然后根据需求开通需要的功能<div align="center"> <img src="/2023/09/27/IdentifyApplets/7.jpg" width="600" height="400"></div></li><li>领取免费测试资源<br>登录进入[文字识别控制台](登录进入 文字识别控制台，在【概览】页找到「领取免费资源」按钮。)，在<code>概览</code>页找到<code>领取免费资源</code>按钮。<div align="center"> <img src="/2023/09/27/IdentifyApplets/11.png" width="600" height="400"> <img src="/2023/09/27/IdentifyApplets/12.png" width="600" height="400"></div></li><li>复制已经创建应用的<code> AppID</code>、<code>API Key</code>、<code>Secret Key </code>的值，代码中会用到<div align="center"> <img src="/2023/09/27/IdentifyApplets/8.jpg" width="600" height="400"></div></li><li>上面一系列操作完成后，打开微信小程序社区平台配置服务器域名<a class="link" href="https://mp.weixin.qq.com/wxamp/home/guide?lang=zh_CN&token=1574361629">微信小程序社区平台<i class="fas fa-external-link-alt"></i></a><div align="center"> <img src="/2023/09/27/IdentifyApplets/9.jpg" width="600" height="400"></div></li><li>回到微信开发者工具刷新<br>点击<code>详情</code> -&gt;<code> 项目配置</code> -&gt;<code> 刷新图表</code><div align="center"> <img src="/2023/09/27/IdentifyApplets/10.jpg" width="600" height="400"></div></li><li>项目中使用<br>在主页面<code>index.wxml</code>中添加按钮和布置页面<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">  &lt;!-- 前三个按钮样式 --&gt;</span><br><span class="line">    &lt;button bindtap=<span class="string">&#x27;idRecognition&#x27;</span> class=<span class="string">&quot;button primary-button&quot;</span>&gt;身份证正/反识别&lt;/button&gt;</span><br><span class="line">    &lt;button bindtap=<span class="string">&quot;digitalRecognition&quot;</span> class=<span class="string">&quot;button primary-button&quot;</span>&gt;图文识字&lt;/button&gt;</span><br><span class="line">    &lt;button bindtap=<span class="string">&quot;bankIdentification&quot;</span> class=<span class="string">&quot;button primary-button&quot;</span>&gt;银行卡号识别&lt;/button&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;table&quot;</span>&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;姓名:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;name&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onNameChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;性别:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;gender&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onGenderChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;民族:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;nationality&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onNationalityChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;生日:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;birth&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onBirthChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;地址:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;address&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onAddressChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;身份证号:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;id&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onIdChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;签发机关:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;authority&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onAuthorityChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;签发日期:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;issueDate&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onIssueDateChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;失效日期:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;expirationDate&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onExpirationDateChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;银行卡号:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;bankCardNumber&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onBankCardNumberChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;label&quot;</span>&gt;手机号:&lt;/view&gt;</span><br><span class="line">    &lt;input class=<span class="string">&quot;value&quot;</span> value=<span class="string">&quot;&#123;&#123;phoneNumber&#125;&#125;&quot;</span> bindinput=<span class="string">&quot;onPhoneNumberChange&quot;</span> /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">  &lt;!-- 提交和清空按钮 --&gt;</span><br><span class="line">    &lt;button bindtap=<span class="string">&quot;saveDataToCloud&quot;</span> class=<span class="string">&quot;button secondary-button&quot;</span>&gt;确定&lt;/button&gt;</span><br><span class="line">    &lt;button bindtap=<span class="string">&quot;exportToExcel&quot;</span> class=<span class="string">&quot;button secondary-button&quot;</span>&gt;导出&lt;/button&gt;</span><br><span class="line">    &lt;button bindtap=<span class="string">&quot;clear&quot;</span> class=<span class="string">&quot;button secondary-button&quot;</span>&gt;清空数据&lt;/button&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li></ol><hr><p>在主页面<code>index.wxss</code>中添加样式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">.button-group &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">&#125;</span><br><span class="line">.button &#123;</span><br><span class="line">  padding: 10px 20px;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  flex-grow: 1;</span><br><span class="line">  text-align: center;</span><br><span class="line">  margin: 5px;</span><br><span class="line">&#125;</span><br><span class="line">.primary-button &#123;</span><br><span class="line">  background-color: <span class="comment">#007bff;</span></span><br><span class="line">  color: <span class="comment">#fff;</span></span><br><span class="line">  border: none;</span><br><span class="line">&#125;</span><br><span class="line">.secondary-button &#123;</span><br><span class="line">  background-color: <span class="comment">#ff5722;</span></span><br><span class="line">  color: <span class="comment">#fff;</span></span><br><span class="line">  border: none;</span><br><span class="line">&#125;</span><br><span class="line">.table &#123;</span><br><span class="line">  border: 1px solid <span class="comment">#ddd;</span></span><br><span class="line">  padding: 10px;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  text-align: left;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">&#125;</span><br><span class="line">.row &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  margin-bottom: 10px;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">.label &#123;</span><br><span class="line">  width: 80px;</span><br><span class="line">  text-align: right;</span><br><span class="line">  margin-right: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.value &#123;</span><br><span class="line">  flex-grow: 1;</span><br><span class="line">&#125;</span><br><span class="line">.button:hover &#123;</span><br><span class="line">  opacity: 0.8;</span><br><span class="line">&#125;</span><br><span class="line">.table-container &#123;</span><br><span class="line">  margin: 20px;</span><br><span class="line">  border: 1px solid <span class="comment">#ddd;</span></span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.table &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  background-color: <span class="comment">#fff;</span></span><br><span class="line">  border-collapse: collapse;</span><br><span class="line">&#125;</span><br><span class="line">.table-header &#123;</span><br><span class="line">  background-color: <span class="comment">#007bff;</span></span><br><span class="line">  color: <span class="comment">#fff;</span></span><br><span class="line">  display: flex;</span><br><span class="line">  border-bottom: 1px solid <span class="comment">#ddd;</span></span><br><span class="line">&#125;</span><br><span class="line">.header-cell &#123;</span><br><span class="line">  flex-grow: 1;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.table-row &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  border-bottom: 1px solid <span class="comment">#ddd;</span></span><br><span class="line">&#125;</span><br><span class="line">.table-cell &#123;</span><br><span class="line">  flex-grow: 1;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">/* 悬浮效果 */</span><br><span class="line">.table-row:hover &#123;</span><br><span class="line">  background-color: <span class="comment">#f5f5f5;</span></span><br><span class="line">&#125;</span><br><span class="line">/* 奇偶行背景色 */</span><br><span class="line">.table-row:nth-child(odd) &#123;</span><br><span class="line">  background-color: <span class="comment">#f9f9f9;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则展示如下</p><div align="center">    <img src="/2023/09/27/IdentifyApplets/1.jpg" width="200" height="400"></div><hr><p>在<code>idnex.js</code>中<br>我们首先要获取<code>百度access_token  </code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 获取百度access_token  </span><br><span class="line">  getBaiduToken: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    var apiKey = <span class="string">&#x27;yoursapiKey&#x27;</span> //百度云上的apiKey</span><br><span class="line">    var secKey = <span class="string">&#x27;yoursSECkey&#x27;</span> //百度云上的secKey</span><br><span class="line">    var tokenUrl = `https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=<span class="variable">$&#123;apiKey&#125;</span>&amp;client_secret=<span class="variable">$&#123;secKey&#125;</span>`; //调用百度云api接口</span><br><span class="line">    var that = this; //防止this指向问题</span><br><span class="line">    // 发送请求</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: tokenUrl,</span><br><span class="line">      method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      dataType: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">      header: &#123;</span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json; charset-UTF-8&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      // 返回数据</span><br><span class="line">      success: <span class="keyword">function</span> (res) &#123;</span><br><span class="line">        // console.log(<span class="string">&quot;baiduToken:&quot;</span>,res);</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          baiduToken: res.data.access_token</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 错误信息</span><br><span class="line">      fail: <span class="keyword">function</span> (res) &#123;</span><br><span class="line">        console.log(<span class="string">&quot;[BaiduToken获取失败]&quot;</span>, res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>然后调用接口实现功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// 手写数字识别 百度ORC接口调用  </span><br><span class="line">  scanImageInfo: <span class="keyword">function</span> (imageData) &#123; // 将图片转换成<span class="built_in">base64</span>格式</span><br><span class="line">   var that = this; //防止this指向问题</span><br><span class="line">   const detectUrl = `https://aip.baidubce.com/rest/2.0/ocr/v1/accurate_basic?access_token=<span class="variable">$&#123;that.data.baiduToken&#125;</span>` // 调用百度云api接口并传递baiduToken</span><br><span class="line">   <span class="built_in">return</span> new Promise(<span class="keyword">function</span> (resolve, reject) &#123;</span><br><span class="line">     // 发送请求</span><br><span class="line">     wx.request(&#123;</span><br><span class="line">       url: detectUrl,</span><br><span class="line">       data: &#123;</span><br><span class="line">         image: imageData</span><br><span class="line">       &#125;,</span><br><span class="line">       method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">       dataType: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">       header: &#123;</span><br><span class="line">         <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">       &#125;,</span><br><span class="line">       // 返回数据</span><br><span class="line">       success: <span class="keyword">function</span> (res, resolve) &#123;</span><br><span class="line">         var dataList = res.data.words_result[0].words</span><br><span class="line">         console.log(res.data.words_result[0].words, <span class="string">&quot;识别内容&quot;</span>);</span><br><span class="line">         // 赋值给data中定义的变量</span><br><span class="line">         that.setData(&#123;</span><br><span class="line">           phoneNumber: dataList</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;,</span><br><span class="line">       // 错误信息</span><br><span class="line">       fail: <span class="keyword">function</span> (res, reject) &#123;</span><br><span class="line">         console.log(<span class="string">&#x27;get dataList fail：&#x27;</span>, res.data);</span><br><span class="line">       &#125;,</span><br><span class="line"></span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>然后按钮点击接入接口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">digitalRecognition: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">   var that = this</span><br><span class="line">   that.getBaiduToken() // 提前获取access_Token</span><br><span class="line">   // 选择图片，拍照或从相册中获取</span><br><span class="line">   wx.chooseImage(&#123;</span><br><span class="line">     count: 1,</span><br><span class="line">     sizeType: [<span class="string">&#x27;compressed&#x27;</span>],</span><br><span class="line">     sourceType: [<span class="string">&#x27;album&#x27;</span>, <span class="string">&#x27;camera&#x27;</span>],</span><br><span class="line">     success: <span class="keyword">function</span> (res) &#123;</span><br><span class="line">       wx.showLoading(&#123;</span><br><span class="line">         title: <span class="string">&#x27;上传中&#x27;</span>,</span><br><span class="line">       &#125;)</span><br><span class="line">       const filePath = res.tempFilePaths[0]</span><br><span class="line">       // 上传图片        </span><br><span class="line">       wx.getFileSystemManager().readFile(&#123;</span><br><span class="line">         filePath: filePath,</span><br><span class="line">         encoding: <span class="string">&#x27;base64&#x27;</span>,</span><br><span class="line">         // 返回数据</span><br><span class="line">         success: <span class="keyword">function</span> (res) &#123;</span><br><span class="line">           // console.log(<span class="string">&quot;图片数据&quot;</span>, res);</span><br><span class="line">           // 识别的图片复赋值</span><br><span class="line">           that.setData(&#123;</span><br><span class="line">             imageUrl: res.data</span><br><span class="line">           &#125;)</span><br><span class="line">           that.scanImageInfo(res.data); // 调用百度API解析图片获取文字      </span><br><span class="line">         &#125;,</span><br><span class="line">         // 错误信息</span><br><span class="line">         fail: <span class="keyword">function</span> (res) &#123;</span><br><span class="line">           console.log(<span class="string">&quot;[读取图片数据fail]&quot;</span>, res)</span><br><span class="line">         &#125;,</span><br><span class="line">         complete: <span class="keyword">function</span> (res) &#123;</span><br><span class="line">           wx.hideLoading()</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>以上实现了手写识别功能。<br>如果要实现其他功能请查看<a class="link" href="https://cloud.baidu.com/doc/OCR/s/dk3iqnq51">百度智慧云官网文档<i class="fas fa-external-link-alt"></i></a>进行查看，其中的方法是类似的。</p><h4 id="小程序导出数据到excel表，借助云开发后台实现excel数据的保存"><a href="#小程序导出数据到excel表，借助云开发后台实现excel数据的保存" class="headerlink" title="小程序导出数据到excel表，借助云开发后台实现excel数据的保存"></a>小程序导出数据到excel表，借助云开发后台实现excel数据的保存</h4><h5 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h5><p>我们在做小程序开发的过程中，可能会有这样的需求，就是把我们云数据库里的数据批量导出到excel表里。如果直接在小程序里写是实现不了的，所以我们要借助小程序的云开发功能了。这里需要用到云函数，云存储和云数据库。可以说通过这一个例子，把我们微信小程序云开发相关的知识都用到了。</p><h5 id="项目开发-1"><a href="#项目开发-1" class="headerlink" title="项目开发"></a>项目开发</h5><ul><li>1，创建云函数</li><li>2，在云函数里读取云数据库里的数据</li><li>3，安装node-xlsx类库（node类库）</li><li>4，把云数据库里读取到的数据存到excel里</li><li>5，把excel存到云存储里并返回对应的云文件地址</li><li>6，通过云文件地址下载excel文件</li></ul><h6 id="一，创建excel云函数"><a href="#一，创建excel云函数" class="headerlink" title="一，创建excel云函数"></a>一，创建excel云函数</h6><p><b>创建云函数时有两点需要注意的，给大家说下</b></p><ol><li>一定要把app.js里的环境id换成你自己的</li><li>你的云函数目录要选择你对应的云开发环境（通常这里默认选中的）不过你这里的云开发环境要和你app.js里的保持一致</li></ol><h6 id="二，读取云数据库里的数据"><a href="#二，读取云数据库里的数据" class="headerlink" title="二，读取云数据库里的数据"></a>二，读取云数据库里的数据</h6><p>我们第一步创建好云函数以后，可以先在云函数里读取我们的云数据库里的数据。</p><ol><li>先看看我们云数据库里面的数据<br>进去<code>微信开发者工具</code>-&gt;<code>云开发</code>-&gt;<code>数据库</code><div align="center"> <img src="/2023/09/27/IdentifyApplets/13.jpg" width="800" height="400"></div></li><li>编写云函数，读取云数据库里的数据（一定要记得部署云函数）<br>右击后点击<code>新建Node.js云函数</code><div align="center"> <img src="/2023/09/27/IdentifyApplets/14.jpg" width="800" height="400"></div>然后在云函数文件下的`index.js`,用于获取集合为`idCardData`下面的所有数据。（集合名填入自己集合的名字）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 云函数入口文件</span><br><span class="line">const cloud = require(<span class="string">&#x27;wx-server-sdk&#x27;</span>);</span><br><span class="line">cloud.init(&#123; <span class="built_in">env</span>: cloud.DYNAMIC_CURRENT_ENV &#125;) // 使用当前云环境</span><br><span class="line">// 云函数入口函数</span><br><span class="line">exports.main = async(event, context) =&gt; &#123;</span><br><span class="line">  <span class="built_in">return</span> await cloud.database().collection(<span class="string">&#x27;idCardData&#x27;</span>).get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>部署同样右击云函数文件夹点击部署即可</li></ol><h6 id="三、-安装生成excel文件的类库-node-xlsx"><a href="#三、-安装生成excel文件的类库-node-xlsx" class="headerlink" title="三、 安装生成excel文件的类库 node-xlsx"></a>三、 安装生成excel文件的类库 node-xlsx</h6><p>通过上面第二步可以看到我们已经成功的拿到需要保存到excel的源数据，我们接下来要做的就是把数据保存到excel</p><p>1，安装node-xlsx类库<br>同样按照第二步新建一个excel的云函数，然后右击excel文件夹选择<code>在终端中打开</code><br>这一步需要我们事先安装node,因为我们要用到npm命令，通过命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install node-xlsx</span><br></pre></td></tr></table></figure><p>可以看出我们安装完成以后，多了一个package-lock.json的文件</p><div align="center">    <img src="/2023/09/27/IdentifyApplets/15.jpg" width="200" height="400"></div><h6 id="四、-编写把数据保存到excel的代码，"><a href="#四、-编写把数据保存到excel的代码，" class="headerlink" title="四、 编写把数据保存到excel的代码，"></a>四、 编写把数据保存到excel的代码，</h6><p>在excel的云函数的<code>index.js</code>中填入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">// 云函数入口文件</span><br><span class="line">const cloud = require(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cloud.init(&#123; <span class="built_in">env</span>: cloud.DYNAMIC_CURRENT_ENV &#125;) // 使用当前云环境</span><br><span class="line">const xlsx = require(<span class="string">&#x27;node-xlsx&#x27;</span>);</span><br><span class="line"></span><br><span class="line">// 云函数入口函数</span><br><span class="line">// 云函数入口函数</span><br><span class="line">exports.main = async(event, context) =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    <span class="built_in">let</span> &#123;IDdata&#125; = event</span><br><span class="line">    </span><br><span class="line">    //1,定义excel表格名</span><br><span class="line">    <span class="built_in">let</span> dataCVS = <span class="string">&#x27;test.xlsx&#x27;</span></span><br><span class="line">    //2，定义存储数据的</span><br><span class="line">    <span class="built_in">let</span> alldata = [];</span><br><span class="line">    <span class="built_in">let</span> row = [<span class="string">&#x27;姓名&#x27;</span>, <span class="string">&#x27;性别&#x27;</span>, <span class="string">&#x27;民族&#x27;</span>, <span class="string">&#x27;出生&#x27;</span>, <span class="string">&#x27;地址&#x27;</span>, <span class="string">&#x27;ID&#x27;</span>, <span class="string">&#x27;签发机关&#x27;</span>,<span class="string">&#x27;签发日期&#x27;</span>,<span class="string">&#x27;失效日期&#x27;</span>,<span class="string">&#x27;银行卡号&#x27;</span>,<span class="string">&#x27;手机号&#x27;</span>]; //表属性</span><br><span class="line">    alldata.push(row);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">let</span> key <span class="keyword">in</span> IDdata) &#123;</span><br><span class="line">      <span class="built_in">let</span> arr = [];</span><br><span class="line">      arr.push(IDdata[key].name);</span><br><span class="line">      arr.push(IDdata[key].gender);</span><br><span class="line">      arr.push(IDdata[key].nationality);</span><br><span class="line">      arr.push(IDdata[key].birth);</span><br><span class="line">      arr.push(IDdata[key].address);</span><br><span class="line">      arr.push(IDdata[key].<span class="built_in">id</span>);</span><br><span class="line">      arr.push(IDdata[key].authority);</span><br><span class="line">      arr.push(IDdata[key].issueDate);      </span><br><span class="line">      arr.push(IDdata[key].expirationDate);</span><br><span class="line">      arr.push(IDdata[key].bankCardNumber);</span><br><span class="line">      arr.push(IDdata[key].phoneNumber);</span><br><span class="line">      alldata.push(arr)</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(<span class="string">&quot;alldata:&quot;</span>,alldata)</span><br><span class="line">    //3，把数据保存到excel里</span><br><span class="line">    var buffer = await xlsx.build([&#123;</span><br><span class="line">      name: <span class="string">&quot;mySheetName&quot;</span>,</span><br><span class="line">      data: alldata</span><br><span class="line">    &#125;]);</span><br><span class="line">    //4，把excel文件保存到云存储里</span><br><span class="line">    <span class="built_in">return</span> await cloud.uploadFile(&#123;</span><br><span class="line">      cloudPath: dataCVS,</span><br><span class="line">      fileContent: buffer, //excel二进制文件</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.error(e)</span><br><span class="line">    <span class="built_in">return</span> e</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="五，把excel存到云存储里并返回对应的云文件地址"><a href="#五，把excel存到云存储里并返回对应的云文件地址" class="headerlink" title="五，把excel存到云存储里并返回对应的云文件地址"></a>五，把excel存到云存储里并返回对应的云文件地址</h6><p>我们上面已经成功的把数据存到excel里，并把excel文件存到云存储里。可以看下效果。</p><div align="center">    <img src="/2023/09/27/IdentifyApplets/16.jpg" width="700" height="400"></div>我们这个时候，就可以通过上图的下载地址下载excel文件了。其实到这里就差不多实现了基本的把数据保存到excel里的功能了，但是我们要下载excel，总不能每次都去云开发后台吧。所以我们接下来要动态的获取这个下载地址。<h6 id="六，获取云文件地址下载excel文件"><a href="#六，获取云文件地址下载excel文件" class="headerlink" title="六，获取云文件地址下载excel文件"></a>六，获取云文件地址下载excel文件</h6><p>进如<code>index</code>文件下的<code>index.js</code>将下载地址给用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//把数据保存到excel里，并把excel保存到云存储</span><br><span class="line"> savaExcel(IDdata) &#123;</span><br><span class="line">   <span class="built_in">let</span> that = this</span><br><span class="line">   wx.cloud.callFunction(&#123;</span><br><span class="line">     name: <span class="string">&quot;excle&quot;</span>,</span><br><span class="line">     data: &#123;</span><br><span class="line">       IDdata: IDdata</span><br><span class="line">     &#125;,</span><br><span class="line">     success(res) &#123;</span><br><span class="line">       console.log(<span class="string">&quot;保存成功&quot;</span>, res)</span><br><span class="line">       that.getFileUrl(res.result.fileID)</span><br><span class="line">     &#125;,</span><br><span class="line">     fail(res) &#123;</span><br><span class="line">       console.log(<span class="string">&quot;保存失败&quot;</span>, res)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br><span class="line"> //获取云存储文件下载地址，这个地址有效期一天</span><br><span class="line"> getFileUrl(fileID) &#123;</span><br><span class="line">   <span class="built_in">let</span> that = this;</span><br><span class="line">   wx.cloud.getTempFileURL(&#123;</span><br><span class="line">     fileList: [fileID],</span><br><span class="line">     success: res =&gt; &#123;</span><br><span class="line">       // get temp file URL</span><br><span class="line">       console.log(<span class="string">&quot;文件下载链接&quot;</span>, res.fileList[0].tempFileURL)</span><br><span class="line">       that.setData(&#123;</span><br><span class="line">         fileUrl: res.fileList[0].tempFileURL</span><br><span class="line">       &#125;)</span><br><span class="line">       // 弹出提示框</span><br><span class="line">       wx.showModal(&#123;</span><br><span class="line">         title: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">         content: <span class="string">&#x27;要复制下载表格吗？&#x27;</span>,</span><br><span class="line">         confirmText: <span class="string">&#x27;复制&#x27;</span>,</span><br><span class="line">         cancelText: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">         success(res) &#123;</span><br><span class="line">           <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">             // 用户点击了确认按钮</span><br><span class="line">             // 执行复制网址的逻辑</span><br><span class="line">             const urlToCopy = that.data.fileUrl; // 替换为要复制的网址</span><br><span class="line">             wx.setClipboardData(&#123;</span><br><span class="line">               data: urlToCopy,</span><br><span class="line">               <span class="function"><span class="title">success</span></span>() &#123;</span><br><span class="line">                 wx.showToast(&#123;</span><br><span class="line">                   title: <span class="string">&#x27;复制成功&#x27;</span>,</span><br><span class="line">                   icon: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">                   duration: 2000</span><br><span class="line">                 &#125;);</span><br><span class="line">               &#125;</span><br><span class="line">             &#125;);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.cancel) &#123;</span><br><span class="line">             // 用户点击了取消按钮</span><br><span class="line">             // 执行取消操作</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;,</span><br><span class="line">     fail: err =&gt; &#123;</span><br><span class="line">       // handle error</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br><span class="line"> //复制excel文件下载链接</span><br><span class="line"> <span class="function"><span class="title">copyFileUrl</span></span>() &#123;</span><br><span class="line">   <span class="built_in">let</span> that=this</span><br><span class="line">   wx.setClipboardData(&#123;</span><br><span class="line">     data: that.data.fileUrl,</span><br><span class="line">     success(res) &#123;</span><br><span class="line">       wx.getClipboardData(&#123;</span><br><span class="line">         success(res) &#123;</span><br><span class="line">           console.log(<span class="string">&quot;复制成功&quot;</span>,res.data) // data</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="function"><span class="title">exportToExcel</span></span>() &#123;</span><br><span class="line">   <span class="built_in">let</span> that = this;</span><br><span class="line">   //读取ID表数据</span><br><span class="line">   wx.cloud.callFunction(&#123;</span><br><span class="line">     name: <span class="string">&quot;getID&quot;</span>,</span><br><span class="line">     success(res) &#123;</span><br><span class="line">       console.log(<span class="string">&quot;读取成功&quot;</span>, res.result.data)</span><br><span class="line">       that.savaExcel(res.result.data)</span><br><span class="line">     &#125;,</span><br><span class="line">     fail(res) &#123;</span><br><span class="line">       console.log(<span class="string">&quot;读取失败&quot;</span>, res)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><div align="center">    <img src="/2023/09/27/IdentifyApplets/17.jpg" width="200" height="400"></div><p>给大家说下上面代码的步骤。</p><ul><li>1，下通过getUsers云函数去云数据库获取数据</li><li>2，把获取到的数据通过excel云函数把数据保存到excel，然后把excel保存的云存储。</li><li>3，获取云存储里的文件下载链接</li><li>4，复制下载链接，到浏览器里下载excel文件。<br>到这里我们就完整的实现了把数据保存到excel的功能了。</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>因为云函数一次性只能查询100条记录，所以每一百条记录后需要导出，清空数据后方能继续使用。<br>百度云提供的免费接口只能使用1000次，如果要超额需要付费，大概0.002一条。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;微信手写识别-x2F-银行卡卡号识别-x2F-身份证识别&quot;&gt;&lt;a href=&quot;#微信手写识别-x2F-银行卡卡号识别-x2F-身份证识别&quot; class=&quot;headerlink&quot; title=&quot;微信手写识别&amp;#x2F;银行卡卡号识别&amp;#x2F;身份证识别&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    
    <category term="微信小程序开发" scheme="https://sunset148.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>OperatorOverloading</title>
    <link href="https://sunset148.github.io/2023/09/19/OperatorOverloading/"/>
    <id>https://sunset148.github.io/2023/09/19/OperatorOverloading/</id>
    <published>2023-09-19T14:05:31.000Z</published>
    <updated>2023-09-27T05:41:41.330Z</updated>
    
    <content type="html"><![CDATA[<h4 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h4><p>作用： 通过重载递增运算符，实现自己的整型数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyInteger</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">MyInteger</span>() &#123;</span><br><span class="line">m_Num = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前置++</span></span><br><span class="line">MyInteger&amp; <span class="keyword">operator</span>++() &#123;</span><br><span class="line"><span class="comment">//先++</span></span><br><span class="line">m_Num++;</span><br><span class="line"><span class="comment">//再返回</span></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后置++</span></span><br><span class="line">MyInteger <span class="keyword">operator</span>++(<span class="type">int</span>) &#123;</span><br><span class="line"><span class="comment">//先返回</span></span><br><span class="line">MyInteger temp = *<span class="keyword">this</span>; <span class="comment">//记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；</span></span><br><span class="line">m_Num++;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_Num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint) &#123;</span><br><span class="line">out &lt;&lt; myint.m_Num;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//前置++ 先++ 再返回</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MyInteger myInt;</span><br><span class="line">cout &lt;&lt; ++myInt &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后置++ 先返回 再++</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">MyInteger myInt;</span><br><span class="line">cout &lt;&lt; myInt++ &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="comment">//test02();</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结： 前置递增返回引用，后置递增返回值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>() &#123;&#125;</span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age, string name) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Person</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">os &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; p.name &lt;&lt; <span class="string">&quot; 年纪: &quot;</span> &lt;&lt; p.age &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">string name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;运算符重载&quot;&gt;&lt;a href=&quot;#运算符重载&quot; class=&quot;headerlink&quot; title=&quot;运算符重载&quot;&gt;&lt;/a&gt;运算符重载&lt;/h4&gt;&lt;p&gt;作用： 通过重载递增运算符，实现自己的整型数据&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;</summary>
      
    
    
    
    <category term="C++语言" scheme="https://sunset148.github.io/categories/C-%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C++语言基础" scheme="https://sunset148.github.io/tags/C-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>mmcv的安装</title>
    <link href="https://sunset148.github.io/2023/07/06/InstallMmcv/"/>
    <id>https://sunset148.github.io/2023/07/06/InstallMmcv/</id>
    <published>2023-07-06T13:47:09.000Z</published>
    <updated>2023-07-06T13:59:05.139Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在使用mmcv中，经常出现mmcv安装失败或者一直卡在安装程序中。为了解决此类问题。我们参考了mmcv的官方文档。<br>且需要注意的是：请按照mmcv-full，如果安装mmcv还是会有报错的情况出现</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>笔者配置为<br>torch 1.7.1 cuda 1.1.0</p><p>此时我们点开<a class="link" href="https://mmcv.readthedocs.io/zh_CN/v1.4.0/get_started/installation.html">官网<i class="fas fa-external-link-alt"></i></a>参照自己的torch和cuda版本安装即可<br>查看cuda版本可通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc --version</span><br></pre></td></tr></table></figure><p>查看torch版本可通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line">&gt;&gt;import torch</span><br><span class="line">&gt;&gt;<span class="built_in">print</span>(torch.__version__)</span><br></pre></td></tr></table></figure><p>我们通过自己cuda和torch的版本选择安装即可<br><img src="/2023/07/06/InstallMmcv/1.jpg" width="400"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在使用mmcv中，经常出现mmcv安装失败或者一直卡在安装程序中。为了解决此类问题。我们参考了mmcv的官方文档。&lt;br&gt;且需要注意的是：请</summary>
      
    
    
    
    <category term="科研" scheme="https://sunset148.github.io/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="mmcv安装" scheme="https://sunset148.github.io/tags/mmcv%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>图像增强随机裁剪图片</title>
    <link href="https://sunset148.github.io/2023/07/03/ImageEnhancementCropPicturesRandomly/"/>
    <id>https://sunset148.github.io/2023/07/03/ImageEnhancementCropPicturesRandomly/</id>
    <published>2023-07-03T09:18:05.000Z</published>
    <updated>2023-07-03T09:25:03.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在深度学习图片分割领域，经常使用数据增强的方法扩充自己的数据集。然而在语义分割中需要保证img和lable所随机裁剪的区域相同。所以我们需要设定随机种子</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">seed = torch.random.seed()</span><br><span class="line"><span class="comment"># 用该方法获取一个随机种子</span></span><br><span class="line">seed = torch.random.seed()</span><br><span class="line"><span class="comment"># 该方法设置随机种子</span></span><br><span class="line">torch.random.manual_seed(seed)</span><br><span class="line">cropped_image = self.transform(image)</span><br><span class="line">torch.random.manual_seed(seed)</span><br><span class="line">cropped_label = self.transform(label)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在深度学习图片分割领域，经常使用数据增强的方法扩充自己的数据集。然而在语义分割中需要保证img和lable所随机裁剪的区域相同。所以我们需要</summary>
      
    
    
    
    <category term="pytorch" scheme="https://sunset148.github.io/categories/pytorch/"/>
    
    
    <category term="数据增强" scheme="https://sunset148.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA/"/>
    
  </entry>
  
  <entry>
    <title>图片等比裁剪</title>
    <link href="https://sunset148.github.io/2023/06/29/ImageCropping/"/>
    <id>https://sunset148.github.io/2023/06/29/ImageCropping/</id>
    <published>2023-06-29T07:23:35.000Z</published>
    <updated>2023-07-03T09:24:39.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在深度学习预处理图片数据中，往往我们的数据集并不算富裕，我们将一张大图以此裁剪为modle输入的图片大小。而一张大图往往不能恰好分为所需的小图，所以我们在边缘进行了处理，在不满足其裁切小图的大小时往中间进行填充，以达到输入图片的要求。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Path: 处理图片路径   SavePath: 保存图片路径 CropSize:裁剪大小 filename:保存图片名字前缀</span></span><br><span class="line">def Crop(Path, SavePath, CropSize, RepetitionRate,filename):</span><br><span class="line">    dataset_img = Image.open(Path)</span><br><span class="line">    width = dataset_img.size[0]</span><br><span class="line">    height = dataset_img.size[1]</span><br><span class="line">    img = np.asarray(dataset_img)  <span class="comment"># 获取数据</span></span><br><span class="line">    filename = filename[0:-4]</span><br><span class="line">    <span class="comment">#  获取当前文件夹的文件个数len,并以len+1命名即将裁剪得到的图像</span></span><br><span class="line">    new_name =  1</span><br><span class="line">    <span class="comment">#  裁剪图片,重复率为RepetitionRate</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int((height - CropSize * RepetitionRate) / (CropSize * (1 - RepetitionRate)))):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(int((width - CropSize * RepetitionRate) / (CropSize * (1 - RepetitionRate)))):</span><br><span class="line">            <span class="comment">#  如果图像是单波段</span></span><br><span class="line">            <span class="keyword">if</span> (len(img.shape) == 2):</span><br><span class="line">                cropped = img[</span><br><span class="line">                          int(i * CropSize * (1 - RepetitionRate)): int(i * CropSize * (1 - RepetitionRate)) + CropSize,</span><br><span class="line">                          int(j * CropSize * (1 - RepetitionRate)): int(j * CropSize * (1 - RepetitionRate)) + CropSize]</span><br><span class="line">            <span class="comment">#  如果图像是多波段</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cropped = img[</span><br><span class="line">                          int(i * CropSize * (1 - RepetitionRate)): int(i * CropSize * (1 - RepetitionRate)) + CropSize,</span><br><span class="line">                          int(j * CropSize * (1 - RepetitionRate)): int(j * CropSize * (1 - RepetitionRate)) + CropSize,:]</span><br><span class="line">            <span class="comment">#  写图像</span></span><br><span class="line">            cropped = Image.fromarray(cropped)</span><br><span class="line">            cropped.save(SavePath + filename+<span class="string">&quot;_%d.png&quot;</span> % new_name)</span><br><span class="line">            <span class="comment">#  文件名 + 1</span></span><br><span class="line">            new_name = new_name + 1</span><br><span class="line">    <span class="comment">#  向前裁剪最后一列</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int((height - CropSize * RepetitionRate) / (CropSize * (1 - RepetitionRate)))):</span><br><span class="line">        <span class="keyword">if</span> (len(img.shape) == 2):</span><br><span class="line">            cropped = img[int(i * CropSize * (1 - RepetitionRate)): int(i * CropSize * (1 - RepetitionRate)) + CropSize,</span><br><span class="line">                      (width - CropSize): width]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cropped = img[</span><br><span class="line">                      int(i * CropSize * (1 - RepetitionRate)): int(i * CropSize * (1 - RepetitionRate)) + CropSize,</span><br><span class="line">                      (width - CropSize): width,:]</span><br><span class="line">        <span class="comment">#  写图像</span></span><br><span class="line">        cropped = Image.fromarray(cropped)</span><br><span class="line">        cropped.save(SavePath + <span class="string">&quot;/%d.png&quot;</span> % new_name)</span><br><span class="line">        new_name = new_name + 1</span><br><span class="line">    <span class="comment">#  向前裁剪最后一行</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(int((width - CropSize * RepetitionRate) / (CropSize * (1 - RepetitionRate)))):</span><br><span class="line">        <span class="keyword">if</span> (len(img.shape) == 2):</span><br><span class="line">            cropped = img[(height - CropSize): height,</span><br><span class="line">                      int(j * CropSize * (1 - RepetitionRate)): int(j * CropSize * (1 - RepetitionRate)) + CropSize]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cropped = img[</span><br><span class="line">                      (height - CropSize): height,</span><br><span class="line">                      int(j * CropSize * (1 - RepetitionRate)): int(j * CropSize * (1 - RepetitionRate)) + CropSize,:]</span><br><span class="line">        cropped = Image.fromarray(cropped)</span><br><span class="line">        cropped.save(SavePath + <span class="string">&quot;/%d.png&quot;</span> % new_name)</span><br><span class="line">        <span class="comment">#  文件名 + 1</span></span><br><span class="line">        new_name = new_name + 1</span><br><span class="line">    <span class="comment">#  裁剪右下角</span></span><br><span class="line">    <span class="keyword">if</span> (len(img.shape) == 2):</span><br><span class="line">        cropped = img[(height - CropSize): height,</span><br><span class="line">                  (width - CropSize): width]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cropped = img[</span><br><span class="line">                  (height - CropSize): height,</span><br><span class="line">                  (width - CropSize): width,:]</span><br><span class="line">    cropped = Image.fromarray(cropped)</span><br><span class="line">    cropped.save(SavePath + <span class="string">&quot;/%d.png&quot;</span> % new_name)</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">dirname</span>, _, filenames <span class="keyword">in</span> os.walk(<span class="string">&#x27;./inciseImg/&#x27;</span>):</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">        img_path = os.path.join(<span class="string">&quot;./img/&quot;</span>, filename)</span><br><span class="line">        lable_path = os.path.join(<span class="string">&quot;../dataset/sealand/label/&quot;</span>,filename)</span><br><span class="line">        Crop(img_path,<span class="string">&quot;./inciseImg/&quot;</span>,256,0.1,filename)</span><br><span class="line">        Crop(lable_path,<span class="string">&quot;./inciseLable/&quot;</span>,256,0.1,filename)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在深度学习预处理图片数据中，往往我们的数据集并不算富裕，我们将一张大图以此裁剪为modle输入的图片大小。而一张大图往往不能恰好分为所需的小</summary>
      
    
    
    
    <category term="pytorch" scheme="https://sunset148.github.io/categories/pytorch/"/>
    
    
    <category term="数据预处理" scheme="https://sunset148.github.io/tags/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>hexo新增加图片功能</title>
    <link href="https://sunset148.github.io/2023/06/27/hexoAddPictures/"/>
    <id>https://sunset148.github.io/2023/06/27/hexoAddPictures/</id>
    <published>2023-06-27T08:12:33.000Z</published>
    <updated>2023-06-27T08:31:15.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在书写博客的时候，图片是更容易概况的。然而hexo在引入图片时总会出现各种问题。<br>在官方文档给的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure><p>还是主题给的代码都出现了问题。下面将会为此解决问题。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li><p>打开_config.yml文件，修改下述内容，目的是为了新建文章时自动帮我们建一个与文章名相同的文件夹用来从放图片文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image。打开cmd输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></li><li><p>打开&#x2F;node_modules&#x2F;hexo-asset-image&#x2F;index.js，将内容更换为下面的代码</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">var cheerio = require(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> getPosition(str, m, i) &#123;</span><br><span class="line">  <span class="built_in">return</span> str.split(m, i).<span class="built_in">join</span>(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version = String(hexo.version).<span class="built_in">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(data)&#123;</span><br><span class="line">  var config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        var <span class="built_in">link</span> = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class="line">       var beginPos = getPosition(<span class="built_in">link</span>, <span class="string">&#x27;/&#x27;</span>, 1) + 1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       var beginPos = getPosition(<span class="built_in">link</span>, <span class="string">&#x27;/&#x27;</span>, 3) + 1;</span><br><span class="line">    // In hexo 3.1.1, the permalink of <span class="string">&quot;about&quot;</span> page is like <span class="string">&quot;.../about/index.html&quot;</span>.</span><br><span class="line">    var endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + 1;</span><br><span class="line">    <span class="built_in">link</span> = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key = toprocess[i];</span><br><span class="line"></span><br><span class="line">      var $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(this).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            // For windows style path, we replace <span class="string">&#x27;\&#x27;</span> to <span class="string">&#x27;/&#x27;</span>.</span><br><span class="line">            var src = $(this).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;</span><br><span class="line">               !/^\s*\//.test(src)) &#123;</span><br><span class="line">              // For <span class="string">&quot;about&quot;</span> page, the first part of <span class="string">&quot;src&quot;</span> can<span class="string">&#x27;t be removed.</span></span><br><span class="line"><span class="string">              // In addition, to support multi-level local directory.</span></span><br><span class="line"><span class="string">              var linkArray = link.split(&#x27;</span>/<span class="string">&#x27;).filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">                return elem != &#x27;</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">              &#125;);</span></span><br><span class="line"><span class="string">              var srcArray = src.split(&#x27;</span>/<span class="string">&#x27;).filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">                return elem != &#x27;</span><span class="string">&#x27; &amp;&amp; elem != &#x27;</span>.<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">              &#125;);</span></span><br><span class="line"><span class="string">              if(srcArray.length &gt; 1)</span></span><br><span class="line"><span class="string">                srcArray.shift();</span></span><br><span class="line"><span class="string">              src = srcArray.join(&#x27;</span>/<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">              $(this).attr(&#x27;</span>src<span class="string">&#x27;, config.root + link + src);</span></span><br><span class="line"><span class="string">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;else&#123;</span></span><br><span class="line"><span class="string">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span></span><br><span class="line"><span class="string">            console.info&amp;&amp;console.info($(this));</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">      data[key] = $.html();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure></li></ol><p>之后使用markdown语法插入图片就一切正常了。<br><strong>可以先在本地预览，是否加载 成功再上传到云端</strong></p><hr><p>以下是一些常用的插入图片代码<br><strong>在创建了md文件后，会在相对路径下创建一个文件夹，在此处放入图片。在引用图片时写相对路径即可！</strong><br>例如我创建的博客名字为MachineLearningCourseCompetition，则在该文件夹下放置图片。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![这里写描述](这里写图片的相对位置)</span><br><span class="line">&lt;div align=<span class="string">&#x27;center&#x27;</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;MachineLearningCourseCompetition/2.jpg&quot;</span> width=<span class="string">&#x27;400&#x27;</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在书写博客的时候，图片是更容易概况的。然而hexo在引入图片时总会出现各种问题。&lt;br&gt;在官方文档给的&lt;/p&gt;
&lt;figure class=</summary>
      
    
    
    
    <category term="hexo" scheme="https://sunset148.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="https://sunset148.github.io/tags/hexo/"/>
    
    <category term="hexo新增图片" scheme="https://sunset148.github.io/tags/hexo%E6%96%B0%E5%A2%9E%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>机器学习课程竞赛心得</title>
    <link href="https://sunset148.github.io/2023/06/27/MachineLearningCourseCompetition/"/>
    <id>https://sunset148.github.io/2023/06/27/MachineLearningCourseCompetition/</id>
    <published>2023-06-27T07:44:09.000Z</published>
    <updated>2023-06-27T08:08:19.765Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>课程竞赛<br>狗狗分类（20分类任务）<br>狗狗分类（20分类任务）</p><ul><li>第一阶段：4月19日 至 4月30日（2周，占25%）<br> 模型训练、主干网络、调参与调优tricks等基础知识</li><li>第二阶段：5月1日 至 5月14日（2周，占20%）<br> 数据增强、图像编辑、调参与调优tricks等</li><li>第三阶段：5月15日 至 5月28日（2周，占20%）<br> 网络攻防、数据增强等<br>提交验证地址：<a class="link" href="http://cuit.osmagic.com:8888/">http://cuit.osmagic.com:8888<i class="fas fa-external-link-alt"></i></a><br> 学号登录，初始密码“123”<br>期末提交测试代码及模型（占5%），供结果验证<br>按阶段准确率高低计分，最高者100分，最低者40分</li></ul><h3 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h3><p>在第一阶段和第二阶段中我们使用的是Resnet，将epch和leaning rate更改了就提交代码了。在第三阶段在读论文时候发现了新模型Visual Attention Network(VAN)它是22年cvpr发表的。该模型在图像分类、物体检测、语义分割、实例分割、姿势估计等任务都取得了不错的成绩。其中的VAN-B6在ImageNet基准测试中取得了87.8%的准确率，并为全景分割创造了新的最先进的性能（58.PQ）。此外，VAN-B2在ADE20K基准上的语义分割超过Swin-T 4% mIoU（50.1 vs. 46.1），在COCO数据集上的物体检测超过2.6% AP（48.8 vs. 46.2）。因此决定使用该模型在第三阶段测试性能。</p><div align="center"><img src="/2023/06/27/MachineLearningCourseCompetition/1.jpg" width="400"><img src="/2023/06/27/MachineLearningCourseCompetition/2.jpg" width="400"></div><p>在训练中发现，所提供的数据集较少，在经过几个epch的训练后训练集的Acc指标可以达到100%且不波动，然而在提交后发现指标却非常低。因此出现了非常严重的过拟合现象。而VAN提供在ImageNet1k上训练的权重，所以我们加载训练权重后训练提交所得到的大概在92%。因VAN提供了多个版本可供选择，我使用了B0-B3发现在使用B3时候达到了94%，证明该model在数据集上参数量越大所取得的效果越好。但遗憾的是作者只提供了B0-B3在ImageNet1k上训练的权重。学生有使用B6在老师提供的数据集上训练3k轮所取得的效果非常糟糕。如果使用B6的权重训练应该会取得不错的成果。</p><div align="center"><img src="/2023/06/27/MachineLearningCourseCompetition/3.jpg" width="900"></div>  模型选择完毕就是炼丹了。因数据集小炼丹相对容易。因数据集较小，为了扩充数据集，减少过拟合，添加了数据增强中的随机水平翻转和随机选择以及随机颜色调整。又因为考虑到训练集很快就过拟合了，因此降低了学习率为1e-5。最后在第三轮取得了96.64%。]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;课程竞赛&lt;br&gt;狗狗分类（20分类任务）&lt;br&gt;狗狗分类（20分类任务）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一阶段：4月19日 至 4月30日（2</summary>
      
    
    
    
    <category term="科研" scheme="https://sunset148.github.io/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="机器学习" scheme="https://sunset148.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>leetcode6-27</title>
    <link href="https://sunset148.github.io/2023/06/27/leetcode6-27/"/>
    <id>https://sunset148.github.io/2023/06/27/leetcode6-27/</id>
    <published>2023-06-27T07:01:14.000Z</published>
    <updated>2023-06-27T07:24:43.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="leetcode每日一天（6-24）"><a href="#leetcode每日一天（6-24）" class="headerlink" title="leetcode每日一天（6.24）"></a>leetcode每日一天（6.24）</h2><p><a class="link" href="https://leetcode.cn/problems/maximum-subarray-sum-with-one-deletion">1186. 删除一次得到子数组最大和<i class="fas fa-external-link-alt"></i></a><br>给你一个整数数组，返回它的某个 非空 子数组（连续元素）在执行一次可选的删除操作后，所能得到的最大元素总和。换句话说，你可以从原数组中选出一个子数组，并可以决定要不要从中删除一个元素（只能删一次哦），（删除后）子数组中至少应当有一个元素，然后该子数组（剩下）的元素总和是所有子数组之中最大的。</p><p>注意，删除一个元素后，子数组 不能为空。</p><h6 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [1,-2,0,3]</span><br><span class="line">输出：4</span><br><span class="line">解释：我们可以选出 [1, -2, 0, 3]，然后删掉 -2，这样得到 [1, 0, 3]，和最大。</span><br></pre></td></tr></table></figure><h6 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [1,-2,-2,3]</span><br><span class="line">输出：3</span><br><span class="line">解释：我们直接选出 [3]，这就是最大和。</span><br></pre></td></tr></table></figure><h6 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [-1,-1,-1,-1]</span><br><span class="line">输出：-1</span><br><span class="line">解释：最后得到的子数组不能为空，所以我们不能选择 [-1] 并从中删去 -1 来得到 0。</span><br><span class="line">     我们应该直接选择 [-1]，或者选择 [-1, -1] 再从中删去一个 -1。</span><br></pre></td></tr></table></figure><h6 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h6><ul><li>1 &lt;&#x3D; arr.length &lt;&#x3D; 10^5</li><li>-10^4 &lt;&#x3D; arr[i] &lt;&#x3D; 10^4</li></ul><hr><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h6 id="思想："><a href="#思想：" class="headerlink" title="思想："></a>思想：</h6><p>动态规划<br>本题是典型的动态规划应用题，我们可以将问题拆分成多个子问题，即求解以 arr[i] 结尾的最多删除一次的非空子数组的最大和。我们以 dp[i][k] 表示以 arr[i]结尾，删除** k ** 次的非空子数组的最大和（删除前的末尾元素为 arr[i]，就视为以 arr[i] 结尾）。初始时 dp[0][0]&#x3D;arr[0]，dp[0][1]＝0<strong>（以 arr[0] 结尾，删除一次的非空子数组不存在，因此 dp[0][1] 不会计入结果）</strong>。当 i&gt;0 时，转移方程如下：</p><center><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][0]=max(dp[i−1][0],0)+arr[i]</span><br><span class="line">dp[i][1]=max(dp[i−1][1]+arr[i],dp[i−1][0])</span><br></pre></td></tr></table></figure></center>- 第一个转移方程表示在不删除的情况下，以 arr[i]] 为结尾的非空子数组的最大和 dp[i][0]与 dp[i－1][0] 有关，当 dp[i−1][0]>0 时，直接将 arr[i]与 i−1 时的最大非空子数组连接时，取得最大和，否则只选 arr[i] 时，取得最大和。- 第二个转移方程表示在删除一次的情况下，以 arr[i] 为结尾的非空子数组有两种情况：    1. 不删除 arr[i]，那么选择 arr[i] 与 dp[i−1][1] 对应的子数组（已执行一次删除）。    2. 删除 arr[i]，那么选择 dp[i−1][0] 对应的非空子数组（未执行一次删除，但是等同于删除了 arr[i]）。dp[i][1] 取以上两种情况的最大和的最大值。<p><strong>注意到 dp[i][∗]的值只与 dp[i−1][∗] 有关，因此我们可以只使用两个整数来节省空间。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int maximumSum(vector&lt;int&gt;&amp; arr) &#123;</span><br><span class="line">        int dp0=arr[0],dp1=0,res=arr[0];</span><br><span class="line">        int len = arr.size();</span><br><span class="line">        for(int i=1;i&lt;len;i++)&#123;</span><br><span class="line">            dp1 = max(dp0,dp1+arr[i]);</span><br><span class="line">            dp0 = max(dp0,0) + arr[i];</span><br><span class="line">            res = max(res,max(dp0,dp1));</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;leetcode每日一天（6-24）&quot;&gt;&lt;a href=&quot;#leetcode每日一天（6-24）&quot; class=&quot;headerlink&quot; title=&quot;leetcode每日一天（6.24）&quot;&gt;&lt;/a&gt;leetcode每日一天（6.24）&lt;/h2&gt;&lt;p&gt;&lt;a cla</summary>
      
    
    
    
    <category term="leetcode" scheme="https://sunset148.github.io/categories/leetcode/"/>
    
    
    <category term="八股文" scheme="https://sunset148.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>气象论文</title>
    <link href="https://sunset148.github.io/2023/06/27/MeteorologicalPapers/"/>
    <id>https://sunset148.github.io/2023/06/27/MeteorologicalPapers/</id>
    <published>2023-06-27T03:02:09.000Z</published>
    <updated>2023-06-27T03:04:33.396Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>方向</th><th>论文名称</th><th>年份</th><th>期刊</th><th>期刊级别</th><th>应用领域</th><th>摘要描述</th></tr></thead><tbody><tr><td>海洋大气数字孪生</td><td>Using a Digital Twin to Study the Influence of Climatic Changes on High Ozone Levels in Bulgaria and Europe</td><td>2022</td><td>ATMOSPHERE</td><td>中科院3区</td><td>环境科学；气象与大气科学</td><td>通过应用DIGITAL AIR（一个数字孪生工具）成功地处理和解决非常复杂的环境中产生的许多复杂问题</td></tr><tr><td></td><td>Digital Twin of Atmospheric Environment: Sensory Data Fusion for High-Resolution PM2.5 Estimation and Action Policies Recommendation</td><td>2023</td><td>IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC</td><td>中科院2区</td><td>计算机科学，信息系统；工程，电器和电子；电信</td><td>应用数字孪生来监测PM2.5</td></tr><tr><td></td><td>Management of Climate Resilience: Exploring the Potential of Digital Twin Technology, 3D City Modelling, and Early Warning Systems</td><td>2023</td><td>SENSORS</td><td>中科院2区</td><td>化学分析；工程，电器和电子；仪器仪表</td><td>系统回顾了3D城市建模、预警系统和数字孪生在通过有效管理智慧城市建立气候适应能力的技术创造中的重要性、潜力和未来方向</td></tr><tr><td></td><td>Digital Twins for Managing Railway Bridge Maintenance, Resilience, and Climate Change Adaptation</td><td>2023</td><td>SENSORS</td><td>中科院2区</td><td>化学分析；工程，电器和电子；仪器仪表</td><td>利用BIM（建筑信息模型）集成开发了一种创新的DT（数字孪生）。澳大利亚Minnamurra铁路桥(MRB)被选为实际用例，以展示BIM(即DT)的扩展应用。此外，通过集成BIM, DT已被用于确定温室气体排放和成本消耗</td></tr><tr><td></td><td>A New Digital Twin for Climate Change Adaptation, Water Management, and Disaster Risk Reduction (HIP Digital Twin)</td><td>2023</td><td>WATER</td><td>中科院2区&#x2F;3区</td><td>水资源&#x2F;环境科学</td><td>分析了被视为“数字双胞胎”的国家dk模型水文信息和预测(HIP)系统和HIP门户，并讨论了利用“外接式数字孪生”为地方流域进一步发展HIP数字孪生的挑战和潜力，包括对国家层面的反馈</td></tr><tr><td></td><td>Amplitude and Phase Computable Ocean Wave Real-Time Modeling with GPU Acceleration</td><td>2022</td><td>MARINE SCIENCE AND ENGINEERING</td><td>中科院1区&#x2F;2区</td><td>海洋</td><td>提出了一种基于小波变换的混合海洋建模方法实现了详细的海面和相干相位相关的波浪效应。完全能够满足CBATS的实时仿真训练要求。因此，它可以在提高视觉系统的性能方面发挥重要作用</td></tr><tr><td></td><td>A high resolution coupled ocean-atmosphere simulation of the regional climate over Central America</td><td>2022</td><td>CLIMATE DYNAMICS</td><td>中科院2区</td><td>气象学、海洋</td><td>这项研究分析了中美洲上空配置的相对高分辨率（15公里网格间距）区域海洋-大气耦合模拟。利用区域光谱模式-区域海洋模式系统（RSM-RMS）进行了为期25年（1986-2010）的全球大气和海洋再分析模拟</td></tr><tr><td></td><td>Real-time in situ prediction of ocean currents</td><td>2021</td><td>OCEAN ENGINEERING</td><td>JCR1区</td><td>深度学习的海洋洋流预测</td><td>我们在本文中提出了两种使用深度学习技术的预测工具，一种是长短期记忆（LSTM）递归神经网络，另一种是Transformer，用于对任何位置的洋流进行实时原位预测</td></tr><tr><td></td><td>Improving Coastal Ocean Wave Height Forecasting during Typhoons by using Local Meteorological and Neighboring Wave Data in Support Vector Regression Models</td><td>2020</td><td>MARINE SCIENCE AND ENGINEERING</td><td>JCR1区</td><td>台湾地区台风期间海洋波高观察</td><td>本研究旨在应用支持向量回归进行台风波高的实时预测，提前时间为1至3小时。台湾东北沿海的两个乘浪浮标为研究提供了实时观测波浪和气象数据</td></tr><tr><td></td><td>Representing the function and sensitivity of coastal interfaces in Earth system models</td><td>2020</td><td>NATURE</td><td>中科院1区</td><td>海岸科学</td><td>我们评估了现有的沿海监测网络和区域模型，以及这些工作中存在的挑战，并建议制定一条更有力地反映沿海界面的全球模型的道路，将海岸界面纳入预测模型</td></tr><tr><td></td><td>Using Machine Learning at scale in numerical simulations with SmartSim: An application to ocean climate modeling</td><td>2022</td><td>COMPUTATIONAL SCIENCE</td><td>JCR1区</td><td>机器学习的海洋气候建模</td><td>示了通过使用SmartSim的深度神经网络（DNN）的分布式在线推理改进的第一个气候尺度的海洋数值模拟。通过使用SmartSim运行一个由12名成员组成的全球规模、高分辨率海洋模拟集合来展示SmartSim的能力</td></tr></tbody></table><ul><li><p>气象数据可视化</p><ul><li>作者：未知</li><li>出版年份：2022</li><li>期刊：COMPUTERS &amp; GRAPHICS-UK</li><li>影响因子：中科院3区</li><li>关键词：可视化技术</li><li>摘要：在本文中，我们改进了一种用于大型时间序列比较的可视化技术。</li></ul></li><li><p>A Brief Review on 4D Weather Visualization</p><ul><li>作者：未知</li><li>出版年份：2022</li><li>期刊：SUSTAINABILITY</li><li>影响因子：中科院2区</li><li>关键词：综述</li><li>摘要：基于对工具和方法的调查，我们考虑了存在表示气象数据和方法的不同方式。但是，获取知识并创建可视化天气数据的方式势在必行。本文找到了 4 个现有的 &lt;&gt;D 气象可视化和气象现象解决方案。</li></ul></li><li><p>Predictions of national-scale river temperatures: A visualisation of complex space-time dynamics</p><ul><li>作者：未知</li><li>出版年份：2020</li><li>期刊：HYDROLOGICAL PROCESSES</li><li>影响因子：中科院3区</li><li>关键词：全国河流温度预测 复杂时空动力学的可视化</li><li>摘要：有效环境数据可视化和科学传播提供了增加在决策过程中采用创新的科学工具。</li></ul></li><li><p>A climate service for ecologists: sharing pre-processed EURO-CORDEX regional climate scenario data using the eLTER Information System</p><ul><li>作者：未知</li><li>出版年份：2021</li><li>期刊：EARTH SYSTEM SCIENCE DATA(ESSD)</li><li>影响因子：中科院1区</li><li>关键词：预处理的EURO-CORDEX区域气候情景数据</li><li>摘要：介绍了eLTER信息系统基础设施如何具有通过气候服务数据产品进行了扩展，提供对专门预处理的区域气候变化情景数据，这些数据来自协调区域最先进的区域气候模型集合702个注册生态的降尺度实验（CORDEX）欧洲各地的研究基地。</li></ul></li><li><p>Integration of Remote Sensing Data into a Composite Voxel Model for Environmental Performance Analysis of Terraced Vineyards in Tuscany, Italy</p><ul><li>作者：未知</li><li>出版年份：2022</li><li>期刊：International Journal of Remote Sensing</li><li>影响因子：中科院2区</li><li>关键词：将遥感数据集成到复合体素模型中，用于意大利托斯卡纳梯田葡萄园的环境绩效分析</li><li>摘要：使用遥感、地理空间分析和模拟技术获取的数据集往往受到狭窄学科边界的限制，因此无法实现跨多个领域和规模的整体方法。在这项工作中，我们展示了一种跨学科数据采集和集成的新工作流程，重点关注意大利托斯卡纳的梯田葡萄园。我们使用多模态数据采集，并通过体素化点云（我们称之为复合体素模型）执行数据集成。后者有助于采用多领域和多尺度数据综合方法，以推进土地知识的发现和恢复。这种方法可以在单个数据结构中集成、关联和分析与不同领域和规模相关的数据。</li></ul></li><li><p>Climate: An R Package to Access Free In-Situ Meteorological and Hydrological Datasets For Environmental Assessment</p><ul><li>作者：未知</li><li>出版年份：2020</li><li>期刊：SUSTAINABILITY</li><li>影响因子：中科院3区</li><li>关键词：气候：用于访问用于环境评估的免费原位气象和水文数据集的R包</li><li>摘要：软件包中包含的自动化程序允许人们以用户定义的时间分辨率（从每小时到每年）、用户定义的时间跨度以及指定的台站或国家组下载数据。该软件包还包含元数据，包括可用台站的列表、其地理空间信息以及带有单位的测量描述。最后，获得的数据集可以在R中进行处理或导出到外部工具（例如，电子表格或GIS软件）。</li></ul></li><li><p>“The R Language as a Tool for Biometeorological Research”</p><ul><li>作者：未知</li><li>出版年份：2020</li><li>期刊：未知</li><li>影响因子：中科院3区</li><li>关键词：R语言作为生物气象学研究的工具</li><li>摘要：简要介绍了一组有用且受欢迎的生物气象研究软件包，以及在R基础上进一步开展科学合作的路线图。本文可以作为生物气象学家对R语言世界的简短介绍性指南。</li></ul></li><li><p>“Consistency of Satellite Climate Data Records for Earth System Monitoring”</p><ul><li>作者：未知</li><li>出版年份：2020</li><li>期刊：Bulletin of the American Meteorological Society</li><li>影响因子：中科院1区</li><li>关键词：用于地球系统监测的卫星气候数据记录的一致性</li><li>摘要：总结了CCI为确保技术层面的一致性而采取的措施，并根据基本的物理知识提出了评估检索和科学层面一致性的概念。最后，本研究介绍了CCI CDR之间一致性的现状以及进一步改进CCI CDR所需的未来努力</li></ul></li><li><p>A Spatio-Temporal Visualization Approach of PM10 Concentration Data in Metropolitan Lima</p><ul><li>作者：未知</li><li>出版年份：2021</li><li>期刊：atmosphere</li><li>影响因子：中科院3区</li><li>关键词：PM的时空可视化方法10利马大都市的浓度数据</li><li>摘要：”所提出的方法公开了一系列步骤，用于根据其相关性制定具有越来越具体时间段的图表，并进行统计分析，例如动态时间相关性，从而可以获得PM时空变化的详细可视化10浓度。此外，得出的结论是，气象变量并不表明与PM有关的因果关系10水平，而是颗粒物质的浓度与每个地区的城市特征有关。”</li></ul></li><li><p>Digital Twin and Cloud BIM-XR Platform Development: From Scan-to-BIM-to-DT Process to a 4D Multi-User Live App to Improve Building Comfort, Efficiency and Costs</p><ul><li>作者：未知</li><li>出版年份：2022</li><li>期刊：energies</li><li>影响因子：中科院3区</li><li>关键词：从扫描到 BIM 再到 DT 流程到 4D 多用户实时应用程序，以提高建筑舒适度、效率和成本</li><li>摘要：实时应用程序的开发显示了不同类型的用户（专业人士和非专家）如何与DT进行交互，以了解环境设计的特征以及环境参数，从提高舒适度，使用，成本，行为的角度来看，提高他们的控制程度，和良好做法。最后，通过一个真实的案例研究验证了整体方法，其中BIM-XR平台是为现有建筑的能源改进和外墙翻新而构建的</li></ul></li><li><p>Future Swedish 3D City Models—Specifications, Test Data, and Evaluation</p><ul><li>作者：未知</li><li>出版年份：2023</li><li>期刊：International Journal of Geo-Information</li><li>影响因子：中科院3区</li><li>关键词：瑞典 3D 城市模型 - 规格、测试数据和评估</li><li>摘要：这些数据在多个地理信息应用领域具有巨大的潜力。我们通过利用ODbL许可证在一个具有多个平台支持的开放数据平台上分发3D城市模型来介绍未来瑞典3D城市模型的详细规格，并提供了供大众使用和评估的测试数据集。通过提供模型和数据的规范，我们为城市建模和规划社区提供了可行的资源，并为市政府、研究人员和创新团队提供了机会，改善基础设施的设计和管理</li></ul></li></ul><table><thead><tr><th>方向</th><th>论文名称</th><th>年份</th><th>期刊</th><th>期刊级别</th><th>应用领域</th><th>摘要描述</th></tr></thead><tbody><tr><td>VRAR天气预报</td><td>Development of three-dimensional visualisation technology of the aerodynamic environment in a greenhouse using CFD and VR technology, part 1: Development of VR a database using CFD</td><td>2021</td><td>BIOSYSTEMS ENGINEERING</td><td>Q1&#x2F;Q2</td><td>JCR</td><td>使用 CFD 和 VR 技术开发温室空气动力环境三维可视化技术，第 1 部分：使用 CFD 开发 VR 数据库</td></tr><tr><td></td><td>Required sampling density of ground-based soil moisture and brightness temperature observations for calibration and validation of L-band satellite observations based on a virtual reality</td><td>2020</td><td>HYDROLOGY AND EARTH SYSTEM SCIENCES</td><td>Q1</td><td>JCR</td><td>基于虚拟现实的 L 波段卫星观测校准和验证所需的地基土壤水分和亮温观测采样密度</td></tr><tr><td></td><td>Walking through the forests of the future: using data-driven virtual reality to visualize forests under climate change</td><td>2021</td><td>INTERNATIONAL JOURNAL OF GEOGRAPHICAL INFORMATION SCIENCE</td><td>Q1</td><td>JCR</td><td>穿越未来的森林：使用数据驱动的虚拟现实可视化气候变化下的森林</td></tr><tr><td></td><td>Seeing Climate Change: A Framework for Understanding Visualizations for Climate Adaptation</td><td>2020</td><td>ISPRS INTERNATIONAL JOURNAL OF GEO-INFORMATION</td><td>Q2&#x2F;Q3</td><td>JCR</td><td>观察气候变化：理解气候适应可视化的框架</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方向&lt;/th&gt;
&lt;th&gt;论文名称&lt;/th&gt;
&lt;th&gt;年份&lt;/th&gt;
&lt;th&gt;期刊&lt;/th&gt;
&lt;th&gt;期刊级别&lt;/th&gt;
&lt;th&gt;应用领域&lt;/th&gt;
&lt;th&gt;摘要描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
</summary>
      
    
    
    
    <category term="气象论文" scheme="https://sunset148.github.io/categories/%E6%B0%94%E8%B1%A1%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="气象论文" scheme="https://sunset148.github.io/tags/%E6%B0%94%E8%B1%A1%E8%AE%BA%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>使用 cPolar 实现内网穿透</title>
    <link href="https://sunset148.github.io/2023/06/26/IntranetPenetration/"/>
    <id>https://sunset148.github.io/2023/06/26/IntranetPenetration/</id>
    <published>2023-06-26T13:08:05.000Z</published>
    <updated>2023-06-27T03:04:05.773Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用-cPolar-实现内网穿透"><a href="#使用-cPolar-实现内网穿透" class="headerlink" title="使用 cPolar 实现内网穿透"></a>使用 cPolar 实现内网穿透</h2><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>内网穿透是一种将局域网内的服务暴露到公网的技术，它可以让你在外网访问你内网的服务，例如通过公网访问家庭网络中的摄像头或者办公室网络中的服务器等。cPolar 是一个强大的工具，它可以帮助你实现内网穿透，让你轻松地访问你内网中的服务。</p><h2 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h2><p>一台i10 A4000 4tb装有unbantu操作系</p><h2 id="安装-cPolar"><a href="#安装-cPolar" class="headerlink" title="安装 cPolar"></a>安装 cPolar</h2><p>我们参照的是<a class="link" href="https://www.cpolar.com/blog/linux-system-installation-cpolar#%E6%B3%A8_cpolar_%E5%8D%B8%E8%BD%BD%E6%96%B9%E6%B3%95">官网<i class="fas fa-external-link-alt"></i></a>的安装教程，操作简单且只用使用命令即可。首先你得保证你的服务器是连接了互联网。你可以根据以下命令检查服务器是否连接了互联网。（如有返回则联通了互联网）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bing www.baidu.com</span><br></pre></td></tr></table></figure><h3 id="环境需求"><a href="#环境需求" class="headerlink" title="环境需求"></a>环境需求</h3><p>该脚本适用于Ubuntu16.04&#x2F;18.04&#x2F;20.04及以后，Centos7&#x2F;8及以后版本，树莓派最新官方镜像，及支持systemd的新式Linux操作系统，该脚本会自动判断CPU架构（i386&#x2F;amd64&#x2F;mips&#x2F;arm&#x2F;arm64等等），自动下载对应cpolar客户端，并自动部署安装。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先，你需要安装 cPolar 工具。你可以通过以下步骤来安装 cPolar：</p><ol><li><p>cpolar 安装（国内使用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | sudo bash</span><br></pre></td></tr></table></figure><p>或 cpolar短链接安装方式：(国外使用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://git.io/cpolar | sudo bash</span><br></pre></td></tr></table></figure></li><li><p>查看版本号，有正常显示版本号即为安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cpolar version</span><br></pre></td></tr></table></figure></li><li><p>token认证<br>登录cpolar<a class="link" href="https://dashboard.cpolar.com/get-started">官网后台<i class="fas fa-external-link-alt"></i></a>，点击左侧的验证，查看自己的认证token，之后将token贴在命令行里(xxxx 在点入官网后台的验证中可复制)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cpolar authtoken xxxxxxx</span><br></pre></td></tr></table></figure></li><li><p>简单穿透测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cpolar http 8080</span><br></pre></td></tr></table></figure><p>按ctrl+c退出</p></li><li><p>向系统添加服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable cpolar</span><br></pre></td></tr></table></figure></li><li><p>启动cpolar服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start cpolar</span><br></pre></td></tr></table></figure></li><li><p>查看服务状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status cpolar</span><br></pre></td></tr></table></figure><p>当查看到绿色显示为 activae(running) 则成功</p></li><li><p>登录后台，查看隧道在线状态<br><a class="link" href="https://dashboard.cpolar.com/status">https://dashboard.cpolar.com/status<i class="fas fa-external-link-alt"></i></a>。同时因为cPolar如果固定ip是付费的，而免费的在24h内会更改ip地址，所以当ip改变时候我们需要通过后台查看新地址。官网会自动为我们配置两个通过一个是ssh一个是websit。我们通过ssh则可访问服务器了。<br>同时也可用通过服务器后台管理cpolar。例如我的ip为10.23.85.245,通过官方确认的端口号为9200。则可通过10.23.85.245:9200访问后台。可增加新的隧道。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用-cPolar-实现内网穿透&quot;&gt;&lt;a href=&quot;#使用-cPolar-实现内网穿透&quot; class=&quot;headerlink&quot; title=&quot;使用 cPolar 实现内网穿透&quot;&gt;&lt;/a&gt;使用 cPolar 实现内网穿透&lt;/h2&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="内网穿透" scheme="https://sunset148.github.io/categories/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
    
    <category term="内网穿透" scheme="https://sunset148.github.io/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>pytorch安装</title>
    <link href="https://sunset148.github.io/2022/10/02/pytorchsetup/"/>
    <id>https://sunset148.github.io/2022/10/02/pytorchsetup/</id>
    <published>2022-10-02T05:25:29.000Z</published>
    <updated>2022-10-02T05:57:53.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Anaconda的安装以及使用清华源镜像安装pytorch"><a href="#Anaconda的安装以及使用清华源镜像安装pytorch" class="headerlink" title="Anaconda的安装以及使用清华源镜像安装pytorch"></a>Anaconda的安装以及使用清华源镜像安装pytorch</h2><h3 id="Anaconda的安装"><a href="#Anaconda的安装" class="headerlink" title="Anaconda的安装"></a>Anaconda的安装</h3><p>因为在他官网的安装速度缓慢，所以我们选择在清华源镜像站安装<br>这里我选择的是Anaconda3-5.3.1-Windows-x86_64.exe<a class="link" href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.3.1-Windows-x86_64.exe">清华源镜像站anaconda安装包<i class="fas fa-external-link-alt"></i></a><br>其实也可以选择官网然后复制下载链接去迅雷下载<br>下载好安装包之后，双击运行。将会出现下图，点击<code>Next</code>即可：<br>也是点击<code>I Agree</code>即可<br>接下来需要选择<code>All Users</code>，点击<code>Next</code><br>接下来选择自己想要安装的地址，点击<code>Browse</code>，再点击<code>Next</code>即可接下来就是如下图,上面的是环境变量可以勾选，再点击<code>Install</code></p><h3 id="安装pytorch"><a href="#安装pytorch" class="headerlink" title="安装pytorch"></a>安装pytorch</h3><h5 id="创建Pytorch虚拟环境"><a href="#创建Pytorch虚拟环境" class="headerlink" title="创建Pytorch虚拟环境"></a>创建Pytorch虚拟环境</h5><p>打开Anaconda Prompt,输入下列命令：（版本号可以改为自己需要的）<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n pytorch python=3.8</span><br></pre></td></tr></table></figure><br>启用创建的环境：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate pytorch</span><br></pre></td></tr></table></figure></p><h5 id="其他：Anaconda重命名canda虚拟环境（通过复制和删除操作实现）"><a href="#其他：Anaconda重命名canda虚拟环境（通过复制和删除操作实现）" class="headerlink" title="其他：Anaconda重命名canda虚拟环境（通过复制和删除操作实现）"></a>其他：Anaconda重命名canda虚拟环境（通过复制和删除操作实现）</h5><p>首先对要需要重命名的conda环境进行复制<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是简化的命令形式</span></span><br><span class="line">conda create -n conda-new --<span class="built_in">clone</span> conda-old</span><br><span class="line"><span class="comment"># 下面是完整的命令形式</span></span><br><span class="line">conda create --name conda-new --<span class="built_in">clone</span> conda-old</span><br></pre></td></tr></table></figure><br>  然后删除原有的conda环境：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n conda-old --all</span><br></pre></td></tr></table></figure><br>–all：表示删除整个conda环境；</p><h5 id="PyTorch官网选择配置"><a href="#PyTorch官网选择配置" class="headerlink" title="PyTorch官网选择配置"></a>PyTorch官网选择配置</h5><ul><li>先看你的显卡版本，再去下载Pytorch版本<br><code>win</code>+<code>r</code>打开CMD命令行输入<code>nvidia-smi</code>可以查看自己的版本驱动，务必保证驱动版本大于396.26，且看到自己的CUDA版本号是10.2</li><li>打开Anaconda Prompt<br>在cmd中以此输入一下代码来添加清华镜像源<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls <span class="built_in">yes</span></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ </span><br></pre></td></tr></table></figure>查看否修改到通道，输入： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --show channels</span><br></pre></td></tr></table></figure></li><li>可以试试使用conda安装&#x2F;升级pip <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pip</span><br></pre></td></tr></table></figure></li><li>查看当前环境 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure></li><li>在Pytorch网站查询需要安装的版本，<a class="link" href="https://pytorch.org/get-started/locally/">官网<i class="fas fa-external-link-alt"></i></a><br>在选择PyTorch Build 中我们一般选择Stable<br>OS 选择你需要装在电脑的系统<br>Package  我使用Conda一直安装不成功，我使用是的Pip<br>Language 自然选择Python<br>Computer Platform  CUDA的版本要根据你的显卡来选择，要选择与你版本最近而不超过的<br>到此时就会出来一段命令。但我们直接输入此命令往往会下载很久且没有结果。这里建议加上清华的镜像网站会快很多。具体操作如下：</li></ul><h5 id="使用国内源下载Pytorch"><a href="#使用国内源下载Pytorch" class="headerlink" title="使用国内源下载Pytorch"></a>使用国内源下载Pytorch</h5><p>我们需要在上步骤的那一段命令加上一句<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br></pre></td></tr></table></figure><br> 最后我们运行的命令为：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu113 -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br></pre></td></tr></table></figure><br> 我下载的差不多又六分钟，最后显示下载成功。<br> 当然，我们安装其他库是也可以使用这个命令进行快速下载！！！<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xxx -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><br> 如果这个不成功，就再试试这个！<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install 包名 -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure><br> 把xxx,替换成我们需要的库名就好啦！</p><h6 id="最后验证是否安装成功"><a href="#最后验证是否安装成功" class="headerlink" title="最后验证是否安装成功"></a>最后验证是否安装成功</h6><ul><li>命令行输入python</li><li>输入import torch</li><li>输入torch.cuda.is_available()</li><li>如果显示为True则安装成功了</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Anaconda的安装以及使用清华源镜像安装pytorch&quot;&gt;&lt;a href=&quot;#Anaconda的安装以及使用清华源镜像安装pytorch&quot; class=&quot;headerlink&quot; title=&quot;Anaconda的安装以及使用清华源镜像安装pytorch&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="pytorch" scheme="https://sunset148.github.io/categories/pytorch/"/>
    
    
    <category term="pytorch安装" scheme="https://sunset148.github.io/tags/pytorch%E5%AE%89%E8%A3%85/"/>
    
    <category term="深度学习框架" scheme="https://sunset148.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>遥感影像的路网识别、提取的数据集</title>
    <link href="https://sunset148.github.io/2022/09/29/roadDataset/"/>
    <id>https://sunset148.github.io/2022/09/29/roadDataset/</id>
    <published>2022-09-29T13:32:27.000Z</published>
    <updated>2022-09-29T14:41:51.148Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><table><thead><tr><th>数据集名称</th><th>数据集下载地址</th><th>数据集详细情况</th></tr></thead><tbody><tr><td>CHN6-CUG Road Dataset</td><td>链接：<a class="link" href="https://pan.baidu.com/share/init?surl=hHwUfwGvqb_5kM-3dpyM_g">https://pan.baidu.com/share/init?surl=hHwUfwGvqb_5kM-3dpyM_g<i class="fas fa-external-link-alt"></i></a>  提取码：urs6</td><td>CHN6-CUG 包含 4511 张 512×512 大小的标记图像，分为 3608 张用于模型训练的图像和 903 张用于测试和结果评估的图像，分辨率为 50 厘米&#x2F;像素。原始数据集采用.jpg格式，道路标记图采用.png格式</td></tr><tr><td>DeepGlobe 道路提取数据集</td><td><a class="link" href="https://bj.bcebos.com/ai-studio-online/bae42d32d39b46059783791e327bea12b2716d64cf654be08aa0c11bd670ef21?authorization=bce-auth-v1/5cfe9a5e1454405eb2a975c43eace6ec/2022-09-04T15:26:45Z/-1//3dc55e6d32d46b7c21406ee098d7c08c1eeba23e90082aa3da9a0b140abbc87d&amp;responseContentDisposition=attachment;%20filename=DeepGlobe.zip">https://bj.bcebos.com/ai-studio-online/bae42d32d39b46059783791e327bea12b2716d64cf654be08aa0c11bd670ef21?authorization=bce-auth-v1%2F5cfe9a5e1454405eb2a975c43eace6ec%2F2022-09-04T15%3A26%3A45Z%2F-1%2F%2F3dc55e6d32d46b7c21406ee098d7c08c1eeba23e90082aa3da9a0b140abbc87d&amp;responseContentDisposition=attachment%3B%20filename%3DDeepGlobe.zip<i class="fas fa-external-link-alt"></i></a></td><td>6226 张 RGB 卫星图像，大小为 1024x1024。该图像具有 50 厘米像素分辨率，由 DigitalGlobe 的卫星收集。该数据集包含 1243 个验证图像和 1101 个测试图像（但没有掩码）每个卫星图像都与道路标签的蒙版图像配对。蒙版是灰度图像，白色代表道路像素，黑色代表背景。卫星图像和相应蒙版图像的文件名是id _sat.jpg 和id _mask.png。id是一个随机整数。</td></tr><tr><td>Leveraging Crowdsourced GPS Data for Road Extraction from Aerial Imagery</td><td>以Python的Pickle格式发布数据集，可以直接加载，如下所示：import pandas import picklegps_data &#x3D; pickle.load(open(‘beijing_gps_dir_speed_interval_sorted.pkl’, ‘rb’))</td><td>GPS 数据集包含从北京约 280000 辆汽车收集的约 50 米行 GPS 记录</td></tr><tr><td>RoadNet</td><td>链接：<a class="link" href="https://pan.baidu.com/s/1l9RZvyYfLgTOx_k4LQRyhQ">https://pan.baidu.com/s/1l9RZvyYfLgTOx_k4LQRyhQ<i class="fas fa-external-link-alt"></i></a> 提取码：h2zt</td><td>我们从谷歌地球收集了加拿大渥太华的几个典型城市地区。图像每像素的空间分辨率为0.21m（缩放级别为19）。Training files:2,3,4,5,6,7,8,9,10,11,12,13,14,15 Testing files:1,16,17,18,19,20</td></tr><tr><td>Generative Graph Transformer</td><td>generative-graph-transformer&#x2F;download_dataset.sh at master · davide-belli&#x2F;generative-graph-transformer (github.com)</td><td>图卢兹路网数据集，用于从卫星图像的语义分割中提取道路网</td></tr><tr><td>road_connectivity</td><td>road_connectivity&#x2F;data at master · anilbatra2185&#x2F;road_connectivity (github.com)</td><td>提出了一个名为方向学习的连接任务，其动机是人类通过在特定方向跟踪道路来注释道路的行为。我们还开发了一个堆叠的多分支卷积模块，以有效地利用方向学习和分割任务之间的相互信息</td></tr><tr><td>DeepGlobeRoad</td><td>链接：<a class="link" href="https://pan.baidu.com/s/1aG1qdTFEcIwzh2YruBGUNA">https://pan.baidu.com/s/1aG1qdTFEcIwzh2YruBGUNA<i class="fas fa-external-link-alt"></i></a> 提取码：podb</td><td>比赛数据集包含6226张训练图像，1243张验证图像，以及1101张测试图像。所有的图像尺寸均为1024*1024，图像来源于泰国、印度、印度尼西亚，图像场景包括城市、乡村、荒郊、海滨、热带雨林等多个场景。</td></tr><tr><td>DeepWindow</td><td><a class="link" href="https://github.com/rob-lian/DeepWindow/tree/master/resources">https://github.com/rob-lian/DeepWindow/tree/master/resources<i class="fas fa-external-link-alt"></i></a></td><td>用于从遥感影像手动采样道路中心点的工具</td></tr><tr><td>Sat2Graph</td><td><a class="link" href="https://github.com/songtaohe/Sat2Graph/tree/master/figures">https://github.com/songtaohe/Sat2Graph/tree/master/figures<i class="fas fa-external-link-alt"></i></a></td><td>20个美国城市覆盖720平方公里区域的大型城市数据集和流行的空间网道路数据集的评估中，Sat2Graph在广泛使用的地形相似度度量上超过了最先进的方法。</td></tr><tr><td>SPIN Road Mapper: Extracting Roads from Aerial Images via Spatial and Interaction Space Graph Reasoning for Autonomous Driving</td><td><a class="link" href="https://github.com/wgcban/SPIN_RoadMapper/tree/main/images">https://github.com/wgcban/SPIN_RoadMapper/tree/main/images<i class="fas fa-external-link-alt"></i></a></td><td>整个图像中被分叉，并且经常被地形、云或其他天气条件遮挡。</td></tr><tr><td>CoANet: Connectivity Attention Network for Road Extraction from Satellite Imagery</td><td><a class="link" href="https://github.com/mj129/CoANet/tree/main/figures">https://github.com/mj129/CoANet/tree/main/figures<i class="fas fa-external-link-alt"></i></a></td><td>由于其他物体造成的遮挡和复杂的交通环境，基于像素的方法往往会产生破碎的道路的图像</td></tr><tr><td>Split Depth-wise Separable Graph Convolution Network for Road Extraction in Complex Environment from High-resolution Remote Sensing Imagery（TGRS）</td><td><a class="link" href="https://github.com/tist0bsc/SGCN">https://github.com/tist0bsc/SGCN<i class="fas fa-external-link-alt"></i></a></td><td>高分辨率遥感图像的道路信息检测柏油路封闭或树木覆盖的道路</td></tr><tr><td>Topo-boundary: A Benchmark Dataset on Topological Road-boundary Detection Using Aerial Images for Autonomous Driving</td><td><a class="link" href="https://roadmaps.csail.mit.edu/roadtracer/">https://roadmaps.csail.mit.edu/roadtracer/<i class="fas fa-external-link-alt"></i></a></td><td>数据集包含25,295 1000张×1000大小的4通道航空图像。每个图像提供8个不同子任务的训练标签。用于自动驾驶</td></tr><tr><td>LoveDA</td><td>链接：<a class="link" href="https://link.zhihu.com/?target=https://pan.baidu.com/s/1YrU1Y4Y0dS0f_OOHXpzspQ">https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1YrU1Y4Y0dS0f_OOHXpzspQ<i class="fas fa-external-link-alt"></i></a> 提取码：27vc</td><td>用于域自适应语义分割的遥感土地覆盖数据集。5987 个图像芯片（Google Earth），7 个土地覆盖类别，166768 个标签，包含中国 3 个城市。论文：Wang et al., 2021 背景 - 1，建筑 - 2，道路 - 3，水 - 4，贫瘠 - 5，森林 - 6，农业 - 7。无数据区域分配为 0，应忽略。</td></tr><tr><td>SpaceNet 5：自动道路网络提取和路线旅行时间估计 （CosmiQ Works、Maxar、英特尔、AWS，2019 年 9 月)</td><td><a class="link" href="https://spacenet.ai/sn5-challenge/">https://spacenet.ai/sn5-challenge/<i class="fas fa-external-link-alt"></i></a></td><td>2300 个图像芯片，带有位置、形状和预计旅行时间的街道几何图形，3&#x2F;8 波段 Worldview-3 图像（0.3m res.)，4 个全球城市，1 个用于排行榜评估的保留城市， APLS指标，基线模型</td></tr><tr><td>RoadNet （武汉，2018 年 10 月）</td><td>链接：<a class="link" href="https://link.zhihu.com/?target=https://pan.baidu.com/s/1l9RZvyYfLgTOx_k4LQRyhQ">https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1l9RZvyYfLgTOx_k4LQRyhQ<i class="fas fa-external-link-alt"></i></a> 提取码：h2zt</td><td>道路网络标签，高分辨率谷歌地球图像，21 个区域</td></tr><tr><td>SpaceNet 3：道路网络检测 （CosmiQ Works，Radiant Solutions，2018 年 2 月）</td><td><a class="link" href="https://link.zhihu.com/?target=https://spacenet.ai/spacenet-roads-dataset/">https://link.zhihu.com/?target=https%3A//spacenet.ai/spacenet-roads-dataset/<i class="fas fa-external-link-alt"></i></a></td><td>5 个城市的 8000 公里道路，3&#x2F;8 波段 Worldview-3 图像（0.3m 分辨率），SpaceNet 挑战资产库</td></tr><tr><td>Massachusetts Roads Dataset 马萨诸塞州道路数据集</td><td>源地址：<a class="link" href="https://www.cs.toronto.edu/~vmnih/data/">https://www.cs.toronto.edu/~vmnih/data/<i class="fas fa-external-link-alt"></i></a>  阿里云天池：<a class="link" href="https://tianchi.aliyun.com/dataset/dataDetail?dataId=94570#1">https://tianchi.aliyun.com/dataset/dataDetail?dataId=94570#1<i class="fas fa-external-link-alt"></i></a> （1是testing data，2是val data，3&#x2F;6&#x2F;7&#x2F;8&#x2F;9&#x2F;10是training data）</td><td>马萨诸塞州道路数据集包含马萨诸塞州的1171个航拍图像。每张图像的尺寸为1500×1500像素，占地2.25平方公里。我们将数据随机分为1108张图像的训练集，14张图像的验证集和49张图像的测试集。该数据集涵盖了各种各样的城市，郊区和农村地区，面积超过2600平方公里。仅测试仪就覆盖110平方公里。目标地图是通过栅格化从OpenStreetMap项目获得的道路中心线生成的。产生7像素的线宽且不进行平滑处理。将所有图像重新缩放为每平方米1像素的分辨率。</td></tr><tr><td>DeepGlobe Road Extraction Dataset</td><td><a class="link" href="https://www.kaggle.com/balraj98/deepglobe-road-extraction-dataset?select=train">https://www.kaggle.com/balraj98/deepglobe-road-extraction-dataset?select=train<i class="fas fa-external-link-alt"></i></a></td><td>包含 8570 张 1024×1024 大小的标记图像，分为 6226 张用于模型训练的图像和 1101 张用于测试和结果评估的图像</td></tr><tr><td>AICrowd</td><td>链接：<a class="link" href="https://pan.baidu.com/s/1oGMFcksEZ1dbKxc6YRhdug">https://pan.baidu.com/s/1oGMFcksEZ1dbKxc6YRhdug<i class="fas fa-external-link-alt"></i></a> 提取码：6666</td><td>包含 3000 张 1024×1024 大小的标记图像，分为 3000 张用于模型训练的图像和 1000 张用于测试和结果评估的图像</td></tr></tbody></table><h3 id="Massachusetts-建筑"><a href="#Massachusetts-建筑" class="headerlink" title="Massachusetts-建筑"></a>Massachusetts-建筑</h3><h5 id="数据集详细情况"><a href="#数据集详细情况" class="headerlink" title="数据集详细情况"></a>数据集详细情况</h5><p>项目简介：麻萨诸塞州的航空影像，协助机器学习航空影像标签,包括了建筑和道路的影像与标签文件。本文我们介绍其中的建筑数据集。<br>数据介绍：马萨诸塞州建筑物数据集由波士顿地区的 151 张航拍图像组成，每张图像的大小为 1500 × 1500 像素，面积为 2.25 平方公里。因此，整个数据集大约覆盖 340 平方公里。我们将数据随机分成 137 张图像的训练集、10 张图像的测试集和 4 张图像的验证集。目标地图是通过栅格化从 OpenStreetMap 项目获得的建筑物覆盖区获得的。这些数据仅限于平均遗漏噪声水平约为 5% 或更低的区域。之所以能够收集到如此大量的高质量建筑足迹数据，是因为波士顿市为 OpenStreetMap 项目贡献了整个城市的建筑足迹。该数据集主要涵盖城市和郊区，各种规模的建筑物，包括个人房屋和车库，都包含在标签中。</p><h5 id="数据集下载地址"><a href="#数据集下载地址" class="headerlink" title="数据集下载地址"></a>数据集下载地址</h5><p>项目地址：<a class="link" href="https://www.cs.toronto.edu/~vmnih/data/">https://www.cs.toronto.edu/~vmnih/data/<i class="fas fa-external-link-alt"></i></a><br>数据集下载： 链接： <a class="link" href="https://pan.baidu.com/s/1Y9yk8P26TGpxmiCsYSjfHw">https://pan.baidu.com/s/1Y9yk8P26TGpxmiCsYSjfHw<i class="fas fa-external-link-alt"></i></a><br>           提取码：zfal</p><p>出处：<a class="link" href="https://blog.csdn.net/u014311125/article/details/121627540?spm=1001.2014.3001.5501">(44条消息) 遥感影像公开数据集:Massachusetts-建筑_GHZhao_GIS_RS的博客-CSDN博客_massachusetts道路数据集<i class="fas fa-external-link-alt"></i></a></p><h3 id="CHN6-CUG-Road-Dataset"><a href="#CHN6-CUG-Road-Dataset" class="headerlink" title="CHN6-CUG Road Dataset"></a>CHN6-CUG Road Dataset</h3><h5 id="数据集详细情况-1"><a href="#数据集详细情况-1" class="headerlink" title="数据集详细情况"></a>数据集详细情况</h5><p>CHN6-CUG Road Dataset是中国代表性城市的新型大型卫星图像数据集。其遥感影像底图来自谷歌地球。选取了6个城市化程度、城市规模、发展程度、城市结构、历史文化程度不同的城市，包括北京朝阳区、上海杨浦区、武汉市中心、深圳南山区、香港沙田地区、澳门。研究区域如图1所示。标记道路由有盖道路和无盖道路组成，具体取决于道路覆盖程度。根据地理因素的物理观点，标记道路包括铁路、高速公路、城市道路和农村道路等。<br>CHN6-CUG 包含 4511 张 512×512 大小的标记图像，分为 3608 张用于模型训练的图像和 903 张用于测试和结果评估的图像，分辨率为 50 厘米&#x2F;像素。原始数据集采用.jpg格式，道路标记图采用.png格式。压缩的数据量为 175MB。<br>CHN6-CUG 道路数据集中研究区域的概述<br>中国化学烷基化学道路数据集样本</p><h5 id="数据集下载地址-1"><a href="#数据集下载地址-1" class="headerlink" title="数据集下载地址"></a>数据集下载地址</h5><p>数据集下载：  链接：<a class="link" href="https://pan.baidu.com/share/init?surl=hHwUfwGvqb_5kM-3dpyM_g">百度网盘 请输入提取码 (baidu.com)<i class="fas fa-external-link-alt"></i></a><br>提取码：urs6</p><p>出处：<a class="link" href="http://grzy.cug.edu.cn/zhuqiqi/zh_CN/yjgk/32368/list/index.htm">朱祺琪 中文主页 公开数据共享 中国地质大学（武汉）教师个人主页系统 (cug.edu.cn)<i class="fas fa-external-link-alt"></i></a></p><h3 id="SOS-Deep-SAR-Oil-Spill-Dataset"><a href="#SOS-Deep-SAR-Oil-Spill-Dataset" class="headerlink" title="SOS: Deep-SAR Oil Spill Dataset"></a>SOS: Deep-SAR Oil Spill Dataset</h3><h5 id="数据集详细情况-2"><a href="#数据集详细情况-2" class="headerlink" title="数据集详细情况"></a>数据集详细情况</h5><p>SOS 数据集有两个研究区域：墨西哥湾漏油区和波斯湾漏油区。图1显示了墨西哥湾漏油的位置以及所选ALOS卫星图像的典型子集。图2给出了波斯湾漏油的位置和选定的Sentinel-1A卫星图像的典型子集。因此，使用数据增强技术来扩展原始数据集。裁剪、旋转、添加杂色和其他操作都在原始灰度地图上进行。最后，共使用了来自墨西哥石油泄漏地区的3101张图像进行训练，776张图像用于测试。共有3354张来自波斯湾漏油区的图像用于训练，839张图像用于测试。<br>图例.1. 墨西哥湾漏油的位置。（a）4月25日拍摄的NASA &#x2F;MODIS卫星图像，显示了深水地平线灾难的浮油。（资料来源：约翰·阿莫斯 2010 [1]）（b） 选定的“海洋法”卫星图像的典型子集。<br>图例.2. 波斯湾漏油的位置。（a） Sentinel-2多光谱卫星图像显示，2017年8月11日，浮油在科威特海岸的Al Khiran附近登陆。（资料来源：约翰·阿莫斯 2017 [2]）。（b） 选定的哨兵-1A卫星图像的典型子集。</p><h5 id="数据集下载地址-2"><a href="#数据集下载地址-2" class="headerlink" title="数据集下载地址"></a>数据集下载地址</h5><p>数据集下载：  <a class="link" href="https://pan.baidu.com/share/init?surl=TcbtGt7qp-IL0dALQ9HBlg">链接：百度网盘 请输入提取码 (baidu.com)<i class="fas fa-external-link-alt"></i></a><br>提取码：urs6<br>出处：<a class="link" href="http://grzy.cug.edu.cn/zhuqiqi/zh_CN/yjgk/32368/list/index.htm">朱祺琪 中文主页 公开数据共享 中国地质大学（武汉）教师个人主页系统 (cug.edu.cn)<i class="fas fa-external-link-alt"></i></a></p><h3 id="DeepGlobe-道路提取数据集"><a href="#DeepGlobe-道路提取数据集" class="headerlink" title="DeepGlobe 道路提取数据集"></a>DeepGlobe 道路提取数据集</h3><h5 id="数据集详细情况-3"><a href="#数据集详细情况-3" class="headerlink" title="数据集详细情况"></a>数据集详细情况</h5><p>Road Challenge 的训练数据包含 6226 张 RGB 卫星图像，大小为 1024x1024。<br>该图像具有 50 厘米像素分辨率，由 DigitalGlobe 的卫星收集。<br>该数据集包含 1243 个验证图像和 1101 个测试图像（但没有掩码）。<br>标签<br>每个卫星图像都与道路标签的蒙版图像配对。蒙版是灰度图像，白色代表道路像素，黑色代表背景。<br>卫星图像和相应蒙版图像的文件名是id _sat.jpg 和id _mask.png。id是一个随机整数。<br>请注意：遮罩图像的值可能不是纯0和255，转换为标签时，请在阈值128处进行二值化。<br>由于注释分割掩码的成本，标签并不完美，特别是在农村地区。此外，我们故意没有标注农田内的小路。</p><h5 id="数据集下载地址-3"><a href="#数据集下载地址-3" class="headerlink" title="数据集下载地址"></a>数据集下载地址</h5><p>数据集下载：  链接：<br><a class="link" href="https://bj.bcebos.com/ai-studio-online/bae42d32d39b46059783791e327bea12b2716d64cf654be08aa0c11bd670ef21?authorization=bce-auth-v1/5cfe9a5e1454405eb2a975c43eace6ec/2022-09-04T15:26:45Z/-1//3dc55e6d32d46b7c21406ee098d7c08c1eeba23e90082aa3da9a0b140abbc87d&amp;responseContentDisposition=attachment;%20filename=DeepGlobe.zip">https://bj.bcebos.com/ai-studio-online/bae42d32d39b46059783791e327bea12b2716d64cf654be08aa0c11bd670ef21?authorization=bce-auth-v1%2F5cfe9a5e1454405eb2a975c43eace6ec%2F2022-09-04T15%3A26%3A45Z%2F-1%2F%2F3dc55e6d32d46b7c21406ee098d7c08c1eeba23e90082aa3da9a0b140abbc87d&amp;responseContentDisposition=attachment%3B%20filename%3DDeepGlobe.zip<i class="fas fa-external-link-alt"></i></a><br>出处：<a class="link" href="https://aistudio.baidu.com/aistudio/datasetdetail/102399">DeepGlobe 道路提取数据集 - 飞桨AI Studio (baidu.com)<i class="fas fa-external-link-alt"></i></a></p><h3 id="Leveraging-Crowdsourced-GPS-Data-for-Road-Extraction-from-Aerial-Imagery"><a href="#Leveraging-Crowdsourced-GPS-Data-for-Road-Extraction-from-Aerial-Imagery" class="headerlink" title="Leveraging Crowdsourced GPS Data for Road Extraction from Aerial Imagery"></a>Leveraging Crowdsourced GPS Data for Road Extraction from Aerial Imagery</h3><h5 id="数据集详细情况-4"><a href="#数据集详细情况-4" class="headerlink" title="数据集详细情况"></a>数据集详细情况</h5><p>GPS 数据集包含从北京约 280000 辆汽车收集的约 50 米行 GPS 记录。<br>数据集下载地址<br>数据集下载：  为了节省加载时间，我们以Python的Pickle格式发布数据集，可以直接加载，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import pandas</span><br><span class="line">import pickle</span><br><span class="line">gps_data = pickle.load(open(<span class="string">&#x27;beijing_gps_dir_speed_interval_sorted.pkl&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>))</span><br></pre></td></tr></table></figure><p>出处：1.<a class="link" href="https://github.com/suniique/Leveraging-Crowdsourced-GPS-Data-for-Road-Extraction-from-Aerial-Imagery">suniique&#x2F;利用-众包-GPS-用于从航空图像中提取道路的数据：CVPR 2019年论文“利用众包GPS数据从航空图像中提取道路”的源代码 (github.com)<i class="fas fa-external-link-alt"></i></a><br>2.<a class="link" href="https://blog.csdn.net/weixin_42990464/article/details/113699960">(44条消息) 基于遥感影像的道路提取论文、开源代码和数据集汇总_点PY的博客-CSDN博客_道路提取<i class="fas fa-external-link-alt"></i></a></p><h3 id="RoadNet"><a href="#RoadNet" class="headerlink" title="RoadNet"></a>RoadNet</h3><h5 id="数据集详细情况-5"><a href="#数据集详细情况-5" class="headerlink" title="数据集详细情况"></a>数据集详细情况</h5><p>我们从谷歌地球收集了加拿大渥太华的几个典型城市地区。图像每像素的空间分辨率为0.21m（缩放级别为19）。<br>Training files:<br>2,3,4,5,6,7,8,9,10,11,12,13,14,15<br>Testing files:<br>1,16,17,18,19,20<br>我们以文件名1为例</p><table><thead><tr><th>文件名</th><th>解释</th></tr></thead><tbody><tr><td>Ottawa-1.tif</td><td>原始图像</td></tr><tr><td>segmentation.png</td><td>手动清除路面</td></tr><tr><td>edge.png</td><td>手动标注道路边缘</td></tr><tr><td>centerline.png</td><td>道路中心线的手动注释</td></tr><tr><td>extra.png</td><td>用单个像素宽度的画笔粗略标记异质区域（红色）</td></tr><tr><td>extra-Ottawa-1.tif</td><td>覆盖着Ottawa-1.tifextra.png</td></tr></tbody></table><h5 id="数据集下载地址-4"><a href="#数据集下载地址-4" class="headerlink" title="数据集下载地址"></a>数据集下载地址</h5><p>数据集下载： 链接：<a class="link" href="https://pan.baidu.com/s/1l9RZvyYfLgTOx_k4LQRyhQ">https://pan.baidu.com/s/1l9RZvyYfLgTOx_k4LQRyhQ<i class="fas fa-external-link-alt"></i></a><br>             提取码：h2zt</p><p>出处：1. <a class="link" href="https://github.com/mitroadmaps/roadtagger">https://github.com/mitroadmaps/roadtagger<i class="fas fa-external-link-alt"></i></a><br>2.<a class="link" href="https://blog.csdn.net/weixin_42990464/article/details/113699960">(44条消息) 基于遥感影像的道路提取论文、开源代码和数据集汇总_点PY的博客-CSDN博客_道路提取<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generative-Graph-Transformer"><a href="#Generative-Graph-Transformer" class="headerlink" title="Generative Graph Transformer"></a>Generative Graph Transformer</h3><h5 id="数据集详细情况-6"><a href="#数据集详细情况-6" class="headerlink" title="数据集详细情况"></a>数据集详细情况</h5><p>图卢兹道路网络数据集。如果运行该脚本，将下载我们论文中介绍的数据集（图卢兹道路网络数据集）。<br>图卢兹路网数据集，用于从卫星图像的语义分割中提取道路网</p><h5 id="数据集下载地址-5"><a href="#数据集下载地址-5" class="headerlink" title="数据集下载地址"></a>数据集下载地址</h5><p>数据集下载： generative-graph-transformer&#x2F;download_dataset.sh at master · davide-belli&#x2F;generative-graph-transformer (github.com)<br>出处：1. <a class="link" href="https://github.com/davide-belli/generative-graph-transformer">https://github.com/davide-belli/generative-graph-transformer<i class="fas fa-external-link-alt"></i></a><br>2.<a class="link" href="https://blog.csdn.net/weixin_42990464/article/details/113699960">(44条消息) 基于遥感影像的道路提取论文、开源代码和数据集汇总_点PY的博客-CSDN博客_道路提取<i class="fas fa-external-link-alt"></i></a></p><h3 id="road-connectivity"><a href="#road-connectivity" class="headerlink" title="road_connectivity"></a>road_connectivity</h3><h5 id="数据集详细情况-7"><a href="#数据集详细情况-7" class="headerlink" title="数据集详细情况"></a>数据集详细情况</h5><p>在本文中，我们提出了一个名为方向学习的连接任务，其动机是人类通过在特定方向跟踪道路来注释道路的行为。我们还开发了一个堆叠的多分支卷积模块，以有效地利用方向学习和分割任务之间的相互信息。</p><h5 id="数据集下载地址-6"><a href="#数据集下载地址-6" class="headerlink" title="数据集下载地址"></a>数据集下载地址</h5><p>数据集下载： road_connectivity&#x2F;data at master · anilbatra2185&#x2F;road_connectivity (github.com)<br>出处：1. <a class="link" href="https://github.com/anilbatra2185/road_connectivity">https://github.com/anilbatra2185/road_connectivity<i class="fas fa-external-link-alt"></i></a><br>2.(44条消息) 基于遥感影像的道路提取论文、开源代码和数据集汇总_点PY的博客-CSDN博客_道路提取</p><h3 id="DeepGlobeRoad"><a href="#DeepGlobeRoad" class="headerlink" title="DeepGlobeRoad"></a>DeepGlobeRoad</h3><h5 id="数据集详细情况-8"><a href="#数据集详细情况-8" class="headerlink" title="数据集详细情况"></a>数据集详细情况</h5><p>比赛数据集包含6226张训练图像，1243张验证图像，以及1101张测试图像。所有的图像尺寸均为1024*1024，图像来源于泰国、印度、印度尼西亚，图像场景包括城市、乡村、荒郊、海滨、热带雨林等多个场景。</p><h5 id="数据集下载地址-7"><a href="#数据集下载地址-7" class="headerlink" title="数据集下载地址"></a>数据集下载地址</h5><p>数据集下载： 链接：<a class="link" href="https://pan.baidu.com/s/1aG1qdTFEcIwzh2YruBGUNA">https://pan.baidu.com/s/1aG1qdTFEcIwzh2YruBGUNA<i class="fas fa-external-link-alt"></i></a><br>             提取码：podb<br>出处：<a class="link" href="https://blog.csdn.net/weixin_42990464/article/details/113699960">(44条消息) 基于遥感影像的道路提取论文、开源代码和数据集汇总_点PY的博客-CSDN博客_道路提取<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;h3 id=&quot;简介-1&quot;&gt;&lt;a href=&quot;#简介-1&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;t</summary>
      
    
    
    
    <category term="路网识别数据集" scheme="https://sunset148.github.io/categories/%E8%B7%AF%E7%BD%91%E8%AF%86%E5%88%AB%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    
    
    <category term="路网识别" scheme="https://sunset148.github.io/tags/%E8%B7%AF%E7%BD%91%E8%AF%86%E5%88%AB/"/>
    
    <category term="数据集" scheme="https://sunset148.github.io/tags/%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>leetcode9-23</title>
    <link href="https://sunset148.github.io/2022/09/23/leetcode9-23/"/>
    <id>https://sunset148.github.io/2022/09/23/leetcode9-23/</id>
    <published>2022-09-23T09:09:30.000Z</published>
    <updated>2022-09-23T09:20:32.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="leetcode每日一天（9-23）"><a href="#leetcode每日一天（9-23）" class="headerlink" title="leetcode每日一天（9.23）"></a>leetcode每日一天（9.23）</h2><p><a class="link" href="https://leetcode.cn/problems/design-linked-list/">707. 设计链表<i class="fas fa-external-link-alt"></i></a><br>设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：<code>val</code> 和 <code>next</code>。<code>val</code> 是当前节点的值，<code>next</code> 是指向下一个节点的指针&#x2F;引用。如果要使用双向链表，则还需要一个属性 <code>prev</code> 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。<br>在链表类中实现这些功能：</p><ol><li>get(index)：获取链表中第<code>index</code>个节点的值。如果索引无效，则返回-1。</li><li>addAtHead(val)：在链表的第一个元素之前添加一个值为 <code>val</code> 的节点。插入后，新节点将成为链表的第一个节点。</li><li>addAtHead(val)：在链表的第一个元素之前添加一个值为<code> val</code> 的节点。插入后，新节点将成为链表的第一个节点。</li><li>addAtIndex(index,val)：在链表中的第<code> index </code>个节点之前添加值为<code> val</code>  的节点。如果<code> index </code>等于链表的长度，则该节点将附加到链表的末尾。如果 <code>index</code> 大于链表长度，则不会插入节点。如果<code>index</code>小于0，则在头部插入节点。</li><li>deleteAtIndex(index)：如果索引<code>index</code>有效，则删除链表中的第 <code>index</code> 个节点。</li></ol><h6 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MyLinkedList linkedList = new MyLinkedList();</span><br><span class="line">linkedList.addAtHead(1);</span><br><span class="line">linkedList.addAtTail(3);</span><br><span class="line">linkedList.addAtIndex(1,2);   //链表变为1-&gt; 2-&gt; 3</span><br><span class="line">linkedList.get(1);            //返回2</span><br><span class="line">linkedList.deleteAtIndex(1);  //现在链表是1-&gt; 3</span><br><span class="line">linkedList.get(1);            //返回3</span><br></pre></td></tr></table></figure><h6 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">所有val值都在 [1, 1000] 之内。</span><br><span class="line">操作次数将在  [1, 1000] 之内。</span><br><span class="line">请不要使用内置的 LinkedList 库。</span><br></pre></td></tr></table></figure><hr><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h6 id="思想："><a href="#思想：" class="headerlink" title="思想："></a>思想：</h6><p>这是一道水题目，主要是用到数据结构里面的链表，我是用的c++里面的ListNode来解答这题比较轻松。题目要求有三处增加函数，实质上在首部添加数值和在尾部添加数值的操作可以归纳为addAtIndex，则我们在addAtHead和addAtTail可以直接调用addAtIndex用来减少我们的代码量。</p><h6 id="ListNode的结构："><a href="#ListNode的结构：" class="headerlink" title="ListNode的结构："></a>ListNode的结构：</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct ListNode &#123;</span><br><span class="line">      int val;  //当前结点的值</span><br><span class="line">      ListNode *next;  //指向下一个结点的指针</span><br><span class="line">      ListNode(int x) : val(x), next(NULL) &#123;&#125;  //初始化当前结点值为x,指针为空</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">ListNode *p=new ListNode(0); //新增一个节点</span><br><span class="line">delete p; //删除一个节点，释放内存</span><br></pre></td></tr></table></figure><h6 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">class MyLinkedList &#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="function"><span class="title">MyLinkedList</span></span>() &#123;</span><br><span class="line">        this-&gt;size = 0;</span><br><span class="line">        this-&gt;<span class="built_in">head</span> = new ListNode(0); //首节点，值无意义</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int get(int index) &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;0||index&gt;=size)</span><br><span class="line">            <span class="built_in">return</span> -1;</span><br><span class="line">        ListNode *cur = <span class="built_in">head</span>;</span><br><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt;= index; i++) &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> cur-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void addAtHead(int val) &#123;</span><br><span class="line">        addAtIndex(0, val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void addAtTail(int val) &#123;</span><br><span class="line">        addAtIndex(size,val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void addAtIndex(int index, int val) &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;size)</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        index=max(0,index);</span><br><span class="line">        ListNode *cur=<span class="built_in">head</span>;</span><br><span class="line">        <span class="keyword">for</span>(int i=0;i&lt;index;i++)</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        ListNode *toAdd = new ListNode(val);</span><br><span class="line">        toAdd-&gt;next = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = toAdd;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void deleteAtIndex(int index) &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;0||index&gt;=size)</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        ListNode *cur=<span class="built_in">head</span>;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">for</span>(int i=0;i&lt;index;i++)</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        ListNode *p = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">        delete p;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    int size;</span><br><span class="line">    ListNode *<span class="built_in">head</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Your MyLinkedList object will be instantiated and called as such:</span><br><span class="line"> * MyLinkedList* obj = new MyLinkedList();</span><br><span class="line"> * int param_1 = obj-&gt;get(index);</span><br><span class="line"> * obj-&gt;addAtHead(val);</span><br><span class="line"> * obj-&gt;addAtTail(val);</span><br><span class="line"> * obj-&gt;addAtIndex(index,val);</span><br><span class="line"> * obj-&gt;deleteAtIndex(index);</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;leetcode每日一天（9-23）&quot;&gt;&lt;a href=&quot;#leetcode每日一天（9-23）&quot; class=&quot;headerlink&quot; title=&quot;leetcode每日一天（9.23）&quot;&gt;&lt;/a&gt;leetcode每日一天（9.23）&lt;/h2&gt;&lt;p&gt;&lt;a cla</summary>
      
    
    
    
    <category term="leetcode" scheme="https://sunset148.github.io/categories/leetcode/"/>
    
    
    <category term="八股文" scheme="https://sunset148.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>博客新增了搜索、分类还有标签功能</title>
    <link href="https://sunset148.github.io/2022/09/23/newHexoSomeFunction/"/>
    <id>https://sunset148.github.io/2022/09/23/newHexoSomeFunction/</id>
    <published>2022-09-23T06:27:58.000Z</published>
    <updated>2022-09-23T07:02:33.530Z</updated>
    
    <content type="html"><![CDATA[<p>今天为博客新增了搜索、分类还有标签功能</p><h2 id="搜索功能添加"><a href="#搜索功能添加" class="headerlink" title="搜索功能添加"></a>搜索功能添加</h2><p>本文主要描述了怎么添加hexo博客搜索插件，然后启动搜索功能，对两个本地搜索插件的使用进行了描述，文章可能还有很多不足，请大家谅解，欢迎大佬提意见。</p><h3 id="本文用的东西"><a href="#本文用的东西" class="headerlink" title="本文用的东西"></a>本文用的东西</h3><ol><li>hexo</li><li>电脑</li></ol><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="插件比较"><a href="#插件比较" class="headerlink" title="插件比较"></a>插件比较</h4><p>“hexo-generator-searchdb”插件功能比较强大，可以替代后面讲的第二个插件“hexo-generator-json-content”插件。而“hexo-generator-json-content”插件只能生产json文件，且不能定义文件名，无法替代“hexo-generator-searchdb”插件，但是“hexo-generator-json-content”可以定义生成的json文件的格式。</p><h4 id="hexo-generator-searchdb插件"><a href="#hexo-generator-searchdb插件" class="headerlink" title="hexo-generator-searchdb插件"></a>hexo-generator-searchdb插件</h4><h5 id="插件原理"><a href="#插件原理" class="headerlink" title="插件原理"></a>插件原理</h5><p>这个插件会扫描博客文章，根据“——config.yml”的配置从文章里获取内容生成一个xml&#x2F;json文件的结果，类似于博客中文章信息的摘要把，搜索的时候就搜索这个文件的内容。</p><h5 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h5><ol><li>打开<code>cmd</code></li><li>输入以下命令添加博客搜索插件。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//未配置淘宝的数据源</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line">//配置淘宝数据源的可以使用这条命令，网络会好一些</span><br><span class="line">cnpm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li><li>打开博客目录，找到<code>_config.yml</code>文件，添加以下内容。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: <span class="literal">true</span></span><br><span class="line">  format: html</span><br></pre></td></tr></table></figure><code>path</code>：表示搜索后生成的文件路径，可以生成xml和json两种格式；将path设置为<code>content.json</code>就可以替代第二个插件。<br><code>field</code>：表示搜索的范围，有<code>post</code>、<code>page</code>和<code>all</code>三种值。<br>    <code>post</code>：所有的文章；<br>    <code>page</code>：所有顶部导航选项的页面；<br>    <code>all</code>：所有的文章和顶部导航选项的页面。<br><code>content</code>：是否包含搜索到的文章的全部内容。如果<code>false</code>，生成的结果只包括标题和创建时间这些信息，没有文章主体。默认情况下是<code>true</code>.<br><code>format</code>：搜索到的内容、选项的格式。<br>    <code>html</code>(默认)：将html原文本缩略。<br>    <code>striptags</code>：将html原文本缩略，并删除所有标记。<br>    <code>raw</code>：记下每一篇文章或每一页的文字。</li></ol><h5 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h5><p>打开博客目录目录，找到当前正在使用的主题的<code>_config.yml</code>文件，打开进行编辑，找到<code>local_search</code>，修改<code>enable</code>的值为<code>true</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地搜索</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>到此即可使用搜索功能了</p><hr><h2 id="分类、标签和留言功能添加"><a href="#分类、标签和留言功能添加" class="headerlink" title="分类、标签和留言功能添加"></a>分类、标签和留言功能添加</h2><p>这三个功能实际上是异曲同工的。使用类似的方法即可添加</p><h4 id="新建标签页"><a href="#新建标签页" class="headerlink" title="新建标签页"></a>新建标签页</h4><p>用命令行新建一个页面：（页面名称可以任意）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;tages&quot;</span> </span><br></pre></td></tr></table></figure><h4 id="设置其类型-type-值为“tages”"><a href="#设置其类型-type-值为“tages”" class="headerlink" title="设置其类型 type 值为“tages”"></a>设置其类型 type 值为“tages”</h4><p>用命令行新建一个页打开 &#x2F;source&#x2F;tages&#x2F;index.md，设置其类型<code>type</code>值为<code>tages</code>：（页面名称可以任意）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: tags</span><br><span class="line"><span class="built_in">date</span>: 2019-07-26 00:33:58</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure><p>如果需要多个标签或者分类的话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- 分类</span><br><span class="line">- 子分类</span><br><span class="line">- 子子分类</span><br><span class="line">tags:</span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br></pre></td></tr></table></figure><h4 id="在主题的配置文件更改"><a href="#在主题的配置文件更改" class="headerlink" title="在主题的配置文件更改"></a>在主题的配置文件更改</h4><p>打开 &#x2F;themes&#x2F;主题&#x2F;_config.yml，把tages标签那项取消注释即可，下面的是已经取消注释了的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  主页: /</span><br><span class="line">  <span class="comment">#随笔: /tags/随笔/</span></span><br><span class="line">  <span class="comment">#分类: /categories</span></span><br><span class="line">  <span class="comment">#归档: /archives</span></span><br><span class="line">  标签: /tags</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天为博客新增了搜索、分类还有标签功能&lt;/p&gt;
&lt;h2 id=&quot;搜索功能添加&quot;&gt;&lt;a href=&quot;#搜索功能添加&quot; class=&quot;headerlink&quot; title=&quot;搜索功能添加&quot;&gt;&lt;/a&gt;搜索功能添加&lt;/h2&gt;&lt;p&gt;本文主要描述了怎么添加hexo博客搜索插件，然后启动搜</summary>
      
    
    
    
    <category term="hexo" scheme="https://sunset148.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="https://sunset148.github.io/tags/hexo/"/>
    
    <category term="hexo搜索" scheme="https://sunset148.github.io/tags/hexo%E6%90%9C%E7%B4%A2/"/>
    
    <category term="hexo分类、标签和留言墙" scheme="https://sunset148.github.io/tags/hexo%E5%88%86%E7%B1%BB%E3%80%81%E6%A0%87%E7%AD%BE%E5%92%8C%E7%95%99%E8%A8%80%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>hexo增添评论区</title>
    <link href="https://sunset148.github.io/2022/09/22/newComment/"/>
    <id>https://sunset148.github.io/2022/09/22/newComment/</id>
    <published>2022-09-22T14:54:58.000Z</published>
    <updated>2022-09-23T06:57:56.862Z</updated>
    
    <content type="html"><![CDATA[<p>hexo有三种新增评论的模板分别是：valine、gitalk还有twikoo。我使用的是twikoo。</p><h2 id="Twikoo"><a href="#Twikoo" class="headerlink" title="Twikoo"></a>Twikoo</h2><p>Twikoo是一个静态博客评论系统，除了评论功能，还可以记录文章阅读量。搭建过程包括准备数据库和云函数，还有修改主题配置文件。<br>而配置Twikoo主要是分两种一种是使用腾讯云来布置，一种是使用Mongodb+Vercel部署。</p><h3 id="腾讯云部署"><a href="#腾讯云部署" class="headerlink" title="腾讯云部署"></a>腾讯云部署</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>注册<a class="link" href="https://curl.qcloud.com/KnnJtUom">云开发CloudBase(opens new window)<i class="fas fa-external-link-alt"></i></a><br>进入<a class="link" href="https://console.cloud.tencent.com/tcb/">云开发控制台 (opens new window)<i class="fas fa-external-link-alt"></i></a>，新建环境，请按个人需要配置#### 环境</p><ol><li>进入后选择空模板</li><li>安全配置：再登录授权中启用“匿名登录”</li><li>选择安全配置，将网站域名添加到“WEB安全域名”</li><li>进入环境总览中复制环境id（后面要用)</li></ol><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>我们一般选择手动部署</p><ol><li>新建函数，函数名称填写：<code>twikoo</code>，创建方式选择：<code>空白函数</code>，运行环境选择：<code>Nodejs 10.15</code>（选择最靠近你的运行环境的版本），函数内存请选择：<code>128MB</code></li><li>点击下一步，修改函数代码：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exports.main = require(<span class="string">&#x27;twikoo-func&#x27;</span>).main</span><br></pre></td></tr></table></figure></li><li>确定完成后，点击刚才创建的twikoo函数，点击函数代码，创建<code> package.json</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">&quot;dependencies&quot;</span>: &#123; <span class="string">&quot;twikoo-func&quot;</span>: <span class="string">&quot;1.4.9&quot;</span> &#125; &#125;</span><br></pre></td></tr></table></figure>twikoo-func填写最新的版本</li></ol><h4 id="命令行环境部署"><a href="#命令行环境部署" class="headerlink" title="命令行环境部署"></a>命令行环境部署</h4><p>以下操作部署，可使用任意环境面板部署，这里使用的是git进行部署</p><ol><li>克隆本仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/imaegoo/twikoo.git</span><br><span class="line"><span class="built_in">cd</span> twikoo</span><br></pre></td></tr></table></figure></li><li>安装依赖项<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn <span class="comment"># 已安装 yarn 可以跳过此步</span></span><br><span class="line">yarn install</span><br></pre></td></tr></table></figure></li><li>授权云开发环境（会自动跳转到授权界面，点击授权即可）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn run login</span><br></pre></td></tr></table></figure></li><li>自动部署<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn deploy -e 您的环境<span class="built_in">id</span> (就是之前你复制的)</span><br></pre></td></tr></table></figure></li></ol><h4 id="在-Hexo-中使用"><a href="#在-Hexo-中使用" class="headerlink" title="在 Hexo 中使用"></a>在 Hexo 中使用</h4><ol><li>在主题的配置文件中找到comment<br>enable改为true，use为twikoo<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">comment:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  use: twikoo <span class="comment"># values: valine | gitalk | twikoo</span></span><br></pre></td></tr></table></figure></li><li>继续往下找寻 twikoo<br>region一定要填写<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">twikoo:</span><br><span class="line">  env_id:  填写你的环境iD  <span class="comment">#https://www.sunset148.top/ Tencent Cloud environment id</span></span><br><span class="line">  region: ap-shanghai <span class="comment"># environment region. If select Guangzhou, fill in &quot;ap-guangzhou&quot;.</span></span><br></pre></td></tr></table></figure>到这里在腾讯云的配置就结束了</li></ol><hr><h3 id="Mongodb-Vercel部署"><a href="#Mongodb-Vercel部署" class="headerlink" title="Mongodb+Vercel部署"></a>Mongodb+Vercel部署</h3><h4 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h4><p>我们使用MongoDB存储数据</p><ol><li><a class="link" href="https://www.mongodb.com/zh-cn/cloud/atlas/register">注册MongoDB账号<i class="fas fa-external-link-alt"></i></a></li><li>创建免费数据库，类型选择<code>Shared</code>，区域选择 <code>AWS / N. Virginia (us-east-1)</code> </li><li>点击<code>Connect</code>按钮，键入 0.0.0.0&#x2F;0 以允许所有 IP 地址的连接，并创建数据库用户</li><li>连接方式选择中间的<code>Connect your application</code></li><li>记录下连接字符串，等下使用时记得将其中的 <password> 修改为刚刚设置的用户密码（<password>需要整体替换）</password></password></li></ol><h4 id="Vercel"><a href="#Vercel" class="headerlink" title="Vercel"></a>Vercel</h4><ol><li>使用<code>Vercel</code>来运行云函数，先注册 <a class="link" href="https://vercel.com/signup">vercel 账号<i class="fas fa-external-link-alt"></i></a>，可以选择从<code>GitHub</code>之类的登录，也可以选择通过邮箱注册</li><li>新创建一个库来保存代码（如果你之前用使用该<a class="link" href="https://twikoo.js.org/quick-start.html#vercel-%E9%83%A8%E7%BD%B2">链接<i class="fas fa-external-link-alt"></i></a>）</li><li>完成后，在导航栏选择<code>Setting</code>，在左侧选择<code>Environment Variables</code>，添加变量<code>MONGODB_URI</code>，值输入刚才的连接字符串，记得修改 <code>&lt;password&gt;</code> 为数据库用户密码</li><li>导航栏中选择<code>Deployments</code>，重新部署一下</li><li>回到<code>Overview</code>，可以看见<code>云函数运行正常</code>字样，在右边的<code>域名（DOMAINS）</code>里挑一个记录下你的域名,而该域名就是你的环境ID</li></ol><h5 id="Tip："><a href="#Tip：" class="headerlink" title="Tip："></a>Tip：</h5><p>因为 Vercel.app 可能在国内被墙，所以可能需要手动添加一个自己域名。<br>但是解决方法也很简单——准备一个新域名，然后把这个域名指过去</p><ol><li>来到 <code>vercel</code> 控制台，点进去你的实例</li><li>找到 <code>Setting</code> -&gt; <code>Domain</code></li><li>手动添加你的域名进去</li><li>他会给出解析配置，你就去改你的域名解析就好了（在你购买域名的官网会有一个域名解析）</li><li>最后去主题配置文件里更新这个新地址就行</li></ol><h4 id="主题文件配置"><a href="#主题文件配置" class="headerlink" title="主题文件配置"></a>主题文件配置</h4><p>在主题文件中找到配置文件keep\layout_partial\comment</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">twikoo:</span><br><span class="line">  env_id:  你的域名  <span class="comment">#https://www.sunset148.top/ Tencent Cloud environment id</span></span><br><span class="line">  region: ap-shanghai <span class="comment"># environment region. If select Guangzhou, fill in &quot;ap-guangzhou&quot;.</span></span><br></pre></td></tr></table></figure><p>重启Hexo，就能可以看到了。</p><hr><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>但很有可能你的评论系统打不开，很有可能是因为<code>Butterfly</code>版本过低的问题。<br>博主试了几个Butterfly依旧开不开评论系统，转而投向了keep</p><h5 id="keep安装"><a href="#keep安装" class="headerlink" title="keep安装"></a>keep安装</h5><p>如果你在使用 Hexo 5.0 或更高版本，最简单的安装方式是通过 npm：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo-site</span><br><span class="line">$ npm install hexo-theme-keep</span><br></pre></td></tr></table></figure><p>或者使用 git 克隆整个仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo-site</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/XPoet/hexo-theme-keep themes/keep</span><br></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>安装完成后，在 Hexo 配置文件中将<code>theme</code>设置为<code> keep</code>。<br>Keep 不定期发布新版本，你可以通过如下命令更新 Keep。</p><h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><p>通过 npm 安装最新版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo-site</span><br><span class="line">$ npm update hexo-theme-keep</span><br></pre></td></tr></table></figure><p>通过 git 更新到最新的 master 分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/keep</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure><h5 id="Twikoo-1"><a href="#Twikoo-1" class="headerlink" title="Twikoo"></a>Twikoo</h5><p>另外在keep里面的keep\layout_partial\comment的twikoo.ejs里面的版本号更改为最新的就是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script &lt;%= theme.pjax.enable === <span class="literal">true</span> ? <span class="string">&#x27;data-pjax&#x27;</span> : <span class="string">&#x27;&#x27;</span> %&gt;                src=<span class="string">&quot;//cdn.jsdelivr.net/npm/twikoo@1.6.7/dist/twikoo.all.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><a class="link" href="https://keep-docs.xpoet.cn/usage-tutorial/quick-start.html">keep官方文档<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hexo有三种新增评论的模板分别是：valine、gitalk还有twikoo。我使用的是twikoo。&lt;/p&gt;
&lt;h2 id=&quot;Twikoo&quot;&gt;&lt;a href=&quot;#Twikoo&quot; class=&quot;headerlink&quot; title=&quot;Twikoo&quot;&gt;&lt;/a&gt;Twikoo&lt;/</summary>
      
    
    
    
    <category term="hexo" scheme="https://sunset148.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="https://sunset148.github.io/tags/hexo/"/>
    
    <category term="hexo新增评论区" scheme="https://sunset148.github.io/tags/hexo%E6%96%B0%E5%A2%9E%E8%AF%84%E8%AE%BA%E5%8C%BA/"/>
    
  </entry>
  
  <entry>
    <title>leetcode9.20</title>
    <link href="https://sunset148.github.io/2022/09/20/leetcode9-20/"/>
    <id>https://sunset148.github.io/2022/09/20/leetcode9-20/</id>
    <published>2022-09-20T12:58:46.000Z</published>
    <updated>2022-09-22T16:07:06.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="leetcode每日一天（9-20）"><a href="#leetcode每日一天（9-20）" class="headerlink" title="leetcode每日一天（9.20）"></a>leetcode每日一天（9.20）</h2><p><a class="link" href="https://leetcode.cn/problems/partition-to-k-equal-sum-subsets/">题目：698. 划分为k个相等的子集<i class="fas fa-external-link-alt"></i></a><br>给定一个整数数组  nums 和一个正整数 k，找出是否有可能把这个数组分成 k 个非空子集，其总和都相等。</p><h6 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入： nums = [4, 3, 2, 3, 5, 2, 1], k = 4</span><br><span class="line">输出： True</span><br><span class="line">说明： 有可能将其分成 4 个子集（5），（1,4），（2,3），（2,3）等于总和。</span><br></pre></td></tr></table></figure><h6 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,2,3,4], k = 3</span><br><span class="line">输出: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h6 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;= k &lt;= len(nums) &lt;= 16</span><br><span class="line">0 &lt; nums[i] &lt; 10000</span><br><span class="line">每个元素的频率在 [1,4] 范围内</span><br></pre></td></tr></table></figure><hr><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h6 id="思想："><a href="#思想：" class="headerlink" title="思想："></a>思想：</h6><p>我们可以把每个集合看做一个桶，然后我们可以通过dfs和剪枝来模拟每个数值入桶和出桶。</p><h6 id="剪枝："><a href="#剪枝：" class="headerlink" title="剪枝："></a>剪枝：</h6><p>因为我们需要有k个桶且每个桶的值是相等的。以此可以推出给定的值相加一定是桶的值的倍速，并且不会存在比桶值大的数值。最关键的剪枝为，我们在dfs遍历一个桶是否可以装满，如果回溯的时候发现这个桶回到了初始值，则证明这个桶是装不满的。然而，每个桶都是一样的，这个桶装不满则其他桶一样装不满。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">bool canPartitionKSubsets(vector&lt;int&gt;&amp; nums, int k) &#123;</span><br><span class="line">    int <span class="built_in">sum</span>=0,size=nums.size();</span><br><span class="line">    int maxN=-1;</span><br><span class="line">    <span class="keyword">for</span>(int i=0;i&lt;size;i++)</span><br><span class="line">        <span class="built_in">sum</span>+=nums[i],maxN=max(maxN,nums[i]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sum</span>%k!=0||maxN&gt;<span class="built_in">sum</span>/k)</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">sum</span>=<span class="built_in">sum</span>/k;</span><br><span class="line">    <span class="built_in">sort</span>(nums.begin(), nums.end());</span><br><span class="line">  //  cout&lt;&lt;<span class="string">nums[0];</span></span><br><span class="line"><span class="string">    vector&lt;int&gt; arr(k,sum);</span></span><br><span class="line"><span class="string">    bool t=false;</span></span><br><span class="line"><span class="string">    t=dfs(nums</span>,arr,size-1,k,size,<span class="built_in">sum</span>);</span><br><span class="line">    <span class="built_in">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">//nums给定数组 arr模拟每一个桶  cur以此遍历每个数值 k一共有几个桶 size原数组大小 <span class="built_in">sum</span>每个桶的值</span><br><span class="line">bool dfs(vector&lt;int&gt;&amp; nums,vector&lt;int&gt;&amp; arr,int cur,int k,int size,int <span class="built_in">sum</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur &lt; 0)&#123;</span><br><span class="line">        <span class="keyword">for</span>(int i=0;i&lt;k;i++)</span><br><span class="line">            <span class="keyword">if</span>(arr[i]!=0)</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(int i=0;i&lt;k;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]-nums[cur]&lt;nums[0]&amp;&amp;arr[i]!=nums[cur])</span><br><span class="line">            <span class="built_in">continue</span>;</span><br><span class="line">        arr[i] -= nums[cur];</span><br><span class="line">        // <span class="keyword">for</span>(int j=0;j&lt;k;j++)</span><br><span class="line">        //     cout&lt;&lt;<span class="string">arr[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="string">        // cout&lt;&lt;endl;</span></span><br><span class="line"><span class="string">        if(dfs(nums,arr</span>,cur-1,k,size,<span class="built_in">sum</span>))</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        arr[i] += nums[cur];</span><br><span class="line">        <span class="keyword">if</span>(arr[i]==<span class="built_in">sum</span>)</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;leetcode每日一天（9-20）&quot;&gt;&lt;a href=&quot;#leetcode每日一天（9-20）&quot; class=&quot;headerlink&quot; title=&quot;leetcode每日一天（9.20）&quot;&gt;&lt;/a&gt;leetcode每日一天（9.20）&lt;/h2&gt;&lt;p&gt;&lt;a cla</summary>
      
    
    
    
    <category term="leetcode" scheme="https://sunset148.github.io/categories/leetcode/"/>
    
    
    <category term="八股文" scheme="https://sunset148.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>发博文</title>
    <link href="https://sunset148.github.io/2022/09/19/sendBlog/"/>
    <id>https://sunset148.github.io/2022/09/19/sendBlog/</id>
    <published>2022-09-19T06:41:55.000Z</published>
    <updated>2022-09-23T07:06:49.389Z</updated>
    
    <content type="html"><![CDATA[<h3 id="发博文"><a href="#发博文" class="headerlink" title="发博文"></a>发博文</h3><h5 id="1-使用下面命令创建一个md文档"><a href="#1-使用下面命令创建一个md文档" class="headerlink" title="1.使用下面命令创建一个md文档"></a>1.使用下面命令创建一个md文档</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx hexo new  <span class="string">&quot;页面名称&quot;</span></span><br></pre></td></tr></table></figure><p>然后在source_posts中可以找到刚刚创建的文档</p><h5 id="写文档"><a href="#写文档" class="headerlink" title="写文档"></a>写文档</h5><p>要实现顶置的文章，需在文章页添加 <code>sticky </code>属性，<code>sticky</code> 值越大，顶置的文章越靠前</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">tile:</span><br><span class="line"><span class="built_in">date</span>:</span><br><span class="line">tages:</span><br><span class="line">categories</span><br><span class="line">sticky: 999</span><br><span class="line">---</span><br><span class="line">在这里开始写博文的正文</span><br></pre></td></tr></table></figure><p>博文是用Markdown语言写的，所以你可以用Markdown编辑器。推荐 Haroopad和MaHua</p><h5 id="发博文-1"><a href="#发博文-1" class="headerlink" title="发博文"></a>发博文</h5><p>只需要输入三个命令就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npx hexo clean</span><br><span class="line">npx hexo generate</span><br><span class="line">git config --global user.name <span class="string">&quot;你的GitHub名字&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的GitHub邮箱&quot;</span></span><br><span class="line">(若要本地预览就先执行 hexo server)</span><br><span class="line">npx hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;发博文&quot;&gt;&lt;a href=&quot;#发博文&quot; class=&quot;headerlink&quot; title=&quot;发博文&quot;&gt;&lt;/a&gt;发博文&lt;/h3&gt;&lt;h5 id=&quot;1-使用下面命令创建一个md文档&quot;&gt;&lt;a href=&quot;#1-使用下面命令创建一个md文档&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="hexo" scheme="https://sunset148.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="https://sunset148.github.io/tags/hexo/"/>
    
    <category term="发博文" scheme="https://sunset148.github.io/tags/%E5%8F%91%E5%8D%9A%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>first one</title>
    <link href="https://sunset148.github.io/2022/09/19/the-new-day/"/>
    <id>https://sunset148.github.io/2022/09/19/the-new-day/</id>
    <published>2022-09-19T03:51:15.000Z</published>
    <updated>2022-09-22T16:02:17.313Z</updated>
    
    <content type="html"><![CDATA[<h2 id="美好的一天从躺平开始！！"><a href="#美好的一天从躺平开始！！" class="headerlink" title="美好的一天从躺平开始！！"></a>美好的一天从躺平开始！！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;美好的一天从躺平开始！！&quot;&gt;&lt;a href=&quot;#美好的一天从躺平开始！！&quot; class=&quot;headerlink&quot; title=&quot;美好的一天从躺平开始！！&quot;&gt;&lt;/a&gt;美好的一天从躺平开始！！&lt;/h2&gt;</summary>
      
    
    
    
    <category term="日常" scheme="https://sunset148.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="水文" scheme="https://sunset148.github.io/tags/%E6%B0%B4%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://sunset148.github.io/2022/09/19/hello-world/"/>
    <id>https://sunset148.github.io/2022/09/19/hello-world/</id>
    <published>2022-09-19T03:50:17.860Z</published>
    <updated>2022-09-22T14:51:00.160Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link" href="https://hexo.io/">Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link" href="https://hexo.io/docs/">documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link" href="https://github.com/hexojs/hexo/issues">GitHub<i class="fas fa-external-link-alt"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a class="link" href="https://hexo.io/docs/writing.html">Writing<i class="fas fa-external-link-alt"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a class="link" href="https://hexo.io/docs/server.html">Server<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a class="link" href="https://hexo.io/docs/generating.html">Generating<i class="fas fa-external-link-alt"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a class="link" href="https://hexo.io/docs/one-command-deployment.html">Deployment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a class=&quot;link&quot; href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;! This is your very first post. Check </summary>
      
    
    
    
    <category term="hexo" scheme="https://sunset148.github.io/categories/hexo/"/>
    
    
    <category term="hexo命令" scheme="https://sunset148.github.io/tags/hexo%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
</feed>
